
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Sep 04 08:31:20 CEST 2019
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.HashMap;
import java.util.AbstractMap.SimpleEntry;
import java.util.ArrayList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Sep 04 08:31:20 CEST 2019
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\117\000\002\002\004\000\002\002\004\000\002\003" +
    "\003\000\002\003\005\000\002\011\005\000\002\011\004" +
    "\000\002\012\005\000\002\012\003\000\002\013\005\000" +
    "\002\013\004\000\002\014\003\000\002\014\005\000\002" +
    "\004\004\000\002\004\004\000\002\004\004\000\002\004" +
    "\005\000\002\004\003\000\002\004\003\000\002\004\006" +
    "\000\002\004\006\000\002\004\012\000\002\004\016\000" +
    "\002\004\005\000\002\004\006\000\002\004\007\000\002" +
    "\004\005\000\002\004\005\000\002\004\005\000\002\004" +
    "\005\000\002\010\003\000\002\010\003\000\002\010\003" +
    "\000\002\010\003\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\006\005\000\002\006" +
    "\005\000\002\006\005\000\002\006\005\000\002\006\005" +
    "\000\002\006\005\000\002\006\006\000\002\006\006\000" +
    "\002\006\004\000\002\006\003\000\002\006\003\000\002" +
    "\006\005\000\002\006\005\000\002\007\003\000\002\007" +
    "\003\000\002\005\004\000\002\005\004\000\002\005\005" +
    "\000\002\005\005\000\002\005\005\000\002\005\005\000" +
    "\002\005\005\000\002\005\003\000\002\005\003\000\002" +
    "\005\006\000\002\005\005\000\002\005\005\000\002\005" +
    "\005\000\002\005\006\000\002\005\006\000\002\005\006" +
    "\000\002\015\003\000\002\015\003\000\002\015\003\000" +
    "\002\015\004\000\002\015\004\000\002\015\004\000\002" +
    "\016\003\000\002\016\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\227\000\036\005\015\006\023\007\024\010\005\011" +
    "\027\012\006\014\012\021\031\022\004\034\017\045\025" +
    "\050\020\051\010\052\013\001\002\000\020\012\006\021" +
    "\031\022\004\034\032\045\025\050\020\051\033\001\002" +
    "\000\004\034\226\001\002\000\004\034\223\001\002\000" +
    "\014\002\uffff\004\uffff\015\uffff\040\uffff\044\uffff\001\002" +
    "\000\062\002\uffc3\004\uffc3\015\uffc3\016\221\017\222\020" +
    "\uffc3\021\uffc3\022\uffc3\023\uffc3\024\uffc3\025\uffc3\026\uffc3" +
    "\027\uffc3\030\uffc3\031\uffc3\032\uffc3\033\uffc3\036\070\040" +
    "\uffc3\041\uffc3\042\uffc3\044\uffc3\046\uffc3\050\uffc3\001\002" +
    "\000\054\002\ufff1\004\ufff1\015\ufff1\020\211\021\042\022" +
    "\035\023\037\024\045\025\051\026\151\027\155\030\150" +
    "\031\153\032\154\033\152\040\ufff1\041\uffcb\042\uffcb\044" +
    "\ufff1\046\047\050\207\001\002\000\026\005\015\006\023" +
    "\012\006\014\012\021\031\022\004\034\017\045\025\050" +
    "\020\051\033\001\002\000\004\016\204\001\002\000\006" +
    "\041\174\042\175\001\002\000\050\002\uffd0\004\uffd0\015" +
    "\uffd0\020\uffd0\021\uffd0\023\uffd0\024\uffd0\026\uffd0\027\uffd0" +
    "\030\uffd0\031\uffd0\032\uffd0\033\uffd0\035\uffd0\040\uffd0\041" +
    "\uffd0\042\uffd0\044\uffd0\046\uffd0\001\002\000\004\002\173" +
    "\001\002\000\026\005\015\006\023\012\006\014\012\021" +
    "\031\022\004\034\017\045\025\050\020\051\033\001\002" +
    "\000\062\002\uffc2\004\uffc2\013\uffc2\015\uffc2\020\uffc2\021" +
    "\uffc2\022\uffc2\023\uffc2\024\uffc2\025\uffc2\026\uffc2\027\uffc2" +
    "\030\uffc2\031\uffc2\032\uffc2\033\uffc2\035\uffc2\037\uffc2\040" +
    "\uffc2\041\uffc2\042\uffc2\044\uffc2\046\166\050\uffc2\001\002" +
    "\000\012\002\uffb3\004\110\015\111\040\107\001\002\000" +
    "\026\005\015\006\023\012\006\014\012\021\031\022\004" +
    "\034\017\045\025\050\020\051\145\001\002\000\050\002" +
    "\uffcf\004\uffcf\015\uffcf\020\uffcf\021\uffcf\023\uffcf\024\uffcf" +
    "\026\uffcf\027\uffcf\030\uffcf\031\uffcf\032\uffcf\033\uffcf\035" +
    "\uffcf\040\uffcf\041\uffcf\042\uffcf\044\uffcf\046\uffcf\001\002" +
    "\000\004\034\136\001\002\000\020\012\006\021\031\022" +
    "\004\034\032\045\025\050\020\051\033\001\002\000\046" +
    "\002\ufff0\004\ufff0\015\ufff0\020\052\021\057\023\056\024" +
    "\061\026\040\027\050\030\036\031\044\032\046\033\043" +
    "\040\ufff0\041\uffcc\042\uffcc\044\ufff0\046\047\001\002\000" +
    "\004\034\102\001\002\000\044\012\006\020\052\021\066" +
    "\022\004\023\056\024\061\026\040\027\050\030\036\031" +
    "\044\032\046\033\043\034\032\045\025\046\047\050\020" +
    "\051\075\001\002\000\020\012\006\021\031\022\004\034" +
    "\032\045\025\050\020\051\033\001\002\000\020\012\006" +
    "\021\031\022\004\034\032\045\025\050\020\051\033\001" +
    "\002\000\064\002\uffc3\004\uffc3\013\uffc3\015\uffc3\020\uffc3" +
    "\021\uffc3\022\uffc3\023\uffc3\024\uffc3\025\uffc3\026\uffc3\027" +
    "\uffc3\030\uffc3\031\uffc3\032\uffc3\033\uffc3\035\uffc3\036\070" +
    "\037\uffc3\040\uffc3\041\uffc3\042\uffc3\044\uffc3\046\uffc3\050" +
    "\uffc3\001\002\000\062\002\uffca\004\uffca\013\uffca\015\uffca" +
    "\020\uffca\021\uffca\022\uffca\023\037\024\045\025\051\026" +
    "\uffca\027\uffca\030\uffca\031\uffca\032\uffca\033\uffca\035\uffca" +
    "\037\uffca\040\uffca\041\uffca\042\uffca\044\uffca\046\047\050" +
    "\uffca\001\002\000\044\012\006\020\052\021\066\022\004" +
    "\023\056\024\061\026\040\027\050\030\036\031\044\032" +
    "\046\033\043\034\032\045\025\046\047\050\020\051\033" +
    "\001\002\000\044\012\uffdf\020\uffdf\021\uffdf\022\uffdf\023" +
    "\uffdf\024\uffdf\026\uffdf\027\uffdf\030\uffdf\031\uffdf\032\uffdf" +
    "\033\uffdf\034\uffdf\045\uffdf\046\uffdf\050\uffdf\051\uffdf\001" +
    "\002\000\046\012\006\015\uffe3\020\uffe3\021\uffe3\022\004" +
    "\023\uffe3\024\uffe3\026\uffe3\027\uffe3\030\uffe3\031\uffe3\032" +
    "\uffe3\033\uffe3\034\032\045\025\046\uffe3\050\020\051\033" +
    "\001\002\000\044\012\uffe1\020\uffe1\021\uffe1\022\uffe1\023" +
    "\uffe1\024\uffe1\026\uffe1\027\uffe1\030\uffe1\031\uffe1\032\uffe1" +
    "\033\uffe1\034\uffe1\045\uffe1\046\uffe1\050\uffe1\051\uffe1\001" +
    "\002\000\030\020\052\021\057\023\056\024\061\026\040" +
    "\027\050\030\036\031\044\032\046\033\043\046\047\001" +
    "\002\000\046\012\006\015\uffe4\020\uffe4\021\uffe4\022\004" +
    "\023\uffe4\024\uffe4\026\uffe4\027\uffe4\030\uffe4\031\uffe4\032" +
    "\uffe4\033\uffe4\034\032\045\025\046\uffe4\050\020\051\033" +
    "\001\002\000\044\012\uffdc\020\uffdc\021\uffdc\022\uffdc\023" +
    "\uffdc\024\uffdc\026\uffdc\027\uffdc\030\uffdc\031\uffdc\032\uffdc" +
    "\033\uffdc\034\uffdc\045\uffdc\046\uffdc\050\uffdc\051\uffdc\001" +
    "\002\000\044\012\uffdd\020\uffdd\021\uffdd\022\uffdd\023\uffdd" +
    "\024\uffdd\026\uffdd\027\uffdd\030\uffdd\031\uffdd\032\uffdd\033" +
    "\uffdd\034\uffdd\045\uffdd\046\uffdd\050\uffdd\051\uffdd\001\002" +
    "\000\046\012\006\015\uffe2\020\uffe2\021\uffe2\022\004\023" +
    "\uffe2\024\uffe2\026\uffe2\027\uffe2\030\uffe2\031\uffe2\032\uffe2" +
    "\033\uffe2\034\032\045\025\046\uffe2\050\020\051\033\001" +
    "\002\000\044\012\uffde\020\uffde\021\uffde\022\uffde\023\uffde" +
    "\024\uffde\026\uffde\027\uffde\030\uffde\031\uffde\032\uffde\033" +
    "\uffde\034\uffde\045\uffde\046\uffde\050\uffde\051\uffde\001\002" +
    "\000\046\012\uffda\015\uffda\020\uffda\021\uffda\022\uffda\023" +
    "\uffda\024\uffda\026\uffda\027\uffda\030\uffda\031\uffda\032\uffda" +
    "\033\uffda\034\uffda\045\uffda\046\uffda\050\uffda\051\uffda\001" +
    "\002\000\044\012\uffe0\020\uffe0\021\uffe0\022\uffe0\023\uffe0" +
    "\024\uffe0\026\uffe0\027\uffe0\030\uffe0\031\uffe0\032\uffe0\033" +
    "\uffe0\034\uffe0\045\uffe0\046\uffe0\050\uffe0\051\uffe0\001\002" +
    "\000\020\012\006\021\031\022\004\034\032\045\025\050" +
    "\020\051\033\001\002\000\044\012\uffdb\020\uffdb\021\uffdb" +
    "\022\uffdb\023\uffdb\024\uffdb\026\uffdb\027\uffdb\030\uffdb\031" +
    "\uffdb\032\uffdb\033\uffdb\034\uffdb\045\uffdb\046\uffdb\050\uffdb" +
    "\051\uffdb\001\002\000\062\002\uffc4\004\uffc4\013\uffc4\015" +
    "\uffc4\020\uffc4\021\uffc4\022\uffc4\023\uffc4\024\uffc4\025\uffc4" +
    "\026\uffc4\027\uffc4\030\uffc4\031\uffc4\032\uffc4\033\uffc4\035" +
    "\uffc4\037\uffc4\040\uffc4\041\uffc4\042\uffc4\044\uffc4\046\047" +
    "\050\uffc4\001\002\000\062\002\uffc5\004\uffc5\013\uffc5\015" +
    "\uffc5\020\uffc5\021\uffc5\022\uffc5\023\uffc5\024\uffc5\025\uffc5" +
    "\026\uffc5\027\uffc5\030\uffc5\031\uffc5\032\uffc5\033\uffc5\035" +
    "\uffc5\037\uffc5\040\uffc5\041\uffc5\042\uffc5\044\uffc5\046\047" +
    "\050\uffc5\001\002\000\062\002\uffc8\004\uffc8\013\uffc8\015" +
    "\uffc8\020\uffc8\021\uffc8\022\uffc8\023\037\024\045\025\051" +
    "\026\uffc8\027\uffc8\030\uffc8\031\uffc8\032\uffc8\033\uffc8\035" +
    "\uffc8\037\uffc8\040\uffc8\041\uffc8\042\uffc8\044\uffc8\046\047" +
    "\050\uffc8\001\002\000\020\012\uffe3\021\uffe3\022\uffe3\034" +
    "\uffe3\045\uffe3\050\uffe3\051\uffe3\001\002\000\020\012\uffe4" +
    "\021\uffe4\022\uffe4\034\uffe4\045\uffe4\050\uffe4\051\uffe4\001" +
    "\002\000\020\012\006\021\031\022\004\034\032\045\025" +
    "\050\020\051\033\001\002\000\020\012\uffe2\021\uffe2\022" +
    "\uffe2\034\uffe2\045\uffe2\050\uffe2\051\uffe2\001\002\000\062" +
    "\002\uffbc\004\uffbc\013\uffbc\015\uffbc\020\052\021\042\022" +
    "\035\023\037\024\045\025\051\026\040\027\050\030\036" +
    "\031\044\032\046\033\043\035\uffbc\037\uffbc\040\uffbc\041" +
    "\uffbc\042\uffbc\044\uffbc\046\047\050\uffbc\001\002\000\062" +
    "\002\uffc6\004\uffc6\013\uffc6\015\uffc6\020\uffc6\021\uffc6\022" +
    "\uffc6\023\uffc6\024\uffc6\025\uffc6\026\uffc6\027\uffc6\030\uffc6" +
    "\031\uffc6\032\uffc6\033\uffc6\035\uffc6\037\uffc6\040\uffc6\041" +
    "\uffc6\042\uffc6\044\uffc6\046\047\050\uffc6\001\002\000\062" +
    "\002\uffc7\004\uffc7\013\uffc7\015\uffc7\020\uffc7\021\uffc7\022" +
    "\uffc7\023\037\024\045\025\051\026\uffc7\027\uffc7\030\uffc7" +
    "\031\uffc7\032\uffc7\033\uffc7\035\uffc7\037\uffc7\040\uffc7\041" +
    "\uffc7\042\uffc7\044\uffc7\046\047\050\uffc7\001\002\000\020" +
    "\012\006\021\031\022\004\034\032\045\025\050\020\051" +
    "\033\001\002\000\020\012\uffe4\021\uffe4\022\uffe4\034\032" +
    "\045\uffe4\050\uffe4\051\uffe4\001\002\000\062\002\uffbb\004" +
    "\uffbb\013\uffbb\015\uffbb\020\uffbb\021\uffbb\022\uffbb\023\037" +
    "\024\045\025\051\026\uffbb\027\uffbb\030\uffbb\031\uffbb\032" +
    "\uffbb\033\uffbb\035\uffbb\037\uffbb\040\uffbb\041\uffbb\042\uffbb" +
    "\044\uffbb\046\047\050\uffbb\001\002\000\020\012\006\021" +
    "\031\022\004\034\032\045\025\050\020\051\033\001\002" +
    "\000\036\020\052\021\042\022\035\023\037\024\045\025" +
    "\051\026\040\027\050\030\036\031\044\032\046\033\043" +
    "\037\072\046\047\001\002\000\062\002\uffbd\004\uffbd\013" +
    "\uffbd\015\uffbd\020\uffbd\021\uffbd\022\uffbd\023\uffbd\024\uffbd" +
    "\025\uffbd\026\uffbd\027\uffbd\030\uffbd\031\uffbd\032\uffbd\033" +
    "\uffbd\035\uffbd\037\uffbd\040\uffbd\041\uffbd\042\uffbd\044\uffbd" +
    "\046\uffbd\050\uffbd\001\002\000\036\020\052\021\042\022" +
    "\035\023\037\024\045\025\051\026\040\027\050\030\036" +
    "\031\044\032\046\033\043\035\074\046\047\001\002\000" +
    "\062\002\uffc0\004\uffc0\013\uffc0\015\uffc0\020\uffc0\021\uffc0" +
    "\022\uffc0\023\uffc0\024\uffc0\025\uffc0\026\uffc0\027\uffc0\030" +
    "\uffc0\031\uffc0\032\uffc0\033\uffc0\035\uffc0\037\uffc0\040\uffc0" +
    "\041\uffc0\042\uffc0\044\uffc0\046\uffc0\050\uffc0\001\002\000" +
    "\052\002\uffc3\004\uffc3\015\uffc3\017\101\020\uffc3\021\uffc3" +
    "\022\uffc3\023\uffc3\024\uffc3\025\uffc3\026\uffc3\027\uffc3\030" +
    "\uffc3\031\uffc3\032\uffc3\033\uffc3\036\070\040\uffc3\044\uffc3" +
    "\046\uffc3\001\002\000\046\002\ufff3\004\ufff3\015\ufff3\020" +
    "\052\021\042\022\035\023\037\024\045\025\051\026\040" +
    "\027\050\030\036\031\044\032\046\033\043\040\ufff3\044" +
    "\ufff3\046\047\001\002\000\020\012\006\021\031\022\004" +
    "\034\032\045\025\050\020\051\033\001\002\000\046\002" +
    "\uffe6\004\uffe6\015\uffe6\020\052\021\042\022\035\023\037" +
    "\024\045\025\051\026\040\027\050\030\036\031\044\032" +
    "\046\033\043\040\uffe6\044\uffe6\046\047\001\002\000\044" +
    "\012\ufffd\020\ufffd\021\ufffd\022\ufffd\023\ufffd\024\ufffd\026" +
    "\ufffd\027\ufffd\030\ufffd\031\ufffd\032\ufffd\033\ufffd\034\ufffd" +
    "\045\ufffd\046\ufffd\050\ufffd\051\ufffd\001\002\000\004\051" +
    "\103\001\002\000\004\047\104\001\002\000\020\012\006" +
    "\021\031\022\004\034\032\045\025\050\020\051\033\001" +
    "\002\000\036\020\052\021\042\022\035\023\037\024\045" +
    "\025\051\026\040\027\050\030\036\031\044\032\046\033" +
    "\043\035\106\046\047\001\002\000\046\004\110\005\uffb3" +
    "\006\uffb3\007\uffb3\010\uffb3\011\uffb3\012\uffb3\014\uffb3\015" +
    "\111\021\uffb3\022\uffb3\034\uffb3\040\107\043\uffb3\045\uffb3" +
    "\050\uffb3\051\uffb3\052\uffb3\001\002\000\052\002\uffb9\004" +
    "\uffb9\005\uffb9\006\uffb9\007\uffb9\010\uffb9\011\uffb9\012\uffb9" +
    "\014\uffb9\015\uffb9\021\uffb9\022\uffb9\034\uffb9\040\uffb9\043" +
    "\uffb9\044\uffb9\045\uffb9\050\uffb9\051\uffb9\052\uffb9\001\002" +
    "\000\052\002\uffb8\004\uffb8\005\uffb8\006\uffb8\007\uffb8\010" +
    "\uffb8\011\uffb8\012\uffb8\014\uffb8\015\uffb8\021\uffb8\022\uffb8" +
    "\034\uffb8\040\uffb8\043\uffb8\044\uffb8\045\uffb8\050\uffb8\051" +
    "\uffb8\052\uffb8\001\002\000\052\002\uffba\004\uffba\005\uffba" +
    "\006\uffba\007\uffba\010\uffba\011\uffba\012\uffba\014\uffba\015" +
    "\uffba\021\uffba\022\uffba\034\uffba\040\uffba\043\uffba\044\uffba" +
    "\045\uffba\050\uffba\051\uffba\052\uffba\001\002\000\040\005" +
    "\015\006\023\007\024\010\005\011\027\012\006\014\012" +
    "\021\031\022\004\034\017\043\120\045\025\050\020\051" +
    "\010\052\013\001\002\000\046\004\116\005\uffb4\006\uffb4" +
    "\007\uffb4\010\uffb4\011\uffb4\012\uffb4\014\uffb4\015\115\021" +
    "\uffb4\022\uffb4\034\uffb4\040\114\043\uffb4\045\uffb4\050\uffb4" +
    "\051\uffb4\052\uffb4\001\002\000\052\002\uffb6\004\uffb6\005" +
    "\uffb6\006\uffb6\007\uffb6\010\uffb6\011\uffb6\012\uffb6\014\uffb6" +
    "\015\uffb6\021\uffb6\022\uffb6\034\uffb6\040\uffb6\043\uffb6\044" +
    "\uffb6\045\uffb6\050\uffb6\051\uffb6\052\uffb6\001\002\000\052" +
    "\002\uffb7\004\uffb7\005\uffb7\006\uffb7\007\uffb7\010\uffb7\011" +
    "\uffb7\012\uffb7\014\uffb7\015\uffb7\021\uffb7\022\uffb7\034\uffb7" +
    "\040\uffb7\043\uffb7\044\uffb7\045\uffb7\050\uffb7\051\uffb7\052" +
    "\uffb7\001\002\000\052\002\uffb5\004\uffb5\005\uffb5\006\uffb5" +
    "\007\uffb5\010\uffb5\011\uffb5\012\uffb5\014\uffb5\015\uffb5\021" +
    "\uffb5\022\uffb5\034\uffb5\040\uffb5\043\uffb5\044\uffb5\045\uffb5" +
    "\050\uffb5\051\uffb5\052\uffb5\001\002\000\014\002\uffed\004" +
    "\uffed\015\uffed\040\uffed\044\uffed\001\002\000\044\004\110" +
    "\005\uffb3\006\uffb3\007\uffb3\010\uffb3\011\uffb3\012\uffb3\014" +
    "\uffb3\015\111\021\uffb3\022\uffb3\034\uffb3\040\107\045\uffb3" +
    "\050\uffb3\051\uffb3\052\uffb3\001\002\000\036\005\015\006" +
    "\023\007\024\010\005\011\027\012\006\014\012\021\031" +
    "\022\004\034\017\045\025\050\020\051\010\052\013\001" +
    "\002\000\012\004\110\015\111\040\107\044\uffb3\001\002" +
    "\000\004\044\126\001\002\000\050\002\uffb4\004\116\005" +
    "\015\006\023\007\024\010\005\011\027\012\006\014\012" +
    "\015\115\021\031\022\004\034\017\040\114\044\uffb4\045" +
    "\025\050\020\051\010\052\013\001\002\000\014\002\ufffe" +
    "\004\ufffe\015\ufffe\040\ufffe\044\ufffe\001\002\000\014\002" +
    "\uffec\004\uffec\015\uffec\040\uffec\044\uffec\001\002\000\020" +
    "\012\006\021\031\022\004\034\032\045\025\050\020\051" +
    "\033\001\002\000\054\002\uffcd\004\uffcd\015\uffcd\020\052" +
    "\021\042\022\035\023\037\024\045\025\051\026\040\027" +
    "\050\030\036\031\044\032\046\033\043\035\uffcd\040\uffcd" +
    "\041\uffcd\042\uffcd\044\uffcd\046\047\001\002\000\006\013" +
    "\133\035\134\001\002\000\040\013\ufff7\020\052\021\042" +
    "\022\035\023\037\024\045\025\051\026\040\027\050\030" +
    "\036\031\044\032\046\033\043\035\ufff7\046\047\001\002" +
    "\000\020\012\006\021\031\022\004\034\032\045\025\050" +
    "\020\051\033\001\002\000\062\002\uffbf\004\uffbf\013\uffbf" +
    "\015\uffbf\020\uffbf\021\uffbf\022\uffbf\023\uffbf\024\uffbf\025" +
    "\uffbf\026\uffbf\027\uffbf\030\uffbf\031\uffbf\032\uffbf\033\uffbf" +
    "\035\uffbf\037\uffbf\040\uffbf\041\uffbf\042\uffbf\044\uffbf\046" +
    "\uffbf\050\uffbf\001\002\000\040\013\ufff6\020\052\021\042" +
    "\022\035\023\037\024\045\025\051\026\040\027\050\030" +
    "\036\031\044\032\046\033\043\035\ufff6\046\047\001\002" +
    "\000\022\012\006\021\031\022\004\034\032\035\137\045" +
    "\025\050\020\051\033\001\002\000\014\002\uffe5\004\uffe5" +
    "\015\uffe5\040\uffe5\044\uffe5\001\002\000\006\013\133\035" +
    "\144\001\002\000\052\002\uffe8\004\uffe8\013\ufff7\015\uffe8" +
    "\020\052\021\042\022\035\023\037\024\045\025\051\026" +
    "\040\027\050\030\036\031\044\032\046\033\043\035\ufff7" +
    "\040\uffe8\044\uffe8\046\047\001\002\000\004\035\143\001" +
    "\002\000\014\002\uffe9\004\uffe9\015\uffe9\040\uffe9\044\uffe9" +
    "\001\002\000\014\002\uffef\004\uffef\015\uffef\040\uffef\044" +
    "\uffef\001\002\000\056\002\uffc3\004\uffc3\015\uffc3\016\164" +
    "\020\uffc3\021\uffc3\022\uffc3\023\uffc3\024\uffc3\025\uffc3\026" +
    "\uffc3\027\uffc3\030\uffc3\031\uffc3\032\uffc3\033\uffc3\036\070" +
    "\040\uffc3\041\uffc3\042\uffc3\044\uffc3\046\uffc3\001\002\000" +
    "\046\002\ufff4\004\ufff4\015\ufff4\020\052\021\057\023\056" +
    "\024\061\026\040\027\050\030\036\031\044\032\046\033" +
    "\043\040\ufff4\041\uffcc\042\uffcc\044\ufff4\046\047\001\002" +
    "\000\052\002\ufff5\004\ufff5\015\ufff5\020\052\021\042\022" +
    "\035\023\037\024\045\025\051\026\151\027\155\030\150" +
    "\031\153\032\154\033\152\040\ufff5\041\uffcb\042\uffcb\044" +
    "\ufff5\046\047\001\002\000\046\012\006\015\uffdf\020\uffdf" +
    "\021\031\022\004\023\uffdf\024\uffdf\026\uffdf\027\uffdf\030" +
    "\uffdf\031\uffdf\032\uffdf\033\uffdf\034\032\045\025\046\uffdf" +
    "\050\020\051\033\001\002\000\046\012\006\015\uffe1\020" +
    "\uffe1\021\031\022\004\023\uffe1\024\uffe1\026\uffe1\027\uffe1" +
    "\030\uffe1\031\uffe1\032\uffe1\033\uffe1\034\032\045\025\046" +
    "\uffe1\050\020\051\033\001\002\000\046\012\006\015\uffdc" +
    "\020\uffdc\021\031\022\004\023\uffdc\024\uffdc\026\uffdc\027" +
    "\uffdc\030\uffdc\031\uffdc\032\uffdc\033\uffdc\034\032\045\025" +
    "\046\uffdc\050\020\051\033\001\002\000\046\012\006\015" +
    "\uffdd\020\uffdd\021\031\022\004\023\uffdd\024\uffdd\026\uffdd" +
    "\027\uffdd\030\uffdd\031\uffdd\032\uffdd\033\uffdd\034\032\045" +
    "\025\046\uffdd\050\020\051\033\001\002\000\046\012\006" +
    "\015\uffde\020\uffde\021\031\022\004\023\uffde\024\uffde\026" +
    "\uffde\027\uffde\030\uffde\031\uffde\032\uffde\033\uffde\034\032" +
    "\045\025\046\uffde\050\020\051\033\001\002\000\046\012" +
    "\006\015\uffe0\020\uffe0\021\031\022\004\023\uffe0\024\uffe0" +
    "\026\uffe0\027\uffe0\030\uffe0\031\uffe0\032\uffe0\033\uffe0\034" +
    "\032\045\025\046\uffe0\050\020\051\033\001\002\000\054" +
    "\002\uffd8\004\uffd8\015\uffd8\020\052\021\042\022\035\023" +
    "\037\024\045\025\051\026\uffd8\027\uffd8\030\uffd8\031\uffd8" +
    "\032\uffd8\033\uffd8\035\uffd8\040\uffd8\041\uffd8\042\uffd8\044" +
    "\uffd8\046\047\001\002\000\054\002\uffd6\004\uffd6\015\uffd6" +
    "\020\052\021\042\022\035\023\037\024\045\025\051\026" +
    "\uffd6\027\uffd6\030\uffd6\031\uffd6\032\uffd6\033\uffd6\035\uffd6" +
    "\040\uffd6\041\uffd6\042\uffd6\044\uffd6\046\047\001\002\000" +
    "\054\002\uffd5\004\uffd5\015\uffd5\020\052\021\042\022\035" +
    "\023\037\024\045\025\051\026\uffd5\027\uffd5\030\uffd5\031" +
    "\uffd5\032\uffd5\033\uffd5\035\uffd5\040\uffd5\041\uffd5\042\uffd5" +
    "\044\uffd5\046\047\001\002\000\054\002\uffd4\004\uffd4\015" +
    "\uffd4\020\052\021\042\022\035\023\037\024\045\025\051" +
    "\026\uffd4\027\uffd4\030\uffd4\031\uffd4\032\uffd4\033\uffd4\035" +
    "\uffd4\040\uffd4\041\uffd4\042\uffd4\044\uffd4\046\047\001\002" +
    "\000\054\002\uffd9\004\uffd9\015\uffd9\020\052\021\042\022" +
    "\035\023\037\024\045\025\051\026\uffd9\027\uffd9\030\uffd9" +
    "\031\uffd9\032\uffd9\033\uffd9\035\uffd9\040\uffd9\041\uffd9\042" +
    "\uffd9\044\uffd9\046\047\001\002\000\054\002\uffd7\004\uffd7" +
    "\015\uffd7\020\052\021\042\022\035\023\037\024\045\025" +
    "\051\026\uffd7\027\uffd7\030\uffd7\031\uffd7\032\uffd7\033\uffd7" +
    "\035\uffd7\040\uffd7\041\uffd7\042\uffd7\044\uffd7\046\047\001" +
    "\002\000\026\005\ufff9\006\ufff9\012\ufff9\014\ufff9\021\ufff9" +
    "\022\ufff9\034\ufff9\045\ufff9\050\ufff9\051\ufff9\001\002\000" +
    "\004\002\000\001\002\000\004\050\167\001\002\000\062" +
    "\002\uffbe\004\uffbe\013\uffbe\015\uffbe\020\uffbe\021\uffbe\022" +
    "\uffbe\023\uffbe\024\uffbe\025\uffbe\026\uffbe\027\uffbe\030\uffbe" +
    "\031\uffbe\032\uffbe\033\uffbe\035\uffbe\037\uffbe\040\uffbe\041" +
    "\uffbe\042\uffbe\044\uffbe\046\uffbe\050\uffbe\001\002\000\036" +
    "\020\052\021\057\023\056\024\061\026\040\027\050\030" +
    "\036\031\044\032\046\033\043\035\172\041\uffcc\042\uffcc" +
    "\046\047\001\002\000\042\020\052\021\042\022\035\023" +
    "\037\024\045\025\051\026\151\027\155\030\150\031\153" +
    "\032\154\033\152\035\074\041\uffcb\042\uffcb\046\047\001" +
    "\002\000\050\002\uffce\004\uffce\015\uffce\020\uffce\021\uffce" +
    "\023\uffce\024\uffce\026\uffce\027\uffce\030\uffce\031\uffce\032" +
    "\uffce\033\uffce\035\uffce\040\uffce\041\uffce\042\uffce\044\uffce" +
    "\046\uffce\001\002\000\004\002\001\001\002\000\004\041" +
    "\202\001\002\000\004\042\176\001\002\000\026\005\015" +
    "\006\023\012\006\014\012\021\031\022\004\034\017\045" +
    "\025\050\020\051\033\001\002\000\050\002\uffcc\004\uffcc" +
    "\015\uffcc\020\052\021\057\023\056\024\061\026\040\027" +
    "\050\030\036\031\044\032\046\033\043\035\uffcc\040\uffcc" +
    "\041\uffcc\042\uffcc\044\uffcc\046\047\001\002\000\050\002" +
    "\uffd2\004\uffd2\015\uffd2\020\uffd2\021\uffd2\023\uffd2\024\uffd2" +
    "\026\uffd2\027\uffd2\030\uffd2\031\uffd2\032\uffd2\033\uffd2\035" +
    "\uffd2\040\uffd2\041\uffd2\042\uffd2\044\uffd2\046\uffd2\001\002" +
    "\000\054\002\uffcb\004\uffcb\015\uffcb\020\052\021\042\022" +
    "\035\023\037\024\045\025\051\026\151\027\155\030\150" +
    "\031\153\032\154\033\152\035\uffcb\040\uffcb\041\uffcb\042" +
    "\uffcb\044\uffcb\046\047\001\002\000\026\005\015\006\023" +
    "\012\006\014\012\021\031\022\004\034\017\045\025\050" +
    "\020\051\033\001\002\000\050\002\uffd3\004\uffd3\015\uffd3" +
    "\020\uffd3\021\uffd3\023\uffd3\024\uffd3\026\uffd3\027\uffd3\030" +
    "\uffd3\031\uffd3\032\uffd3\033\uffd3\035\uffd3\040\uffd3\041\uffd3" +
    "\042\uffd3\044\uffd3\046\uffd3\001\002\000\020\012\006\021" +
    "\031\022\004\034\032\045\025\050\020\051\033\001\002" +
    "\000\046\002\uffe7\004\uffe7\015\uffe7\020\052\021\042\022" +
    "\035\023\037\024\045\025\051\026\040\027\050\030\036" +
    "\031\044\032\046\033\043\040\uffe7\044\uffe7\046\047\001" +
    "\002\000\050\002\uffd1\004\uffd1\015\uffd1\020\uffd1\021\uffd1" +
    "\023\uffd1\024\uffd1\026\uffd1\027\uffd1\030\uffd1\031\uffd1\032" +
    "\uffd1\033\uffd1\035\uffd1\040\uffd1\041\174\042\175\044\uffd1" +
    "\046\uffd1\001\002\000\030\020\052\021\057\023\056\024" +
    "\061\026\040\027\050\030\036\031\044\032\046\033\043" +
    "\046\047\001\002\000\032\015\216\020\052\021\057\023" +
    "\056\024\061\026\040\027\050\030\036\031\044\032\046" +
    "\033\043\046\047\001\002\000\034\015\uffdb\020\uffdb\021" +
    "\uffdb\023\uffdb\024\uffdb\026\uffdb\027\uffdb\030\uffdb\031\uffdb" +
    "\032\uffdb\033\uffdb\046\uffdb\051\212\001\002\000\016\002" +
    "\ufffa\004\ufffa\015\ufffa\020\214\040\ufffa\044\ufffa\001\002" +
    "\000\014\002\ufff2\004\ufff2\015\ufff2\040\ufff2\044\ufff2\001" +
    "\002\000\004\051\212\001\002\000\014\002\ufffb\004\ufffb" +
    "\015\ufffb\040\ufffb\044\ufffb\001\002\000\014\002\uffeb\004" +
    "\uffeb\015\uffeb\040\uffeb\044\uffeb\001\002\000\020\012\006" +
    "\021\031\022\004\034\032\045\025\050\020\051\033\001" +
    "\002\000\046\002\uffea\004\uffea\015\uffea\020\052\021\042" +
    "\022\035\023\037\024\045\025\051\026\040\027\050\030" +
    "\036\031\044\032\046\033\043\040\uffea\044\uffea\046\047" +
    "\001\002\000\026\005\ufff8\006\ufff8\012\ufff8\014\ufff8\021" +
    "\ufff8\022\ufff8\034\ufff8\045\ufff8\050\ufff8\051\ufff8\001\002" +
    "\000\044\012\ufffc\020\ufffc\021\ufffc\022\ufffc\023\ufffc\024" +
    "\ufffc\026\ufffc\027\ufffc\030\ufffc\031\ufffc\032\ufffc\033\ufffc" +
    "\034\ufffc\045\ufffc\046\ufffc\050\ufffc\051\ufffc\001\002\000" +
    "\026\005\015\006\023\012\006\014\012\021\031\022\004" +
    "\034\017\045\025\050\020\051\033\001\002\000\036\020" +
    "\052\021\057\023\056\024\061\026\040\027\050\030\036" +
    "\031\044\032\046\033\043\035\225\041\uffcc\042\uffcc\046" +
    "\047\001\002\000\062\002\uffc1\004\uffc1\013\uffc1\015\uffc1" +
    "\020\uffc1\021\uffc1\022\uffc1\023\uffc1\024\uffc1\025\uffc1\026" +
    "\uffc1\027\uffc1\030\uffc1\031\uffc1\032\uffc1\033\uffc1\035\uffc1" +
    "\037\uffc1\040\uffc1\041\uffc1\042\uffc1\044\uffc1\046\uffc1\050" +
    "\uffc1\001\002\000\020\012\006\021\031\022\004\034\032" +
    "\045\025\050\020\051\033\001\002\000\006\013\133\035" +
    "\230\001\002\000\014\002\uffee\004\uffee\015\uffee\040\uffee" +
    "\044\uffee\001\002\000\062\002\uffc9\004\uffc9\013\uffc9\015" +
    "\uffc9\020\uffc9\021\uffc9\022\uffc9\023\037\024\045\025\051" +
    "\026\uffc9\027\uffc9\030\uffc9\031\uffc9\032\uffc9\033\uffc9\035" +
    "\uffc9\037\uffc9\040\uffc9\041\uffc9\042\uffc9\044\uffc9\046\047" +
    "\050\uffc9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\227\000\022\002\015\003\020\004\006\005\010\006" +
    "\025\007\013\011\027\013\021\001\001\000\004\005\230" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\207\001\001\000\010" +
    "\005\200\006\176\007\205\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\005\170\006\167\007\013\001\001\000\002\001\001\000" +
    "\006\015\123\016\164\001\001\000\010\005\146\006\145" +
    "\007\013\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\005\131\014\130\001\001\000\004\010\126\001\001" +
    "\000\002\001\001\000\006\005\075\010\076\001\001\000" +
    "\004\005\033\001\001\000\004\005\072\001\001\000\002" +
    "\001\001\000\004\010\040\001\001\000\006\005\063\010" +
    "\064\001\001\000\002\001\001\000\004\005\062\001\001" +
    "\000\002\001\001\000\004\010\057\001\001\000\004\005" +
    "\054\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\053\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\052\001\001\000\002\001\001" +
    "\000\004\010\040\001\001\000\004\010\040\001\001\000" +
    "\004\010\040\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\061\001\001\000\002\001\001\000\004\010" +
    "\040\001\001\000\004\010\040\001\001\000\004\010\040" +
    "\001\001\000\004\005\066\001\001\000\004\005\033\001" +
    "\001\000\004\010\040\001\001\000\004\005\070\001\001" +
    "\000\004\010\040\001\001\000\002\001\001\000\004\010" +
    "\040\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\010\040\001\001\000\004\005\077\001\001\000\004\010" +
    "\040\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\005\104\001\001\000\004\010\040\001" +
    "\001\000\006\015\112\016\111\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\004\116\005" +
    "\010\006\025\007\013\011\027\013\021\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\015\112\016\120\001\001" +
    "\000\020\003\121\004\006\005\010\006\025\007\013\011" +
    "\027\013\021\001\001\000\006\015\123\016\122\001\001" +
    "\000\002\001\001\000\016\004\124\005\010\006\025\007" +
    "\013\011\027\013\021\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\005\127\001\001\000\004\010\040\001" +
    "\001\000\002\001\001\000\004\010\040\001\001\000\004" +
    "\005\134\001\001\000\002\001\001\000\004\010\040\001" +
    "\001\000\006\005\140\014\137\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\040\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\126\001\001\000\004\010\040\001\001\000" +
    "\004\005\162\001\001\000\004\005\161\001\001\000\004" +
    "\005\160\001\001\000\004\005\157\001\001\000\004\005" +
    "\156\001\001\000\004\005\155\001\001\000\004\010\040" +
    "\001\001\000\004\010\040\001\001\000\004\010\040\001" +
    "\001\000\004\010\040\001\001\000\004\010\040\001\001" +
    "\000\004\010\040\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\010\126" +
    "\001\001\000\004\010\040\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\005\200\006\176\007\177\001\001\000\004\010\126\001" +
    "\001\000\002\001\001\000\004\010\040\001\001\000\010" +
    "\005\200\006\176\007\202\001\001\000\002\001\001\000" +
    "\004\005\204\001\001\000\004\010\040\001\001\000\002" +
    "\001\001\000\004\010\216\001\001\000\004\010\057\001" +
    "\001\000\004\012\212\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\214\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\217\001\001\000\004\010\040" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\005" +
    "\200\006\223\007\013\001\001\000\004\010\126\001\001" +
    "\000\002\001\001\000\006\005\131\014\226\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\040\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {



  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // finn ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("finn",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // finn ::= fin 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("finn",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // fin ::= fin COMENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fin",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // fin ::= fin EOL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fin",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // fin ::= fin PC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fin",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // fin ::= COMENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fin",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // fin ::= EOL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fin",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // fin ::= PC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fin",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expr ::= expr MENOS op expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int o2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int o2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String o2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExprErr("Error: inesperado '"+ o2 +"' in " + e.get() + 
									"-" + o2 + "\""); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expr ::= expr op op expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int o1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int o1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String o1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int o2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int o2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String o2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExprErr("Error: inesperado '"+ o2 +"' in " + e.get() + 
									o1 + o2 + "\""); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expr ::= IDENT AC expr CC 
            {
              Expr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new IDArr(i, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expr ::= NUM DP NUM 
            {
              Expr RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double n1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double n2 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<Double> r = new ArrayList<>();
			while(n1<=n2){
				r.add(n1);
				n1++;
			}
			RESULT = new Num(r);
			 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expr ::= AA lv CP 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Expr> l = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Arr(l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expr ::= AP expr CP 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expr ::= ASDOUBLE AP condition CP 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expr ::= NUM 
            {
              Expr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double i = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<Double> r = new ArrayList<>(); r.add(i); RESULT = new Num(r); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expr ::= IDENT 
            {
              Expr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ID(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expr ::= expr EXP expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExpExpr(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expr ::= expr DIV expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DivExpr(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expr ::= expr POR expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new MultExpr(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expr ::= expr MENOS expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new MinusExpr(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expr ::= expr MAS expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PlusExpr(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expr ::= MENOS expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new InvExpr(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expr ::= MAS expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ec ::= expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ec",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ec ::= condition 
            {
              Expr RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr c = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ec",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // condition ::= condition op expr 
            {
              Expr RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr c = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExprErr("Error: inesperado '"+o+"' in \""+c.get()+o+"\""); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // condition ::= AP condition CP 
            {
              Expr RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr c = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // condition ::= FALSE 
            {
              Expr RESULT =null;
		 RESULT = new Cond(false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // condition ::= TRUE 
            {
              Expr RESULT =null;
		 RESULT = new Cond(true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // condition ::= NOT ec 
            {
              Expr RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr c = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NotCond(c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // condition ::= ec OR OR ec 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OrCond(l,r); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // condition ::= ec AND AND ec 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AndCond(l,r); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // condition ::= expr MAYORIG expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new GteCond(l,r); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // condition ::= expr MAYOR expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new GtCond(l,r); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // condition ::= expr MENORIG expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LteCond(l,r); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // condition ::= expr MENOR expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LtCond(l,r); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // condition ::= expr NE expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NeqCond(l,r); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // condition ::= expr EQ expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new EqCond(l,r); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // op ::= DP 
            {
              String RESULT =null;
		 RESULT = " : "; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // op ::= ASIGD 
            {
              String RESULT =null;
		 RESULT = " -> "; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // op ::= MAYORIG 
            {
              String RESULT =null;
		 RESULT = " >= "; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // op ::= MAYOR 
            {
              String RESULT =null;
		 RESULT = " > "; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // op ::= MENORIG 
            {
              String RESULT =null;
		 RESULT = " <= "; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // op ::= MENOR 
            {
              String RESULT =null;
		 RESULT = " < "; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // op ::= NE 
            {
              String RESULT =null;
		 RESULT = " != "; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // op ::= EQ 
            {
              String RESULT =null;
		 RESULT = " == "; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // op ::= DIV 
            {
              String RESULT =null;
		 RESULT = " / "; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // op ::= POR 
            {
              String RESULT =null;
		 RESULT = " * "; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // op ::= MAS 
            {
              String RESULT =null;
		 RESULT = " + "; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // statement ::= PRINT AP CP 
            {
              Statement RESULT =null;
		 RESULT = new StmtErr("Error in print.default() :\n el argumento \"x\" está ausente, sin valor por omisión"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // statement ::= asigi op expr 
            {
              Statement RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<String> ls = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new StmtErr("Error: inesperado '" + o + "' in \" <-"
									 + o + e.get() + "\""); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // statement ::= IDENTE IGUAL expr 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new StmtErr("Error: unexpected input in \"" + i + "\""); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // statement ::= PRINT AP expr 
            {
              Statement RESULT =null;
		 RESULT = new StmtErr("Error: unexpected symbol in:"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // statement ::= PRINT AP expr PC CP 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new StmtErr("Error: inesperado ';' in \"print(" + e.get() +";\""); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // statement ::= expr NUM op expr 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new StmtErr("Error: unexpected numeric constant in \"" + e.get() +
									" " + n + "\""); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // statement ::= expr op PC 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new StmtErr("Error: inesperado ';' in \"" + e.get() + o + ";\""); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // statement ::= FOR AP IDENT IN expr CP finn AL finn stmt_lst finn CL 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		StmtLst s = (StmtLst)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new ForStmt(i, e, s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // statement ::= FOR AP IDENT IN expr CP finn statement 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ForStmt(i, e, s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // statement ::= PASTE AP lv CP 
            {
              Statement RESULT =null;
		int lvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Expr> lv = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new PasteStmt(lv); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // statement ::= PRINT AP lv CP 
            {
              Statement RESULT =null;
		int lvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Expr> lv = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new PrintStmt(lv); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // statement ::= condition 
            {
              Statement RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr c = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<Expr> lv = new ArrayList<>();
			   lv.add(c); RESULT = new PrintStmt(lv); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // statement ::= expr 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<Expr> lv = new ArrayList<>();
			   lv.add(e); RESULT = new PrintStmt(lv); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // statement ::= expr ASIGD asigd 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<String> ls = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
			  HashMap<String, Expr> hm = new HashMap<String, Expr>();
			  for(String s : ls){
			  	hm.put(s,e);
			  }
			  RESULT = new AssignStmt(hm); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // statement ::= asigi expr 
            {
              Statement RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<String> ls = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
			  HashMap<String, Expr> hm = new HashMap<String, Expr>();
			  for(String s : ls){
			  	hm.put(s,e);
			  }
			  RESULT = new AssignStmt(hm); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // statement ::= asig condition 
            {
              Statement RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<String> ls = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
			  HashMap<String, Expr> hm = new HashMap<String, Expr>();
			  for(String s : ls){
			  	hm.put(s,e);
			  }
			  RESULT = new AssignStmt(hm); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // statement ::= asig expr 
            {
              Statement RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<String> ls = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
			  HashMap<String, Expr> hm = new HashMap<String, Expr>();
			  for(String s : ls){
			  	hm.put(s,e);
			  }
			  RESULT = new AssignStmt(hm); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // lv ::= lv COMA expr 
            {
              ArrayList<Expr> RESULT =null;
		int lvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Expr> lv = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 lv.add(e); RESULT = lv; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lv",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // lv ::= expr 
            {
              ArrayList<Expr> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<Expr> lv = new ArrayList<Expr>();
					   lv.add(e); RESULT = lv; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lv",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // asig ::= IDENT IGUAL 
            {
              ArrayList<String> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				ArrayList<String> ls = new ArrayList<>();
				ls.add(i);
				RESULT = ls; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asig",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // asig ::= asig IDENT IGUAL 
            {
              ArrayList<String> RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<String> ls = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
			  ls.add(i);
			  RESULT = ls; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asig",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // asigd ::= IDENT 
            {
              ArrayList<String> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
				ArrayList<String> ls = new ArrayList<>();
				ls.add(i);
				RESULT = ls; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asigd",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // asigd ::= IDENT ASIGD asigd 
            {
              ArrayList<String> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<String> ls = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ls.add(i);
			  RESULT = ls; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asigd",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // asigi ::= IDENT ASIGI 
            {
              ArrayList<String> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				ArrayList<String> ls = new ArrayList<>();
				ls.add(i);
				RESULT = ls; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asigi",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // asigi ::= asigi IDENT ASIGI 
            {
              ArrayList<String> RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<String> ls = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
			  ls.add(i);
			  RESULT = ls; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asigi",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // stmt_lst ::= stmt_lst fin statement 
            {
              StmtLst RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		StmtLst sl = (StmtLst)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(s!=null)	sl.add(s);
			   RESULT = sl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_lst",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // stmt_lst ::= statement 
            {
              StmtLst RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(s!=null)	RESULT = new StmtLst(s);
				else	    RESULT = new StmtLst(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_lst",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= stmt_lst finn 
            {
              Program RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StmtLst ls = (StmtLst)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 Program p = new Program(ls);
			 p.exec();
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

