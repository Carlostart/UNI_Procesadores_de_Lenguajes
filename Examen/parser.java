
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Sep 04 15:21:09 CEST 2019
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.HashMap;
import java.util.AbstractMap.SimpleEntry;
import java.util.ArrayList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Sep 04 15:21:09 CEST 2019
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\114\000\002\002\004\000\002\002\006\000\002\003" +
    "\003\000\002\003\005\000\002\014\005\000\002\014\005" +
    "\000\002\004\006\000\002\004\006\000\002\004\003\000" +
    "\002\004\003\000\002\004\004\000\002\004\004\000\002" +
    "\004\013\000\002\004\005\000\002\004\006\000\002\004" +
    "\007\000\002\004\005\000\002\004\005\000\002\004\005" +
    "\000\002\004\005\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\006\005\000\002\006\005" +
    "\000\002\006\005\000\002\006\005\000\002\006\005\000" +
    "\002\006\005\000\002\006\006\000\002\006\006\000\002" +
    "\006\004\000\002\006\003\000\002\006\003\000\002\006" +
    "\005\000\002\006\005\000\002\007\003\000\002\007\003" +
    "\000\002\005\004\000\002\005\004\000\002\005\005\000" +
    "\002\005\005\000\002\005\005\000\002\005\005\000\002" +
    "\005\005\000\002\005\003\000\002\005\003\000\002\005" +
    "\006\000\002\005\005\000\002\005\005\000\002\005\005" +
    "\000\002\005\007\000\002\005\007\000\002\005\004\000" +
    "\002\005\004\000\002\005\004\000\002\005\006\000\002" +
    "\005\004\000\002\005\004\000\002\005\006\000\002\005" +
    "\006\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\015\004\000\002\015\004\000\002\015\004\000" +
    "\002\016\003\000\002\016\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\230\000\004\050\005\001\002\000\004\002\232\001" +
    "\002\000\054\004\007\005\uffb6\006\uffb6\007\uffb6\012\uffb6" +
    "\014\uffb6\015\010\021\uffb6\022\uffb6\034\uffb6\042\uffb6\051" +
    "\uffb6\052\uffb6\054\006\055\uffb6\056\uffb6\057\uffb6\060\uffb6" +
    "\064\uffb6\065\uffb6\066\uffb6\001\002\000\062\002\uffbc\004" +
    "\uffbc\005\uffbc\006\uffbc\007\uffbc\012\uffbc\014\uffbc\015\uffbc" +
    "\021\uffbc\022\uffbc\034\uffbc\042\uffbc\043\uffbc\044\uffbc\051" +
    "\uffbc\052\uffbc\054\uffbc\055\uffbc\056\uffbc\057\uffbc\060\uffbc" +
    "\064\uffbc\065\uffbc\066\uffbc\001\002\000\062\002\uffbb\004" +
    "\uffbb\005\uffbb\006\uffbb\007\uffbb\012\uffbb\014\uffbb\015\uffbb" +
    "\021\uffbb\022\uffbb\034\uffbb\042\uffbb\043\uffbb\044\uffbb\051" +
    "\uffbb\052\uffbb\054\uffbb\055\uffbb\056\uffbb\057\uffbb\060\uffbb" +
    "\064\uffbb\065\uffbb\066\uffbb\001\002\000\062\002\uffbd\004" +
    "\uffbd\005\uffbd\006\uffbd\007\uffbd\012\uffbd\014\uffbd\015\uffbd" +
    "\021\uffbd\022\uffbd\034\uffbd\042\uffbd\043\uffbd\044\uffbd\051" +
    "\uffbd\052\uffbd\054\uffbd\055\uffbd\056\uffbd\057\uffbd\060\uffbd" +
    "\064\uffbd\065\uffbd\066\uffbd\001\002\000\046\005\027\006" +
    "\040\007\041\012\020\014\024\021\045\022\017\034\031" +
    "\042\036\051\016\052\044\055\037\056\033\057\030\060" +
    "\035\064\032\065\022\066\025\001\002\000\056\004\014" +
    "\005\uffb7\006\uffb7\007\uffb7\012\uffb7\014\uffb7\015\015\021" +
    "\uffb7\022\uffb7\034\uffb7\042\uffb7\043\uffb7\051\uffb7\052\uffb7" +
    "\054\013\055\uffb7\056\uffb7\057\uffb7\060\uffb7\064\uffb7\065" +
    "\uffb7\066\uffb7\001\002\000\062\002\uffb9\004\uffb9\005\uffb9" +
    "\006\uffb9\007\uffb9\012\uffb9\014\uffb9\015\uffb9\021\uffb9\022" +
    "\uffb9\034\uffb9\042\uffb9\043\uffb9\044\uffb9\051\uffb9\052\uffb9" +
    "\054\uffb9\055\uffb9\056\uffb9\057\uffb9\060\uffb9\064\uffb9\065" +
    "\uffb9\066\uffb9\001\002\000\062\002\uffb8\004\uffb8\005\uffb8" +
    "\006\uffb8\007\uffb8\012\uffb8\014\uffb8\015\uffb8\021\uffb8\022" +
    "\uffb8\034\uffb8\042\uffb8\043\uffb8\044\uffb8\051\uffb8\052\uffb8" +
    "\054\uffb8\055\uffb8\056\uffb8\057\uffb8\060\uffb8\064\uffb8\065" +
    "\uffb8\066\uffb8\001\002\000\062\002\uffba\004\uffba\005\uffba" +
    "\006\uffba\007\uffba\012\uffba\014\uffba\015\uffba\021\uffba\022" +
    "\uffba\034\uffba\042\uffba\043\uffba\044\uffba\051\uffba\052\uffba" +
    "\054\uffba\055\uffba\056\uffba\057\uffba\060\uffba\064\uffba\065" +
    "\uffba\066\uffba\001\002\000\004\065\227\001\002\000\032" +
    "\012\020\021\045\022\017\034\051\042\036\051\047\052" +
    "\046\055\037\056\033\057\030\064\032\065\022\001\002" +
    "\000\004\034\223\001\002\000\012\004\uffff\015\uffff\044" +
    "\uffff\054\uffff\001\002\000\060\004\uffcd\013\uffcd\015\uffcd" +
    "\021\uffcd\022\uffcd\023\uffcd\024\uffcd\025\uffcd\026\uffcd\027" +
    "\uffcd\030\uffcd\031\uffcd\032\uffcd\033\uffcd\035\uffcd\037\uffcd" +
    "\040\uffcd\041\uffcd\043\uffcd\044\uffcd\046\uffcd\054\uffcd\064" +
    "\uffcd\001\002\000\050\004\ufff9\015\ufff9\021\063\022\055" +
    "\023\060\024\066\025\072\026\167\027\173\030\166\031" +
    "\171\032\172\033\170\040\uffd5\041\uffd5\044\ufff9\046\071" +
    "\054\ufff9\064\216\001\002\000\040\005\027\006\040\012" +
    "\020\014\024\021\045\022\017\034\031\042\036\051\047" +
    "\052\046\055\037\056\033\057\030\064\032\065\022\001" +
    "\002\000\004\016\213\001\002\000\006\040\203\041\204" +
    "\001\002\000\044\004\uffda\015\uffda\021\uffda\023\uffda\024" +
    "\uffda\026\uffda\027\uffda\030\uffda\031\uffda\032\uffda\033\uffda" +
    "\035\uffda\040\uffda\041\uffda\044\uffda\046\uffda\054\uffda\001" +
    "\002\000\032\012\020\021\045\022\017\034\051\042\036" +
    "\051\047\052\046\055\037\056\033\057\030\064\032\065" +
    "\022\001\002\000\040\005\027\006\040\012\020\014\024" +
    "\021\045\022\017\034\031\042\036\051\047\052\046\055" +
    "\037\056\033\057\030\064\032\065\022\001\002\000\060" +
    "\004\uffcc\013\uffcc\015\uffcc\021\uffcc\022\uffcc\023\uffcc\024" +
    "\uffcc\025\uffcc\026\uffcc\027\uffcc\030\uffcc\031\uffcc\032\uffcc" +
    "\033\uffcc\035\uffcc\037\uffcc\040\uffcc\041\uffcc\043\uffcc\044" +
    "\uffcc\046\uffcc\054\uffcc\064\uffcc\001\002\000\032\012\020" +
    "\021\045\022\017\034\051\042\036\051\047\052\046\055" +
    "\037\056\033\057\030\064\032\065\022\001\002\000\010" +
    "\004\007\015\010\054\006\001\002\000\004\065\147\001" +
    "\002\000\032\012\020\021\045\022\017\034\051\042\036" +
    "\051\047\052\046\055\037\056\033\057\030\064\032\065" +
    "\022\001\002\000\004\065\143\001\002\000\044\004\uffd9" +
    "\015\uffd9\021\uffd9\023\uffd9\024\uffd9\026\uffd9\027\uffd9\030" +
    "\uffd9\031\uffd9\032\uffd9\033\uffd9\035\uffd9\040\uffd9\041\uffd9" +
    "\044\uffd9\046\uffd9\054\uffd9\001\002\000\032\012\020\021" +
    "\045\022\017\034\136\042\036\051\047\052\046\055\037" +
    "\056\033\057\030\064\032\065\022\001\002\000\042\004" +
    "\ufff8\015\ufff8\021\101\023\077\024\102\026\061\027\070" +
    "\030\057\031\065\032\067\033\064\040\uffd6\041\uffd6\044" +
    "\ufff8\046\103\054\ufff8\001\002\000\026\021\101\023\077" +
    "\024\102\026\061\027\070\030\057\031\065\032\067\033" +
    "\064\046\103\001\002\000\004\065\125\001\002\000\032" +
    "\012\020\021\045\022\017\034\051\042\036\051\047\052" +
    "\046\055\037\056\033\057\030\064\032\065\022\001\002" +
    "\000\004\065\117\001\002\000\004\065\116\001\002\000" +
    "\060\004\uffd4\013\uffd4\015\uffd4\021\uffd4\022\uffd4\023\060" +
    "\024\066\025\072\026\uffd4\027\uffd4\030\uffd4\031\uffd4\032" +
    "\uffd4\033\uffd4\035\uffd4\037\uffd4\040\uffd4\041\uffd4\043\uffd4" +
    "\044\uffd4\046\uffd4\054\uffd4\064\uffd4\001\002\000\032\012" +
    "\020\021\045\022\017\034\051\042\036\051\047\052\046" +
    "\055\037\056\033\057\030\064\032\065\022\001\002\000" +
    "\006\013\113\035\114\001\002\000\036\013\054\021\063" +
    "\022\055\023\060\024\066\025\072\026\061\027\070\030" +
    "\057\031\065\032\067\033\064\035\056\046\071\001\002" +
    "\000\032\012\020\021\045\022\017\034\051\042\036\051" +
    "\047\052\046\055\037\056\033\057\030\064\032\065\022" +
    "\001\002\000\054\012\020\021\110\022\017\023\077\024" +
    "\102\026\061\027\070\030\057\031\065\032\067\033\064" +
    "\034\051\042\036\046\103\051\047\052\046\055\037\056" +
    "\033\057\030\064\032\065\022\001\002\000\060\004\uffca" +
    "\013\uffca\015\uffca\021\uffca\022\uffca\023\uffca\024\uffca\025" +
    "\uffca\026\uffca\027\uffca\030\uffca\031\uffca\032\uffca\033\uffca" +
    "\035\uffca\037\uffca\040\uffca\041\uffca\043\uffca\044\uffca\046" +
    "\uffca\054\uffca\064\uffca\001\002\000\054\012\uffe8\021\uffe8" +
    "\022\uffe8\023\uffe8\024\uffe8\026\uffe8\027\uffe8\030\uffe8\031" +
    "\uffe8\032\uffe8\033\uffe8\034\uffe8\042\uffe8\046\uffe8\051\uffe8" +
    "\052\uffe8\055\uffe8\056\uffe8\057\uffe8\064\uffe8\065\uffe8\001" +
    "\002\000\056\012\020\015\uffec\021\uffec\022\017\023\uffec" +
    "\024\uffec\026\uffec\027\uffec\030\uffec\031\uffec\032\uffec\033" +
    "\uffec\034\051\042\036\046\uffec\051\047\052\046\055\037" +
    "\056\033\057\030\064\032\065\022\001\002\000\054\012" +
    "\uffea\021\uffea\022\uffea\023\uffea\024\uffea\026\uffea\027\uffea" +
    "\030\uffea\031\uffea\032\uffea\033\uffea\034\uffea\042\uffea\046" +
    "\uffea\051\uffea\052\uffea\055\uffea\056\uffea\057\uffea\064\uffea" +
    "\065\uffea\001\002\000\026\021\101\023\077\024\102\026" +
    "\061\027\070\030\057\031\065\032\067\033\064\046\103" +
    "\001\002\000\056\012\020\015\uffed\021\uffed\022\017\023" +
    "\uffed\024\uffed\026\uffed\027\uffed\030\uffed\031\uffed\032\uffed" +
    "\033\uffed\034\051\042\036\046\uffed\051\047\052\046\055" +
    "\037\056\033\057\030\064\032\065\022\001\002\000\054" +
    "\012\uffe5\021\uffe5\022\uffe5\023\uffe5\024\uffe5\026\uffe5\027" +
    "\uffe5\030\uffe5\031\uffe5\032\uffe5\033\uffe5\034\uffe5\042\uffe5" +
    "\046\uffe5\051\uffe5\052\uffe5\055\uffe5\056\uffe5\057\uffe5\064" +
    "\uffe5\065\uffe5\001\002\000\054\012\uffe6\021\uffe6\022\uffe6" +
    "\023\uffe6\024\uffe6\026\uffe6\027\uffe6\030\uffe6\031\uffe6\032" +
    "\uffe6\033\uffe6\034\uffe6\042\uffe6\046\uffe6\051\uffe6\052\uffe6" +
    "\055\uffe6\056\uffe6\057\uffe6\064\uffe6\065\uffe6\001\002\000" +
    "\056\012\020\015\uffeb\021\uffeb\022\017\023\uffeb\024\uffeb" +
    "\026\uffeb\027\uffeb\030\uffeb\031\uffeb\032\uffeb\033\uffeb\034" +
    "\051\042\036\046\uffeb\051\047\052\046\055\037\056\033" +
    "\057\030\064\032\065\022\001\002\000\054\012\uffe7\021" +
    "\uffe7\022\uffe7\023\uffe7\024\uffe7\026\uffe7\027\uffe7\030\uffe7" +
    "\031\uffe7\032\uffe7\033\uffe7\034\uffe7\042\uffe7\046\uffe7\051" +
    "\uffe7\052\uffe7\055\uffe7\056\uffe7\057\uffe7\064\uffe7\065\uffe7" +
    "\001\002\000\054\012\uffe9\021\uffe9\022\uffe9\023\uffe9\024" +
    "\uffe9\026\uffe9\027\uffe9\030\uffe9\031\uffe9\032\uffe9\033\uffe9" +
    "\034\uffe9\042\uffe9\046\uffe9\051\uffe9\052\uffe9\055\uffe9\056" +
    "\uffe9\057\uffe9\064\uffe9\065\uffe9\001\002\000\056\012\020" +
    "\015\uffe4\021\045\022\017\023\uffe4\024\uffe4\026\uffe4\027" +
    "\uffe4\030\uffe4\031\uffe4\032\uffe4\033\uffe4\034\051\042\036" +
    "\046\uffe4\051\047\052\046\055\037\056\033\057\030\064" +
    "\032\065\022\001\002\000\032\012\020\021\045\022\017" +
    "\034\051\042\036\051\047\052\046\055\037\056\033\057" +
    "\030\064\032\065\022\001\002\000\060\004\uffce\013\uffce" +
    "\015\uffce\021\uffce\022\uffce\023\uffce\024\uffce\025\uffce\026" +
    "\uffce\027\uffce\030\uffce\031\uffce\032\uffce\033\uffce\035\uffce" +
    "\037\uffce\040\uffce\041\uffce\043\uffce\044\uffce\046\uffce\054" +
    "\uffce\064\uffce\001\002\000\060\004\uffc8\013\uffc8\015\uffc8" +
    "\021\063\022\055\023\060\024\066\025\072\026\uffc8\027" +
    "\uffc8\030\uffc8\031\uffc8\032\uffc8\033\uffc8\035\uffc8\037\uffc8" +
    "\040\uffc8\041\uffc8\043\uffc8\044\uffc8\046\uffc8\054\uffc8\064" +
    "\uffc8\001\002\000\060\004\uffcf\013\uffcf\015\uffcf\021\uffcf" +
    "\022\uffcf\023\uffcf\024\uffcf\025\uffcf\026\uffcf\027\uffcf\030" +
    "\uffcf\031\uffcf\032\uffcf\033\uffcf\035\uffcf\037\uffcf\040\uffcf" +
    "\041\uffcf\043\uffcf\044\uffcf\046\uffcf\054\uffcf\064\uffcf\001" +
    "\002\000\060\004\uffd2\013\uffd2\015\uffd2\021\uffd2\022\uffd2" +
    "\023\060\024\066\025\072\026\uffd2\027\uffd2\030\uffd2\031" +
    "\uffd2\032\uffd2\033\uffd2\035\uffd2\037\uffd2\040\uffd2\041\uffd2" +
    "\043\uffd2\044\uffd2\046\uffd2\054\uffd2\064\uffd2\001\002\000" +
    "\032\012\uffec\021\uffec\022\uffec\034\uffec\042\uffec\051\uffec" +
    "\052\uffec\055\uffec\056\uffec\057\uffec\064\uffec\065\uffec\001" +
    "\002\000\032\012\020\021\045\022\017\034\051\042\036" +
    "\051\047\052\046\055\037\056\033\057\030\064\032\065" +
    "\022\001\002\000\032\012\uffed\021\uffed\022\uffed\034\uffed" +
    "\042\uffed\051\uffed\052\uffed\055\uffed\056\uffed\057\uffed\064" +
    "\uffed\065\uffed\001\002\000\032\012\uffeb\021\uffeb\022\uffeb" +
    "\034\uffeb\042\uffeb\051\uffeb\052\uffeb\055\uffeb\056\uffeb\057" +
    "\uffeb\064\uffeb\065\uffeb\001\002\000\032\012\uffe4\021\uffe4" +
    "\022\uffe4\034\uffe4\042\uffe4\051\uffe4\052\uffe4\055\uffe4\056" +
    "\uffe4\057\uffe4\064\uffe4\065\uffe4\001\002\000\060\004\uffbf" +
    "\013\uffbf\015\uffbf\021\063\022\055\023\060\024\066\025" +
    "\072\026\061\027\070\030\057\031\065\032\067\033\064" +
    "\035\uffbf\037\uffbf\040\uffbf\041\uffbf\043\uffbf\044\uffbf\046" +
    "\071\054\uffbf\064\uffbf\001\002\000\060\004\uffd0\013\uffd0" +
    "\015\uffd0\021\uffd0\022\uffd0\023\uffd0\024\uffd0\025\uffd0\026" +
    "\uffd0\027\uffd0\030\uffd0\031\uffd0\032\uffd0\033\uffd0\035\uffd0" +
    "\037\uffd0\040\uffd0\041\uffd0\043\uffd0\044\uffd0\046\uffd0\054" +
    "\uffd0\064\uffd0\001\002\000\060\004\uffd1\013\uffd1\015\uffd1" +
    "\021\uffd1\022\uffd1\023\060\024\066\025\072\026\uffd1\027" +
    "\uffd1\030\uffd1\031\uffd1\032\uffd1\033\uffd1\035\uffd1\037\uffd1" +
    "\040\uffd1\041\uffd1\043\uffd1\044\uffd1\046\uffd1\054\uffd1\064" +
    "\uffd1\001\002\000\032\012\020\021\045\022\017\034\051" +
    "\042\036\051\047\052\046\055\037\056\033\057\030\064" +
    "\032\065\022\001\002\000\032\012\uffed\021\uffed\022\uffed" +
    "\034\051\042\uffed\051\uffed\052\uffed\055\037\056\uffed\057" +
    "\uffed\064\uffed\065\uffed\001\002\000\060\004\uffbe\013\uffbe" +
    "\015\uffbe\021\uffbe\022\uffbe\023\060\024\066\025\072\026" +
    "\uffbe\027\uffbe\030\uffbe\031\uffbe\032\uffbe\033\uffbe\035\uffbe" +
    "\037\uffbe\040\uffbe\041\uffbe\043\uffbe\044\uffbe\046\uffbe\054" +
    "\uffbe\064\uffbe\001\002\000\050\004\ufffd\013\ufffd\015\ufffd" +
    "\021\063\022\055\023\060\024\066\025\072\026\061\027" +
    "\070\030\057\031\065\032\067\033\064\035\ufffd\037\ufffd" +
    "\044\ufffd\046\071\054\ufffd\001\002\000\032\012\020\021" +
    "\045\022\017\034\051\042\036\051\047\052\046\055\037" +
    "\056\033\057\030\064\032\065\022\001\002\000\060\004" +
    "\uffc9\013\uffc9\015\uffc9\021\uffc9\022\uffc9\023\uffc9\024\uffc9" +
    "\025\uffc9\026\uffc9\027\uffc9\030\uffc9\031\uffc9\032\uffc9\033" +
    "\uffc9\035\uffc9\037\uffc9\040\uffc9\041\uffc9\043\uffc9\044\uffc9" +
    "\046\uffc9\054\uffc9\064\uffc9\001\002\000\050\004\ufffc\013" +
    "\ufffc\015\ufffc\021\063\022\055\023\060\024\066\025\072" +
    "\026\061\027\070\030\057\031\065\032\067\033\064\035" +
    "\ufffc\037\ufffc\044\ufffc\046\071\054\ufffc\001\002\000\060" +
    "\004\uffc5\013\uffc5\015\uffc5\021\uffc5\022\uffc5\023\uffc5\024" +
    "\uffc5\025\uffc5\026\uffc5\027\uffc5\030\uffc5\031\uffc5\032\uffc5" +
    "\033\uffc5\035\uffc5\037\uffc5\040\uffc5\041\uffc5\043\uffc5\044" +
    "\uffc5\046\uffc5\054\uffc5\064\uffc5\001\002\000\062\004\uffc4" +
    "\013\uffc4\015\uffc4\021\uffc4\022\uffc4\023\uffc4\024\uffc4\025" +
    "\uffc4\026\uffc4\027\uffc4\030\uffc4\031\uffc4\032\uffc4\033\uffc4" +
    "\035\uffc4\036\120\037\uffc4\040\uffc4\041\uffc4\043\uffc4\044" +
    "\uffc4\046\uffc4\054\uffc4\064\uffc4\001\002\000\032\012\020" +
    "\021\045\022\017\034\051\042\036\051\047\052\046\055" +
    "\037\056\033\057\030\064\032\065\022\001\002\000\006" +
    "\013\113\037\124\001\002\000\036\013\054\021\063\022" +
    "\055\023\060\024\066\025\072\026\061\027\070\030\057" +
    "\031\065\032\067\033\064\037\123\046\071\001\002\000" +
    "\060\004\uffc7\013\uffc7\015\uffc7\021\uffc7\022\uffc7\023\uffc7" +
    "\024\uffc7\025\uffc7\026\uffc7\027\uffc7\030\uffc7\031\uffc7\032" +
    "\uffc7\033\uffc7\035\uffc7\037\uffc7\040\uffc7\041\uffc7\043\uffc7" +
    "\044\uffc7\046\uffc7\054\uffc7\064\uffc7\001\002\000\060\004" +
    "\uffc6\013\uffc6\015\uffc6\021\uffc6\022\uffc6\023\uffc6\024\uffc6" +
    "\025\uffc6\026\uffc6\027\uffc6\030\uffc6\031\uffc6\032\uffc6\033" +
    "\uffc6\035\uffc6\037\uffc6\040\uffc6\041\uffc6\043\uffc6\044\uffc6" +
    "\046\uffc6\054\uffc6\064\uffc6\001\002\000\054\004\uffc4\015" +
    "\uffc4\016\126\021\uffc4\022\uffc4\023\uffc4\024\uffc4\025\uffc4" +
    "\026\uffc4\027\uffc4\030\uffc4\031\uffc4\032\uffc4\033\uffc4\036" +
    "\120\040\uffc4\041\uffc4\044\uffc4\046\uffc4\054\uffc4\064\uffc4" +
    "\001\002\000\032\012\020\021\045\022\017\034\051\042" +
    "\036\051\047\052\046\055\037\056\033\057\030\064\032" +
    "\065\022\001\002\000\042\004\ufffa\015\ufffa\021\063\022" +
    "\055\023\060\024\066\025\072\026\061\027\070\030\057" +
    "\031\065\032\067\033\064\044\ufffa\046\071\054\ufffa\001" +
    "\002\000\032\012\020\021\045\022\017\034\051\042\036" +
    "\051\047\052\046\055\037\056\033\057\030\064\032\065" +
    "\022\001\002\000\042\004\uffef\015\uffef\021\063\022\055" +
    "\023\060\024\066\025\072\026\061\027\070\030\057\031" +
    "\065\032\067\033\064\044\uffef\046\071\054\uffef\001\002" +
    "\000\032\012\020\021\045\022\017\034\051\042\036\051" +
    "\047\052\046\055\037\056\033\057\030\064\032\065\022" +
    "\001\002\000\050\004\uffd7\015\uffd7\021\063\022\055\023" +
    "\060\024\066\025\072\026\061\027\070\030\057\031\065" +
    "\032\067\033\064\035\uffd7\040\uffd7\041\uffd7\044\uffd7\046" +
    "\071\054\uffd7\001\002\000\014\004\ufff6\013\113\015\ufff6" +
    "\044\ufff6\054\ufff6\001\002\000\044\004\ufff7\013\054\015" +
    "\ufff7\021\063\022\055\023\060\024\066\025\072\026\061" +
    "\027\070\030\057\031\065\032\067\033\064\044\ufff7\046" +
    "\071\054\ufff7\001\002\000\034\012\020\021\045\022\017" +
    "\034\051\035\137\042\036\051\047\052\046\055\037\056" +
    "\033\057\030\064\032\065\022\001\002\000\012\004\uffee" +
    "\015\uffee\044\uffee\054\uffee\001\002\000\046\004\ufff1\013" +
    "\054\015\ufff1\021\063\022\055\023\060\024\066\025\072" +
    "\026\061\027\070\030\057\031\065\032\067\033\064\035" +
    "\056\044\ufff1\046\071\054\ufff1\001\002\000\004\035\142" +
    "\001\002\000\012\004\ufff2\015\ufff2\044\ufff2\054\ufff2\001" +
    "\002\000\060\004\uffc3\013\uffc3\015\uffc3\021\uffc3\022\uffc3" +
    "\023\uffc3\024\uffc3\025\uffc3\026\uffc3\027\uffc3\030\uffc3\031" +
    "\uffc3\032\uffc3\033\uffc3\035\uffc3\037\uffc3\040\uffc3\041\uffc3" +
    "\043\uffc3\044\uffc3\046\uffc3\054\uffc3\064\uffc3\001\002\000" +
    "\034\013\145\021\063\022\055\023\060\024\066\025\072" +
    "\026\061\027\070\030\057\031\065\032\067\033\064\046" +
    "\071\001\002\000\032\012\020\021\045\022\017\034\051" +
    "\042\036\051\047\052\046\055\037\056\033\057\030\064" +
    "\032\065\022\001\002\000\060\004\uffc2\013\uffc2\015\uffc2" +
    "\021\063\022\055\023\060\024\066\025\072\026\061\027" +
    "\070\030\057\031\065\032\067\033\064\035\uffc2\037\uffc2" +
    "\040\uffc2\041\uffc2\043\uffc2\044\uffc2\046\071\054\uffc2\064" +
    "\uffc2\001\002\000\032\012\020\021\045\022\017\034\051" +
    "\042\036\051\047\052\046\055\037\056\033\057\030\064" +
    "\032\065\022\001\002\000\042\004\007\015\010\021\063" +
    "\022\055\023\060\024\066\025\072\026\061\027\070\030" +
    "\057\031\065\032\067\033\064\043\uffb6\046\071\054\006" +
    "\001\002\000\004\043\152\001\002\000\054\004\007\005" +
    "\uffb6\006\uffb6\007\uffb6\012\uffb6\014\uffb6\015\010\021\uffb6" +
    "\022\uffb6\034\uffb6\042\uffb6\051\uffb6\052\uffb6\054\006\055" +
    "\uffb6\056\uffb6\057\uffb6\060\uffb6\064\uffb6\065\uffb6\066\uffb6" +
    "\001\002\000\046\005\027\006\040\007\041\012\020\014" +
    "\024\021\045\022\017\034\031\042\036\051\016\052\044" +
    "\055\037\056\033\057\030\060\035\064\032\065\022\066" +
    "\025\001\002\000\012\004\007\015\010\044\uffb6\054\006" +
    "\001\002\000\004\044\160\001\002\000\056\004\014\005" +
    "\027\006\040\007\041\012\020\014\024\015\015\021\045" +
    "\022\017\034\031\042\036\044\uffb7\051\016\052\044\054" +
    "\013\055\037\056\033\057\030\060\035\064\032\065\022" +
    "\066\025\001\002\000\012\004\ufffe\015\ufffe\044\ufffe\054" +
    "\ufffe\001\002\000\012\004\ufff5\015\ufff5\044\ufff5\054\ufff5" +
    "\001\002\000\056\002\000\004\014\005\027\006\040\007" +
    "\041\012\020\014\024\015\015\021\045\022\017\034\031" +
    "\042\036\051\016\052\044\054\013\055\037\056\033\057" +
    "\030\060\035\064\032\065\022\066\025\001\002\000\060" +
    "\004\uffc1\013\uffc1\015\uffc1\021\063\022\055\023\060\024" +
    "\066\025\072\026\061\027\070\030\057\031\065\032\067" +
    "\033\064\035\uffc1\037\uffc1\040\uffc1\041\uffc1\043\uffc1\044" +
    "\uffc1\046\071\054\uffc1\064\uffc1\001\002\000\042\013\054" +
    "\021\063\022\055\023\060\024\066\025\072\026\167\027" +
    "\173\030\166\031\171\032\172\033\170\035\056\040\uffd5" +
    "\041\uffd5\046\071\001\002\000\034\021\101\023\077\024" +
    "\102\026\061\027\070\030\057\031\065\032\067\033\064" +
    "\035\165\040\uffd6\041\uffd6\046\103\001\002\000\044\004" +
    "\uffd8\015\uffd8\021\uffd8\023\uffd8\024\uffd8\026\uffd8\027\uffd8" +
    "\030\uffd8\031\uffd8\032\uffd8\033\uffd8\035\uffd8\040\uffd8\041" +
    "\uffd8\044\uffd8\046\uffd8\054\uffd8\001\002\000\056\012\020" +
    "\015\uffe8\021\045\022\017\023\uffe8\024\uffe8\026\uffe8\027" +
    "\uffe8\030\uffe8\031\uffe8\032\uffe8\033\uffe8\034\051\042\036" +
    "\046\uffe8\051\047\052\046\055\037\056\033\057\030\064" +
    "\032\065\022\001\002\000\056\012\020\015\uffea\021\045" +
    "\022\017\023\uffea\024\uffea\026\uffea\027\uffea\030\uffea\031" +
    "\uffea\032\uffea\033\uffea\034\051\042\036\046\uffea\051\047" +
    "\052\046\055\037\056\033\057\030\064\032\065\022\001" +
    "\002\000\056\012\020\015\uffe5\021\045\022\017\023\uffe5" +
    "\024\uffe5\026\uffe5\027\uffe5\030\uffe5\031\uffe5\032\uffe5\033" +
    "\uffe5\034\051\042\036\046\uffe5\051\047\052\046\055\037" +
    "\056\033\057\030\064\032\065\022\001\002\000\056\012" +
    "\020\015\uffe6\021\045\022\017\023\uffe6\024\uffe6\026\uffe6" +
    "\027\uffe6\030\uffe6\031\uffe6\032\uffe6\033\uffe6\034\051\042" +
    "\036\046\uffe6\051\047\052\046\055\037\056\033\057\030" +
    "\064\032\065\022\001\002\000\056\012\020\015\uffe7\021" +
    "\045\022\017\023\uffe7\024\uffe7\026\uffe7\027\uffe7\030\uffe7" +
    "\031\uffe7\032\uffe7\033\uffe7\034\051\042\036\046\uffe7\051" +
    "\047\052\046\055\037\056\033\057\030\064\032\065\022" +
    "\001\002\000\056\012\020\015\uffe9\021\045\022\017\023" +
    "\uffe9\024\uffe9\026\uffe9\027\uffe9\030\uffe9\031\uffe9\032\uffe9" +
    "\033\uffe9\034\051\042\036\046\uffe9\051\047\052\046\055" +
    "\037\056\033\057\030\064\032\065\022\001\002\000\050" +
    "\004\uffe2\015\uffe2\021\063\022\055\023\060\024\066\025" +
    "\072\026\uffe2\027\uffe2\030\uffe2\031\uffe2\032\uffe2\033\uffe2" +
    "\035\uffe2\040\uffe2\041\uffe2\044\uffe2\046\071\054\uffe2\001" +
    "\002\000\050\004\uffe0\015\uffe0\021\063\022\055\023\060" +
    "\024\066\025\072\026\uffe0\027\uffe0\030\uffe0\031\uffe0\032" +
    "\uffe0\033\uffe0\035\uffe0\040\uffe0\041\uffe0\044\uffe0\046\071" +
    "\054\uffe0\001\002\000\050\004\uffdf\015\uffdf\021\063\022" +
    "\055\023\060\024\066\025\072\026\uffdf\027\uffdf\030\uffdf" +
    "\031\uffdf\032\uffdf\033\uffdf\035\uffdf\040\uffdf\041\uffdf\044" +
    "\uffdf\046\071\054\uffdf\001\002\000\050\004\uffde\015\uffde" +
    "\021\063\022\055\023\060\024\066\025\072\026\uffde\027" +
    "\uffde\030\uffde\031\uffde\032\uffde\033\uffde\035\uffde\040\uffde" +
    "\041\uffde\044\uffde\046\071\054\uffde\001\002\000\050\004" +
    "\uffe3\015\uffe3\021\063\022\055\023\060\024\066\025\072" +
    "\026\uffe3\027\uffe3\030\uffe3\031\uffe3\032\uffe3\033\uffe3\035" +
    "\uffe3\040\uffe3\041\uffe3\044\uffe3\046\071\054\uffe3\001\002" +
    "\000\050\004\uffe1\015\uffe1\021\063\022\055\023\060\024" +
    "\066\025\072\026\uffe1\027\uffe1\030\uffe1\031\uffe1\032\uffe1" +
    "\033\uffe1\035\uffe1\040\uffe1\041\uffe1\044\uffe1\046\071\054" +
    "\uffe1\001\002\000\060\004\uffc0\013\uffc0\015\uffc0\021\063" +
    "\022\055\023\060\024\066\025\072\026\061\027\070\030" +
    "\057\031\065\032\067\033\064\035\uffc0\037\uffc0\040\uffc0" +
    "\041\uffc0\043\uffc0\044\uffc0\046\071\054\uffc0\064\uffc0\001" +
    "\002\000\004\040\211\001\002\000\004\041\205\001\002" +
    "\000\040\005\027\006\040\012\020\014\024\021\045\022" +
    "\017\034\031\042\036\051\047\052\046\055\037\056\033" +
    "\057\030\064\032\065\022\001\002\000\050\004\uffd5\015" +
    "\uffd5\021\063\022\055\023\060\024\066\025\072\026\167" +
    "\027\173\030\166\031\171\032\172\033\170\035\uffd5\040" +
    "\uffd5\041\uffd5\044\uffd5\046\071\054\uffd5\001\002\000\044" +
    "\004\uffdc\015\uffdc\021\uffdc\023\uffdc\024\uffdc\026\uffdc\027" +
    "\uffdc\030\uffdc\031\uffdc\032\uffdc\033\uffdc\035\uffdc\040\uffdc" +
    "\041\uffdc\044\uffdc\046\uffdc\054\uffdc\001\002\000\044\004" +
    "\uffd6\015\uffd6\021\101\023\077\024\102\026\061\027\070" +
    "\030\057\031\065\032\067\033\064\035\uffd6\040\uffd6\041" +
    "\uffd6\044\uffd6\046\103\054\uffd6\001\002\000\040\005\027" +
    "\006\040\012\020\014\024\021\045\022\017\034\031\042" +
    "\036\051\047\052\046\055\037\056\033\057\030\064\032" +
    "\065\022\001\002\000\044\004\uffdd\015\uffdd\021\uffdd\023" +
    "\uffdd\024\uffdd\026\uffdd\027\uffdd\030\uffdd\031\uffdd\032\uffdd" +
    "\033\uffdd\035\uffdd\040\uffdd\041\uffdd\044\uffdd\046\uffdd\054" +
    "\uffdd\001\002\000\032\012\020\021\045\022\017\034\051" +
    "\042\036\051\047\052\046\055\037\056\033\057\030\064" +
    "\032\065\022\001\002\000\042\004\ufff0\015\ufff0\021\063" +
    "\022\055\023\060\024\066\025\072\026\061\027\070\030" +
    "\057\031\065\032\067\033\064\044\ufff0\046\071\054\ufff0" +
    "\001\002\000\044\004\uffdb\015\uffdb\021\uffdb\023\uffdb\024" +
    "\uffdb\026\uffdb\027\uffdb\030\uffdb\031\uffdb\032\uffdb\033\uffdb" +
    "\035\uffdb\040\203\041\204\044\uffdb\046\uffdb\054\uffdb\001" +
    "\002\000\026\021\101\023\077\024\102\026\061\027\070" +
    "\030\057\031\065\032\067\033\064\046\103\001\002\000" +
    "\030\015\220\021\101\023\077\024\102\026\061\027\070" +
    "\030\057\031\065\032\067\033\064\046\103\001\002\000" +
    "\012\004\ufff4\015\ufff4\044\ufff4\054\ufff4\001\002\000\032" +
    "\012\020\021\045\022\017\034\051\042\036\051\047\052" +
    "\046\055\037\056\033\057\030\064\032\065\022\001\002" +
    "\000\042\004\ufff3\015\ufff3\021\063\022\055\023\060\024" +
    "\066\025\072\026\061\027\070\030\057\031\065\032\067" +
    "\033\064\044\ufff3\046\071\054\ufff3\001\002\000\040\005" +
    "\027\006\040\012\020\014\024\021\045\022\017\034\031" +
    "\042\036\051\047\052\046\055\037\056\033\057\030\064" +
    "\032\065\022\001\002\000\034\021\101\023\077\024\102" +
    "\026\061\027\070\030\057\031\065\032\067\033\064\035" +
    "\225\040\uffd6\041\uffd6\046\103\001\002\000\060\004\uffcb" +
    "\013\uffcb\015\uffcb\021\uffcb\022\uffcb\023\uffcb\024\uffcb\025" +
    "\uffcb\026\uffcb\027\uffcb\030\uffcb\031\uffcb\032\uffcb\033\uffcb" +
    "\035\uffcb\037\uffcb\040\uffcb\041\uffcb\043\uffcb\044\uffcb\046" +
    "\uffcb\054\uffcb\064\uffcb\001\002\000\060\004\uffd3\013\uffd3" +
    "\015\uffd3\021\uffd3\022\uffd3\023\060\024\066\025\072\026" +
    "\uffd3\027\uffd3\030\uffd3\031\uffd3\032\uffd3\033\uffd3\035\uffd3" +
    "\037\uffd3\040\uffd3\041\uffd3\043\uffd3\044\uffd3\046\uffd3\054" +
    "\uffd3\064\uffd3\001\002\000\052\004\uffc5\015\uffc5\016\230" +
    "\021\uffc5\022\uffc5\023\uffc5\024\uffc5\025\uffc5\026\uffc5\027" +
    "\uffc5\030\uffc5\031\uffc5\032\uffc5\033\uffc5\040\uffc5\041\uffc5" +
    "\044\uffc5\046\uffc5\054\uffc5\064\uffc5\001\002\000\032\012" +
    "\020\021\045\022\017\034\051\042\036\051\047\052\046" +
    "\055\037\056\033\057\030\064\032\065\022\001\002\000" +
    "\042\004\ufffb\015\ufffb\021\063\022\055\023\060\024\066" +
    "\025\072\026\061\027\070\030\057\031\065\032\067\033" +
    "\064\044\ufffb\046\071\054\ufffb\001\002\000\004\002\001" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\230\000\004\002\003\001\001\000\002\001\001\000" +
    "\006\015\011\016\010\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\003\033\004\020\005" +
    "\022\006\041\007\025\011\042\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\225\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\010\216\001" +
    "\001\000\010\005\205\006\207\007\214\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\005" +
    "\201\001\001\000\012\005\162\006\163\007\025\014\051" +
    "\001\001\000\002\001\001\000\004\005\161\001\001\000" +
    "\004\015\160\001\001\000\002\001\001\000\004\005\143" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\005" +
    "\134\014\133\001\001\000\004\010\131\001\001\000\004" +
    "\010\127\001\001\000\002\001\001\000\004\005\047\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\010\061" +
    "\001\001\000\006\005\052\014\051\001\001\000\002\001" +
    "\001\000\004\010\061\001\001\000\004\005\111\001\001" +
    "\000\006\005\105\010\106\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\104\001\001\000\002\001\001" +
    "\000\004\010\077\001\001\000\004\005\075\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\005\074\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\005\073\001" +
    "\001\000\004\005\072\001\001\000\004\010\061\001\001" +
    "\000\004\010\061\001\001\000\004\010\061\001\001\000" +
    "\004\010\061\001\001\000\002\001\001\000\004\005\103" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\061\001\001\000\004\010\061\001\001" +
    "\000\004\010\061\001\001\000\004\005\110\001\001\000" +
    "\004\005\047\001\001\000\004\010\061\001\001\000\004" +
    "\010\061\001\001\000\004\005\114\001\001\000\002\001" +
    "\001\000\004\010\061\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\005\121\014\120\001\001\000\002\001" +
    "\001\000\004\010\061\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\126\001\001\000" +
    "\004\010\061\001\001\000\004\005\130\001\001\000\004" +
    "\010\061\001\001\000\004\005\132\001\001\000\004\010" +
    "\061\001\001\000\002\001\001\000\004\010\061\001\001" +
    "\000\006\005\137\014\051\001\001\000\002\001\001\000" +
    "\004\010\061\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\061\001\001\000\004\005" +
    "\145\001\001\000\004\010\061\001\001\000\004\005\147" +
    "\001\001\000\010\010\061\015\011\016\150\001\001\000" +
    "\002\001\001\000\006\015\011\016\152\001\001\000\016" +
    "\003\153\004\020\005\022\006\041\007\025\011\042\001" +
    "\001\000\006\015\155\016\154\001\001\000\002\001\001" +
    "\000\014\004\156\005\022\006\041\007\025\011\042\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\004\156" +
    "\005\022\006\041\007\025\011\042\001\001\000\004\010" +
    "\061\001\001\000\004\010\061\001\001\000\004\010\131" +
    "\001\001\000\002\001\001\000\004\005\200\001\001\000" +
    "\004\005\177\001\001\000\004\005\176\001\001\000\004" +
    "\005\175\001\001\000\004\005\174\001\001\000\004\005" +
    "\173\001\001\000\004\010\061\001\001\000\004\010\061" +
    "\001\001\000\004\010\061\001\001\000\004\010\061\001" +
    "\001\000\004\010\061\001\001\000\004\010\061\001\001" +
    "\000\004\010\061\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\005\205\006\207\007\206\001\001\000\004" +
    "\010\061\001\001\000\002\001\001\000\004\010\131\001" +
    "\001\000\010\005\205\006\207\007\211\001\001\000\002" +
    "\001\001\000\004\005\213\001\001\000\004\010\061\001" +
    "\001\000\002\001\001\000\004\010\220\001\001\000\004" +
    "\010\077\001\001\000\002\001\001\000\004\005\221\001" +
    "\001\000\004\010\061\001\001\000\010\005\205\006\223" +
    "\007\025\001\001\000\004\010\131\001\001\000\002\001" +
    "\001\000\004\010\061\001\001\000\002\001\001\000\004" +
    "\005\230\001\001\000\004\010\061\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {



  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // finn ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("finn",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // finn ::= fin 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("finn",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // fin ::= fin COMENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fin",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // fin ::= fin EOL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fin",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // fin ::= fin PC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fin",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // fin ::= COMENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fin",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // fin ::= EOL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fin",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // fin ::= PC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fin",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expr ::= expr MENOS op expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int o2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int o2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String o2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExprErr("Error: inesperado '"+ o2 +"' in " + e.get() + 
									"-" + o2 + "\""); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expr ::= expr op op expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int o1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int o1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String o1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int o2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int o2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String o2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExprErr("Error: inesperado '"+ o2 +"' in " + e.get() + 
									o1 + o2 + "\""); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expr ::= SHIFT expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Shift(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expr ::= POP expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Pop(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expr ::= PUSH expr COMA expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Push(e1,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expr ::= IDX IDENT 
            {
              Expr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Len(new ID("@"+i)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expr ::= ARRAY IDENT 
            {
              Expr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ID("@"+i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expr ::= ESCALAR IDENT 
            {
              Expr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ID("$"+i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expr ::= ARRAY IDENT AC lv CC 
            {
              Expr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Expr> l = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new IDArr("@"+i, new Arr(l)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expr ::= ARRAY IDENT AC expr CC 
            {
              Expr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new IDArr("@"+i, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expr ::= expr DP expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<Double> r = new ArrayList<>();
			double n1 = e1.run(null).get(0);
			double n2 = e2.run(null).get(0);
			if(n1>n2)
				RESULT= new ExprErr("error();");
			else if(n1 % 1 == 0 && n2 % 1 == 0){
				while(n1<=n2){
					r.add(n1);
					n1++;
				}
				RESULT = new Num(r);
			} else
				RESULT = new ExprErr("error();");
			 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expr ::= AP lv CP 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Expr> l = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Arr(l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expr ::= AP expr CP 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expr ::= ASDOUBLE AP condition CP 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expr ::= NUM 
            {
              Expr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double i = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<Double> r = new ArrayList<>(); r.add(i); RESULT = new Num(r); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expr ::= IDENT 
            {
              Expr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ID(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expr ::= expr EXP expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExpExpr(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expr ::= expr DIV expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DivExpr(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expr ::= expr POR expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new MultExpr(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expr ::= expr MENOS expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new MinusExpr(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expr ::= expr MAS expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PlusExpr(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expr ::= MENOS expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new InvExpr(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expr ::= MAS expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ec ::= expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ec",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ec ::= condition 
            {
              Expr RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr c = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ec",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // condition ::= condition op expr 
            {
              Expr RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr c = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExprErr("Error: inesperado '"+o+"' in \""+c.get()+o+"\""); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // condition ::= AP condition CP 
            {
              Expr RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr c = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // condition ::= FALSE 
            {
              Expr RESULT =null;
		 RESULT = new Cond(false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // condition ::= TRUE 
            {
              Expr RESULT =null;
		 RESULT = new Cond(true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // condition ::= NOT ec 
            {
              Expr RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr c = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NotCond(c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // condition ::= ec OR OR ec 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OrCond(l,r); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // condition ::= ec AND AND ec 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AndCond(l,r); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // condition ::= expr MAYORIG expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new GteCond(l,r); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // condition ::= expr MAYOR expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new GtCond(l,r); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // condition ::= expr MENORIG expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LteCond(l,r); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // condition ::= expr MENOR expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LtCond(l,r); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // condition ::= expr NE expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NeqCond(l,r); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // condition ::= expr EQ expr 
            {
              Expr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new EqCond(l,r); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // op ::= DP 
            {
              String RESULT =null;
		 RESULT = " : "; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // op ::= MAYORIG 
            {
              String RESULT =null;
		 RESULT = " >= "; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // op ::= MAYOR 
            {
              String RESULT =null;
		 RESULT = " > "; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // op ::= MENORIG 
            {
              String RESULT =null;
		 RESULT = " <= "; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // op ::= MENOR 
            {
              String RESULT =null;
		 RESULT = " < "; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // op ::= NE 
            {
              String RESULT =null;
		 RESULT = " != "; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // op ::= EQ 
            {
              String RESULT =null;
		 RESULT = " == "; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // op ::= DIV 
            {
              String RESULT =null;
		 RESULT = " / "; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // op ::= POR 
            {
              String RESULT =null;
		 RESULT = " * "; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // op ::= MAS 
            {
              String RESULT =null;
		 RESULT = " + "; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // statement ::= PRINT AP CP 
            {
              Statement RESULT =null;
		 RESULT = new StmtErr("Error in print.default() :\n el argumento \"x\" está ausente, sin valor por omisión"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // statement ::= asigi op expr 
            {
              Statement RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<String> ls = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new StmtErr("Error: inesperado '" + o + "' in \" <-"
									 + o + e.get() + "\""); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // statement ::= IDENTE IGUAL expr 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new StmtErr("Error: unexpected input in \"" + i + "\""); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // statement ::= PRINT AP expr 
            {
              Statement RESULT =null;
		 RESULT = new StmtErr("Error: unexpected symbol in:"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // statement ::= PRINT AP expr PC CP 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new StmtErr("Error: inesperado ';' in \"print(" + e.get() +";\""); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // statement ::= expr NUM op expr 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new StmtErr("Error: unexpected numeric constant in \"" + e.get() +
									" " + n + "\""); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // statement ::= expr op PC 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new StmtErr("Error: inesperado ';' in \"" + e.get() + o + ";\""); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // statement ::= FOREACH IDENT expr finn AL finn stmt_lst finn CL 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		StmtLst s = (StmtLst)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new ForStmt(i, e, s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // statement ::= PRINT lv 
            {
              Statement RESULT =null;
		int lvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Expr> lv = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PrintStmt(new Arr(lv)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // statement ::= PRINT expr 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PrintStmt(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // statement ::= condition 
            {
              Statement RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr c = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PrintStmt(c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // statement ::= expr 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // statement ::= ARRAY IDENT IGUAL expr 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
				HashMap<String, Expr> hm = new HashMap<String, Expr>();
				hm.put("@"+i,e);
				RESULT = new AssignStmt(hm);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // statement ::= ESCALAR IDENT IGUAL expr 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
				HashMap<String, Expr> hm = new HashMap<String, Expr>();
				hm.put("$"+i,e);
				RESULT = new AssignStmt(hm);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // lv ::= lv COMA expr 
            {
              ArrayList<Expr> RESULT =null;
		int lvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Expr> lv = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 lv.add(e); RESULT = lv; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lv",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // lv ::= expr COMA expr 
            {
              ArrayList<Expr> RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
				ArrayList<Expr> lv = new ArrayList<Expr>();
				lv.add(e1); lv.add(e2); RESULT = lv;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lv",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // stmt_lst ::= stmt_lst fin statement 
            {
              StmtLst RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		StmtLst sl = (StmtLst)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(s!=null)	sl.add(s);
			   RESULT = sl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_lst",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // stmt_lst ::= statement 
            {
              StmtLst RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(s!=null)	RESULT = new StmtLst(s);
				else	    RESULT = new StmtLst(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_lst",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= INIT finn stmt_lst fin 
            {
              Program RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StmtLst ls = (StmtLst)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 Program p = new Program(ls);
			 p.exec();
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

