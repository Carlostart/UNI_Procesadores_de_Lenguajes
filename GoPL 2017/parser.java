
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Aug 19 18:19:12 CEST 2019
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.HashMap;
import java.util.AbstractMap.SimpleEntry;
import java.util.ArrayList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Aug 19 18:19:12 CEST 2019
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\074\000\002\002\004\000\002\002\006\000\002\016" +
    "\002\000\002\003\011\000\002\003\002\000\002\014\005" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\005\000\002\014\005\000\002" +
    "\014\005\000\002\004\004\000\002\004\002\000\002\005" +
    "\007\000\002\005\007\000\002\005\011\000\002\005\007" +
    "\000\002\005\007\000\002\005\007\000\002\005\007\000" +
    "\002\005\006\000\002\005\003\000\002\005\003\000\002" +
    "\013\005\000\002\013\005\000\002\013\005\000\002\013" +
    "\005\000\002\013\005\000\002\013\005\000\002\013\005" +
    "\000\002\013\005\000\002\013\005\000\002\013\005\000" +
    "\002\013\005\000\002\013\005\000\002\012\003\000\002" +
    "\012\003\000\002\012\003\000\002\012\003\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\007\007" +
    "\000\002\007\006\000\002\007\007\000\002\010\003\000" +
    "\002\010\006\000\002\010\005\000\002\010\005\000\002" +
    "\010\005\000\002\010\005\000\002\010\005\000\002\015" +
    "\004\000\002\015\002\000\002\011\007\000\002\011\011" +
    "\000\002\006\003\000\002\006\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\175\000\004\051\006\001\002\000\004\026\102\001" +
    "\002\000\004\002\101\001\002\000\004\010\007\001\002" +
    "\000\010\011\ufffd\012\010\052\ufffd\001\002\000\026\004" +
    "\020\005\016\006\022\024\032\036\025\037\030\040\026" +
    "\047\021\050\017\055\024\001\002\000\006\011\013\052" +
    "\012\001\002\000\006\011\014\053\015\001\002\000\004" +
    "\026\uffd4\001\002\000\004\026\uffd5\001\002\000\004\026" +
    "\uffd3\001\002\000\112\004\uffdc\005\uffdc\006\uffdc\007\uffdc" +
    "\011\uffdc\012\uffdc\013\uffdc\014\uffdc\015\uffdc\016\uffdc\017" +
    "\uffdc\020\uffdc\021\uffdc\022\uffdc\023\uffdc\024\uffdc\025\uffdc" +
    "\027\uffdc\030\uffdc\031\uffdc\032\uffdc\033\uffdc\034\uffdc\035" +
    "\uffdc\036\uffdc\037\uffdc\040\uffdc\042\uffdc\044\uffdc\045\uffdc" +
    "\046\uffdc\047\uffdc\050\uffdc\052\uffdc\054\uffdc\055\uffdc\001" +
    "\002\000\064\004\ufffa\005\ufffa\006\ufffa\007\ufffa\011\ufffa" +
    "\012\ufffa\013\077\014\ufffa\015\ufffa\016\ufffa\024\ufffa\025" +
    "\ufffa\027\ufffa\036\ufffa\037\ufffa\040\ufffa\042\ufffa\044\ufffa" +
    "\045\ufffa\046\ufffa\047\ufffa\050\ufffa\052\ufffa\054\ufffa\055" +
    "\ufffa\001\002\000\112\004\uffd7\005\uffd7\006\uffd7\007\uffd7" +
    "\011\uffd7\012\uffd7\013\uffd7\014\uffd7\015\uffd7\016\uffd7\017" +
    "\uffd7\020\uffd7\021\uffd7\022\uffd7\023\uffd7\024\uffd7\025\uffd7" +
    "\027\uffd7\030\uffd7\031\uffd7\032\uffd7\033\uffd7\034\uffd7\035" +
    "\uffd7\036\uffd7\037\uffd7\040\uffd7\042\uffd7\044\uffd7\045\uffd7" +
    "\046\uffd7\047\uffd7\050\uffd7\052\uffd7\054\uffd7\055\uffd7\001" +
    "\002\000\064\004\ufff8\005\ufff8\006\ufff8\007\ufff8\011\ufff8" +
    "\012\ufff8\013\075\014\ufff8\015\ufff8\016\ufff8\024\ufff8\025" +
    "\ufff8\027\ufff8\036\ufff8\037\ufff8\040\ufff8\042\ufff8\044\ufff8" +
    "\045\ufff8\046\ufff8\047\ufff8\050\ufff8\052\ufff8\054\ufff8\055" +
    "\ufff8\001\002\000\112\004\uffdb\005\uffdb\006\uffdb\007\uffdb" +
    "\011\uffdb\012\uffdb\013\uffdb\014\uffdb\015\uffdb\016\uffdb\017" +
    "\uffdb\020\uffdb\021\uffdb\022\uffdb\023\uffdb\024\uffdb\025\uffdb" +
    "\027\uffdb\030\uffdb\031\uffdb\032\uffdb\033\uffdb\034\uffdb\035" +
    "\uffdb\036\uffdb\037\uffdb\040\uffdb\042\uffdb\044\uffdb\045\uffdb" +
    "\046\uffdb\047\uffdb\050\uffdb\052\uffdb\054\uffdb\055\uffdb\001" +
    "\002\000\004\015\067\001\002\000\112\004\uffd6\005\uffd6" +
    "\006\uffd6\007\uffd6\011\uffd6\012\uffd6\013\uffd6\014\uffd6\015" +
    "\uffd6\016\uffd6\017\uffd6\020\uffd6\021\uffd6\022\uffd6\023\uffd6" +
    "\024\uffd6\025\uffd6\027\uffd6\030\uffd6\031\uffd6\032\uffd6\033" +
    "\uffd6\034\uffd6\035\uffd6\036\uffd6\037\uffd6\040\uffd6\042\uffd6" +
    "\044\uffd6\045\uffd6\046\uffd6\047\uffd6\050\uffd6\052\uffd6\054" +
    "\uffd6\055\uffd6\001\002\000\112\004\uffda\005\uffda\006\uffda" +
    "\007\uffda\011\uffda\012\uffda\013\uffda\014\uffda\015\uffda\016" +
    "\uffda\017\uffda\020\uffda\021\uffda\022\uffda\023\uffda\024\uffda" +
    "\025\uffda\027\uffda\030\uffda\031\uffda\032\uffda\033\uffda\034" +
    "\uffda\035\uffda\036\uffda\037\uffda\040\uffda\042\uffda\044\uffda" +
    "\045\uffda\046\uffda\047\uffda\050\uffda\052\uffda\054\uffda\055" +
    "\uffda\001\002\000\064\004\ufff9\005\ufff9\006\ufff9\007\ufff9" +
    "\011\ufff9\012\ufff9\013\065\014\ufff9\015\ufff9\016\ufff9\024" +
    "\ufff9\025\ufff9\027\ufff9\036\ufff9\037\ufff9\040\ufff9\042\ufff9" +
    "\044\ufff9\045\ufff9\046\ufff9\047\ufff9\050\ufff9\052\ufff9\054" +
    "\ufff9\055\ufff9\001\002\000\112\004\uffd8\005\uffd8\006\uffd8" +
    "\007\uffd8\011\uffd8\012\uffd8\013\uffd8\014\uffd8\015\uffd8\016" +
    "\uffd8\017\uffd8\020\uffd8\021\uffd8\022\uffd8\023\uffd8\024\uffd8" +
    "\025\uffd8\027\uffd8\030\uffd8\031\uffd8\032\uffd8\033\uffd8\034" +
    "\uffd8\035\uffd8\036\uffd8\037\uffd8\040\uffd8\042\uffd8\044\uffd8" +
    "\045\uffd8\046\uffd8\047\uffd8\050\uffd8\052\uffd8\054\uffd8\055" +
    "\uffd8\001\002\000\112\004\uffd9\005\uffd9\006\uffd9\007\uffd9" +
    "\011\uffd9\012\uffd9\013\uffd9\014\uffd9\015\uffd9\016\uffd9\017" +
    "\uffd9\020\uffd9\021\uffd9\022\uffd9\023\uffd9\024\uffd9\025\uffd9" +
    "\027\uffd9\030\uffd9\031\uffd9\032\uffd9\033\uffd9\034\uffd9\035" +
    "\uffd9\036\uffd9\037\uffd9\040\uffd9\042\uffd9\044\uffd9\045\uffd9" +
    "\046\uffd9\047\uffd9\050\uffd9\052\uffd9\054\uffd9\055\uffd9\001" +
    "\002\000\112\004\ufffb\005\ufffb\006\ufffb\007\ufffb\011\ufffb" +
    "\012\ufffb\013\063\014\ufffb\015\ufffb\016\ufffb\017\042\020" +
    "\034\021\040\022\045\023\037\024\ufffb\025\ufffb\027\ufffb" +
    "\030\041\031\047\032\035\033\044\034\046\035\043\036" +
    "\ufffb\037\ufffb\040\ufffb\042\ufffb\044\ufffb\045\ufffb\046\ufffb" +
    "\047\ufffb\050\ufffb\052\ufffb\054\ufffb\055\ufffb\001\002\000" +
    "\020\004\020\005\016\006\022\024\032\036\025\037\030" +
    "\055\024\001\002\000\032\017\042\020\034\021\040\022" +
    "\045\023\037\025\036\030\041\031\047\032\035\033\044" +
    "\034\046\035\043\001\002\000\020\004\020\005\016\006" +
    "\022\024\032\036\025\037\030\055\024\001\002\000\020" +
    "\004\020\005\016\006\022\024\032\036\025\037\030\055" +
    "\024\001\002\000\112\004\uffdd\005\uffdd\006\uffdd\007\uffdd" +
    "\011\uffdd\012\uffdd\013\uffdd\014\uffdd\015\uffdd\016\uffdd\017" +
    "\uffdd\020\uffdd\021\uffdd\022\uffdd\023\uffdd\024\uffdd\025\uffdd" +
    "\027\uffdd\030\uffdd\031\uffdd\032\uffdd\033\uffdd\034\uffdd\035" +
    "\uffdd\036\uffdd\037\uffdd\040\uffdd\042\uffdd\044\uffdd\045\uffdd" +
    "\046\uffdd\047\uffdd\050\uffdd\052\uffdd\054\uffdd\055\uffdd\001" +
    "\002\000\020\004\020\005\016\006\022\024\032\036\025" +
    "\037\030\055\024\001\002\000\020\004\020\005\016\006" +
    "\022\024\032\036\025\037\030\055\024\001\002\000\020" +
    "\004\020\005\016\006\022\024\032\036\025\037\030\055" +
    "\024\001\002\000\020\004\020\005\016\006\022\024\032" +
    "\036\025\037\030\055\024\001\002\000\020\004\020\005" +
    "\016\006\022\024\032\036\025\037\030\055\024\001\002" +
    "\000\020\004\020\005\016\006\022\024\032\036\025\037" +
    "\030\055\024\001\002\000\020\004\020\005\016\006\022" +
    "\024\032\036\025\037\030\055\024\001\002\000\020\004" +
    "\020\005\016\006\022\024\032\036\025\037\030\055\024" +
    "\001\002\000\020\004\020\005\016\006\022\024\032\036" +
    "\025\037\030\055\024\001\002\000\112\004\uffe2\005\uffe2" +
    "\006\uffe2\007\uffe2\011\uffe2\012\uffe2\013\uffe2\014\uffe2\015" +
    "\uffe2\016\uffe2\017\042\020\034\021\040\022\045\023\037" +
    "\024\uffe2\025\uffe2\027\uffe2\030\uffe2\031\uffe2\032\uffe2\033" +
    "\uffe2\034\uffe2\035\uffe2\036\uffe2\037\uffe2\040\uffe2\042\uffe2" +
    "\044\uffe2\045\uffe2\046\uffe2\047\uffe2\050\uffe2\052\uffe2\054" +
    "\uffe2\055\uffe2\001\002\000\112\004\uffe0\005\uffe0\006\uffe0" +
    "\007\uffe0\011\uffe0\012\uffe0\013\uffe0\014\uffe0\015\uffe0\016" +
    "\uffe0\017\042\020\034\021\040\022\045\023\037\024\uffe0" +
    "\025\uffe0\027\uffe0\030\uffe0\031\uffe0\032\uffe0\033\uffe0\034" +
    "\uffe0\035\uffe0\036\uffe0\037\uffe0\040\uffe0\042\uffe0\044\uffe0" +
    "\045\uffe0\046\uffe0\047\uffe0\050\uffe0\052\uffe0\054\uffe0\055" +
    "\uffe0\001\002\000\112\004\uffe5\005\uffe5\006\uffe5\007\uffe5" +
    "\011\uffe5\012\uffe5\013\uffe5\014\uffe5\015\uffe5\016\uffe5\017" +
    "\uffe5\020\uffe5\021\uffe5\022\uffe5\023\uffe5\024\uffe5\025\uffe5" +
    "\027\uffe5\030\uffe5\031\uffe5\032\uffe5\033\uffe5\034\uffe5\035" +
    "\uffe5\036\uffe5\037\uffe5\040\uffe5\042\uffe5\044\uffe5\045\uffe5" +
    "\046\uffe5\047\uffe5\050\uffe5\052\uffe5\054\uffe5\055\uffe5\001" +
    "\002\000\112\004\uffdf\005\uffdf\006\uffdf\007\uffdf\011\uffdf" +
    "\012\uffdf\013\uffdf\014\uffdf\015\uffdf\016\uffdf\017\042\020" +
    "\034\021\040\022\045\023\037\024\uffdf\025\uffdf\027\uffdf" +
    "\030\uffdf\031\uffdf\032\uffdf\033\uffdf\034\uffdf\035\uffdf\036" +
    "\uffdf\037\uffdf\040\uffdf\042\uffdf\044\uffdf\045\uffdf\046\uffdf" +
    "\047\uffdf\050\uffdf\052\uffdf\054\uffdf\055\uffdf\001\002\000" +
    "\112\004\uffde\005\uffde\006\uffde\007\uffde\011\uffde\012\uffde" +
    "\013\uffde\014\uffde\015\uffde\016\uffde\017\042\020\034\021" +
    "\040\022\045\023\037\024\uffde\025\uffde\027\uffde\030\uffde" +
    "\031\uffde\032\uffde\033\uffde\034\uffde\035\uffde\036\uffde\037" +
    "\uffde\040\uffde\042\uffde\044\uffde\045\uffde\046\uffde\047\uffde" +
    "\050\uffde\052\uffde\054\uffde\055\uffde\001\002\000\112\004" +
    "\uffe8\005\uffe8\006\uffe8\007\uffe8\011\uffe8\012\uffe8\013\uffe8" +
    "\014\uffe8\015\uffe8\016\uffe8\017\uffe8\020\uffe8\021\040\022" +
    "\045\023\037\024\uffe8\025\uffe8\027\uffe8\030\uffe8\031\uffe8" +
    "\032\uffe8\033\uffe8\034\uffe8\035\uffe8\036\uffe8\037\uffe8\040" +
    "\uffe8\042\uffe8\044\uffe8\045\uffe8\046\uffe8\047\uffe8\050\uffe8" +
    "\052\uffe8\054\uffe8\055\uffe8\001\002\000\112\004\uffe3\005" +
    "\uffe3\006\uffe3\007\uffe3\011\uffe3\012\uffe3\013\uffe3\014\uffe3" +
    "\015\uffe3\016\uffe3\017\042\020\034\021\040\022\045\023" +
    "\037\024\uffe3\025\uffe3\027\uffe3\030\uffe3\031\uffe3\032\uffe3" +
    "\033\uffe3\034\uffe3\035\uffe3\036\uffe3\037\uffe3\040\uffe3\042" +
    "\uffe3\044\uffe3\045\uffe3\046\uffe3\047\uffe3\050\uffe3\052\uffe3" +
    "\054\uffe3\055\uffe3\001\002\000\112\004\uffe6\005\uffe6\006" +
    "\uffe6\007\uffe6\011\uffe6\012\uffe6\013\uffe6\014\uffe6\015\uffe6" +
    "\016\uffe6\017\uffe6\020\uffe6\021\uffe6\022\uffe6\023\uffe6\024" +
    "\uffe6\025\uffe6\027\uffe6\030\uffe6\031\uffe6\032\uffe6\033\uffe6" +
    "\034\uffe6\035\uffe6\036\uffe6\037\uffe6\040\uffe6\042\uffe6\044" +
    "\uffe6\045\uffe6\046\uffe6\047\uffe6\050\uffe6\052\uffe6\054\uffe6" +
    "\055\uffe6\001\002\000\112\004\uffe4\005\uffe4\006\uffe4\007" +
    "\uffe4\011\uffe4\012\uffe4\013\uffe4\014\uffe4\015\uffe4\016\uffe4" +
    "\017\uffe4\020\uffe4\021\uffe4\022\uffe4\023\uffe4\024\uffe4\025" +
    "\uffe4\027\uffe4\030\uffe4\031\uffe4\032\uffe4\033\uffe4\034\uffe4" +
    "\035\uffe4\036\uffe4\037\uffe4\040\uffe4\042\uffe4\044\uffe4\045" +
    "\uffe4\046\uffe4\047\uffe4\050\uffe4\052\uffe4\054\uffe4\055\uffe4" +
    "\001\002\000\112\004\uffe1\005\uffe1\006\uffe1\007\uffe1\011" +
    "\uffe1\012\uffe1\013\uffe1\014\uffe1\015\uffe1\016\uffe1\017\042" +
    "\020\034\021\040\022\045\023\037\024\uffe1\025\uffe1\027" +
    "\uffe1\030\uffe1\031\uffe1\032\uffe1\033\uffe1\034\uffe1\035\uffe1" +
    "\036\uffe1\037\uffe1\040\uffe1\042\uffe1\044\uffe1\045\uffe1\046" +
    "\uffe1\047\uffe1\050\uffe1\052\uffe1\054\uffe1\055\uffe1\001\002" +
    "\000\112\004\uffe7\005\uffe7\006\uffe7\007\uffe7\011\uffe7\012" +
    "\uffe7\013\uffe7\014\uffe7\015\uffe7\016\uffe7\017\uffe7\020\uffe7" +
    "\021\040\022\045\023\037\024\uffe7\025\uffe7\027\uffe7\030" +
    "\uffe7\031\uffe7\032\uffe7\033\uffe7\034\uffe7\035\uffe7\036\uffe7" +
    "\037\uffe7\040\uffe7\042\uffe7\044\uffe7\045\uffe7\046\uffe7\047" +
    "\uffe7\050\uffe7\052\uffe7\054\uffe7\055\uffe7\001\002\000\026" +
    "\004\020\005\016\006\022\024\032\036\025\037\030\040" +
    "\026\047\021\050\017\055\024\001\002\000\062\004\ufffc" +
    "\005\ufffc\006\ufffc\007\ufffc\011\ufffc\012\ufffc\014\ufffc\015" +
    "\ufffc\016\ufffc\024\ufffc\025\ufffc\027\ufffc\036\ufffc\037\ufffc" +
    "\040\ufffc\042\ufffc\044\ufffc\045\ufffc\046\ufffc\047\ufffc\050" +
    "\ufffc\052\ufffc\054\ufffc\055\ufffc\001\002\000\026\004\020" +
    "\005\016\006\022\024\032\036\025\037\030\040\026\047" +
    "\021\050\017\055\024\001\002\000\062\004\ufff6\005\ufff6" +
    "\006\ufff6\007\ufff6\011\ufff6\012\ufff6\014\ufff6\015\ufff6\016" +
    "\ufff6\024\ufff6\025\ufff6\027\ufff6\036\ufff6\037\ufff6\040\ufff6" +
    "\042\ufff6\044\ufff6\045\ufff6\046\ufff6\047\ufff6\050\ufff6\052" +
    "\ufff6\054\ufff6\055\ufff6\001\002\000\026\004\020\005\016" +
    "\006\022\024\032\036\025\037\030\040\026\047\021\050" +
    "\017\055\024\001\002\000\012\011\uffc6\012\uffc6\014\071" +
    "\052\uffc6\001\002\000\054\004\uffc7\005\uffc7\006\uffc7\007" +
    "\uffc7\011\uffc7\012\uffc7\015\uffc7\016\uffc7\024\uffc7\027\uffc7" +
    "\036\uffc7\037\uffc7\040\uffc7\042\uffc7\044\uffc7\045\uffc7\047" +
    "\uffc7\050\uffc7\052\uffc7\054\uffc7\055\uffc7\001\002\000\010" +
    "\011\uffff\012\uffff\052\uffff\001\002\000\010\011\ufffd\012" +
    "\010\052\ufffd\001\002\000\006\011\ufffe\052\ufffe\001\002" +
    "\000\026\004\020\005\016\006\022\024\032\036\025\037" +
    "\030\040\026\047\021\050\017\055\024\001\002\000\062" +
    "\004\ufff5\005\ufff5\006\ufff5\007\ufff5\011\ufff5\012\ufff5\014" +
    "\ufff5\015\ufff5\016\ufff5\024\ufff5\025\ufff5\027\ufff5\036\ufff5" +
    "\037\ufff5\040\ufff5\042\ufff5\044\ufff5\045\ufff5\046\ufff5\047" +
    "\ufff5\050\ufff5\052\ufff5\054\ufff5\055\ufff5\001\002\000\026" +
    "\004\020\005\016\006\022\024\032\036\025\037\030\040" +
    "\026\047\021\050\017\055\024\001\002\000\062\004\ufff7" +
    "\005\ufff7\006\ufff7\007\ufff7\011\ufff7\012\ufff7\014\ufff7\015" +
    "\ufff7\016\ufff7\024\ufff7\025\ufff7\027\ufff7\036\ufff7\037\ufff7" +
    "\040\ufff7\042\ufff7\044\ufff7\045\ufff7\046\ufff7\047\ufff7\050" +
    "\ufff7\052\ufff7\054\ufff7\055\ufff7\001\002\000\004\002\001" +
    "\001\002\000\044\004\ufff3\005\ufff3\006\ufff3\007\ufff3\016" +
    "\ufff3\024\ufff3\027\ufff3\036\ufff3\037\ufff3\040\ufff3\042\ufff3" +
    "\044\ufff3\045\ufff3\047\ufff3\050\ufff3\054\ufff3\055\ufff3\001" +
    "\002\000\044\004\020\005\016\006\022\007\111\016\112" +
    "\024\032\027\106\036\025\037\030\040\026\042\114\044" +
    "\110\045\105\047\021\050\017\054\113\055\024\001\002" +
    "\000\012\040\170\046\167\047\171\050\172\001\002\000" +
    "\004\024\161\001\002\000\004\002\000\001\002\000\044" +
    "\004\ufff4\005\ufff4\006\ufff4\007\ufff4\016\ufff4\024\ufff4\027" +
    "\ufff4\036\ufff4\037\ufff4\040\ufff4\042\ufff4\044\ufff4\045\ufff4" +
    "\047\ufff4\050\ufff4\054\ufff4\055\ufff4\001\002\000\004\024" +
    "\155\001\002\000\044\004\uffea\005\uffea\006\uffea\007\uffea" +
    "\016\uffea\024\uffea\027\uffea\036\uffea\037\uffea\040\uffea\042" +
    "\uffea\044\uffea\045\uffea\047\uffea\050\uffea\054\uffea\055\uffea" +
    "\001\002\000\004\024\150\001\002\000\044\004\uffd2\005" +
    "\uffd2\006\uffd2\007\uffd2\016\uffd2\024\uffd2\027\uffd2\036\uffd2" +
    "\037\uffd2\040\uffd2\042\uffd2\044\uffd2\045\uffd2\047\uffd2\050" +
    "\uffd2\054\uffd2\055\uffd2\001\002\000\026\004\020\005\016" +
    "\006\022\024\032\036\025\037\030\040\026\047\021\050" +
    "\017\055\024\001\002\000\044\004\uffe9\005\uffe9\006\uffe9" +
    "\007\uffe9\016\uffe9\024\uffe9\027\uffe9\036\uffe9\037\uffe9\040" +
    "\uffe9\042\uffe9\044\uffe9\045\uffe9\047\uffe9\050\uffe9\054\uffe9" +
    "\055\uffe9\001\002\000\046\004\uffc6\005\uffc6\006\uffc6\007" +
    "\uffc6\014\071\016\uffc6\024\uffc6\027\uffc6\036\uffc6\037\uffc6" +
    "\040\uffc6\042\uffc6\044\uffc6\045\uffc6\047\uffc6\050\uffc6\054" +
    "\uffc6\055\uffc6\001\002\000\050\004\uffc6\005\uffc6\006\uffc6" +
    "\007\uffc6\014\071\015\131\016\uffc6\024\uffc6\027\uffc6\036" +
    "\uffc6\037\uffc6\040\130\042\uffc6\044\uffc6\045\uffc6\047\133" +
    "\050\134\054\uffc6\055\uffc6\001\002\000\100\004\ufffb\005" +
    "\ufffb\006\ufffb\007\ufffb\013\063\014\ufffb\015\121\016\ufffb" +
    "\017\042\020\034\021\040\022\045\023\037\024\ufffb\027" +
    "\ufffb\030\041\031\047\032\035\033\044\034\046\035\043" +
    "\036\ufffb\037\ufffb\040\ufffb\042\ufffb\044\ufffb\045\ufffb\047" +
    "\ufffb\050\ufffb\054\ufffb\055\ufffb\001\002\000\020\004\020" +
    "\005\016\006\022\024\032\036\025\037\030\055\024\001" +
    "\002\000\032\013\123\017\042\020\034\021\040\022\045" +
    "\023\037\030\041\031\047\032\035\033\044\034\046\035" +
    "\043\001\002\000\020\004\020\005\016\006\022\024\032" +
    "\036\025\037\030\055\024\001\002\000\046\004\uffc9\005" +
    "\uffc9\006\uffc9\007\uffc9\014\uffc9\016\uffc9\024\uffc9\027\uffc9" +
    "\036\uffc9\037\uffc9\040\uffc9\042\uffc9\044\uffc9\045\uffc9\047" +
    "\uffc9\050\uffc9\054\uffc9\055\uffc9\001\002\000\032\015\126" +
    "\017\042\020\034\021\040\022\045\023\037\030\041\031" +
    "\047\032\035\033\044\034\046\035\043\001\002\000\020" +
    "\004\020\005\016\006\022\024\032\036\025\037\030\055" +
    "\024\001\002\000\076\004\uffc8\005\uffc8\006\uffc8\007\uffc8" +
    "\013\123\014\uffc8\016\uffc8\017\042\020\034\021\040\022" +
    "\045\023\037\024\uffc8\027\uffc8\030\041\031\047\032\035" +
    "\033\044\034\046\035\043\036\uffc8\037\uffc8\040\uffc8\042" +
    "\uffc8\044\uffc8\045\uffc8\047\uffc8\050\uffc8\054\uffc8\055\uffc8" +
    "\001\002\000\050\004\uffc6\005\uffc6\006\uffc6\007\uffc6\014" +
    "\071\015\uffc6\016\uffc6\024\uffc6\027\uffc6\036\uffc6\037\uffc6" +
    "\040\uffc6\042\uffc6\044\uffc6\045\uffc6\047\uffc6\050\uffc6\054" +
    "\uffc6\055\uffc6\001\002\000\026\004\020\005\016\006\022" +
    "\024\032\036\025\037\030\040\026\047\021\050\017\055" +
    "\024\001\002\000\044\004\uffd0\005\uffd0\006\uffd0\007\uffd0" +
    "\016\uffd0\024\uffd0\027\uffd0\036\uffd0\037\uffd0\040\uffd0\042" +
    "\uffd0\044\uffd0\045\uffd0\047\uffd0\050\uffd0\054\uffd0\055\uffd0" +
    "\001\002\000\050\004\uffc6\005\uffc6\006\uffc6\007\uffc6\014" +
    "\071\015\uffc6\016\uffc6\024\uffc6\027\uffc6\036\uffc6\037\uffc6" +
    "\040\uffc6\042\uffc6\044\uffc6\045\uffc6\047\uffc6\050\uffc6\054" +
    "\uffc6\055\uffc6\001\002\000\050\004\uffca\005\uffca\006\uffca" +
    "\007\uffca\014\uffca\015\136\016\uffca\024\uffca\027\uffca\036" +
    "\uffca\037\uffca\040\uffca\042\uffca\044\uffca\045\uffca\047\uffca" +
    "\050\uffca\054\uffca\055\uffca\001\002\000\046\004\uffc6\005" +
    "\uffc6\006\uffc6\007\uffc6\014\071\016\uffc6\024\uffc6\027\uffc6" +
    "\036\uffc6\037\uffc6\040\uffc6\042\uffc6\044\uffc6\045\uffc6\047" +
    "\uffc6\050\uffc6\054\uffc6\055\uffc6\001\002\000\026\004\020" +
    "\005\016\006\022\024\032\036\025\037\030\040\026\047" +
    "\021\050\017\055\024\001\002\000\046\004\uffcb\005\uffcb" +
    "\006\uffcb\007\uffcb\014\uffcb\016\uffcb\024\uffcb\027\uffcb\036" +
    "\uffcb\037\uffcb\040\uffcb\042\uffcb\044\uffcb\045\uffcb\047\uffcb" +
    "\050\uffcb\054\uffcb\055\uffcb\001\002\000\044\004\uffef\005" +
    "\uffef\006\uffef\007\uffef\016\uffef\024\uffef\027\uffef\036\uffef" +
    "\037\uffef\040\uffef\042\uffef\044\uffef\045\uffef\047\uffef\050" +
    "\uffef\054\uffef\055\uffef\001\002\000\046\004\uffca\005\uffca" +
    "\006\uffca\007\uffca\015\136\016\uffca\024\uffca\027\uffca\036" +
    "\uffca\037\uffca\040\uffca\042\uffca\044\uffca\045\uffca\047\uffca" +
    "\050\uffca\054\uffca\055\uffca\001\002\000\044\004\uffed\005" +
    "\uffed\006\uffed\007\uffed\016\uffed\024\uffed\027\uffed\036\uffed" +
    "\037\uffed\040\uffed\042\uffed\044\uffed\045\uffed\047\uffed\050" +
    "\uffed\054\uffed\055\uffed\001\002\000\046\004\uffc6\005\uffc6" +
    "\006\uffc6\007\uffc6\014\071\016\uffc6\024\uffc6\027\uffc6\036" +
    "\uffc6\037\uffc6\040\uffc6\042\uffc6\044\uffc6\045\uffc6\047\uffc6" +
    "\050\uffc6\054\uffc6\055\uffc6\001\002\000\044\004\uffec\005" +
    "\uffec\006\uffec\007\uffec\016\uffec\024\uffec\027\uffec\036\uffec" +
    "\037\uffec\040\uffec\042\uffec\044\uffec\045\uffec\047\uffec\050" +
    "\uffec\054\uffec\055\uffec\001\002\000\046\004\uffca\005\uffca" +
    "\006\uffca\007\uffca\015\136\016\uffca\024\uffca\027\uffca\036" +
    "\uffca\037\uffca\040\uffca\042\uffca\044\uffca\045\uffca\047\uffca" +
    "\050\uffca\054\uffca\055\uffca\001\002\000\044\004\uffee\005" +
    "\uffee\006\uffee\007\uffee\016\uffee\024\uffee\027\uffee\036\uffee" +
    "\037\uffee\040\uffee\042\uffee\044\uffee\045\uffee\047\uffee\050" +
    "\uffee\054\uffee\055\uffee\001\002\000\044\004\uffcf\005\uffcf" +
    "\006\uffcf\007\uffcf\016\uffcf\024\uffcf\027\uffcf\036\uffcf\037" +
    "\uffcf\040\uffcf\042\uffcf\044\uffcf\045\uffcf\047\uffcf\050\uffcf" +
    "\054\uffcf\055\uffcf\001\002\000\026\004\020\005\016\006" +
    "\022\024\032\036\025\037\030\040\026\047\021\050\017" +
    "\055\024\001\002\000\006\007\152\025\153\001\002\000" +
    "\044\004\uffd1\005\uffd1\006\uffd1\007\uffd1\016\uffd1\024\uffd1" +
    "\027\uffd1\036\uffd1\037\uffd1\040\uffd1\042\uffd1\044\uffd1\045" +
    "\uffd1\047\uffd1\050\uffd1\054\uffd1\055\uffd1\001\002\000\046" +
    "\004\uffc6\005\uffc6\006\uffc6\007\uffc6\014\071\016\uffc6\024" +
    "\uffc6\027\uffc6\036\uffc6\037\uffc6\040\uffc6\042\uffc6\044\uffc6" +
    "\045\uffc6\047\uffc6\050\uffc6\054\uffc6\055\uffc6\001\002\000" +
    "\044\004\ufff2\005\ufff2\006\ufff2\007\ufff2\016\ufff2\024\ufff2" +
    "\027\ufff2\036\ufff2\037\ufff2\040\ufff2\042\ufff2\044\ufff2\045" +
    "\ufff2\047\ufff2\050\ufff2\054\ufff2\055\ufff2\001\002\000\026" +
    "\004\020\005\016\006\022\024\032\036\025\037\030\040" +
    "\026\047\021\050\017\055\024\001\002\000\004\025\157" +
    "\001\002\000\046\004\uffc6\005\uffc6\006\uffc6\007\uffc6\014" +
    "\071\016\uffc6\024\uffc6\027\uffc6\036\uffc6\037\uffc6\040\uffc6" +
    "\042\uffc6\044\uffc6\045\uffc6\047\uffc6\050\uffc6\054\uffc6\055" +
    "\uffc6\001\002\000\044\004\ufff1\005\ufff1\006\ufff1\007\ufff1" +
    "\016\ufff1\024\ufff1\027\ufff1\036\ufff1\037\ufff1\040\ufff1\042" +
    "\ufff1\044\ufff1\045\ufff1\047\ufff1\050\ufff1\054\ufff1\055\ufff1" +
    "\001\002\000\004\006\162\001\002\000\004\013\163\001" +
    "\002\000\026\004\020\005\016\006\022\024\032\036\025" +
    "\037\030\040\026\047\021\050\017\055\024\001\002\000" +
    "\004\025\165\001\002\000\046\004\uffc6\005\uffc6\006\uffc6" +
    "\007\uffc6\014\071\016\uffc6\024\uffc6\027\uffc6\036\uffc6\037" +
    "\uffc6\040\uffc6\042\uffc6\044\uffc6\045\uffc6\047\uffc6\050\uffc6" +
    "\054\uffc6\055\uffc6\001\002\000\044\004\ufff0\005\ufff0\006" +
    "\ufff0\007\ufff0\016\ufff0\024\ufff0\027\ufff0\036\ufff0\037\ufff0" +
    "\040\ufff0\042\ufff0\044\ufff0\045\ufff0\047\ufff0\050\ufff0\054" +
    "\ufff0\055\ufff0\001\002\000\026\004\020\005\016\006\022" +
    "\024\032\036\025\037\030\040\026\047\021\050\017\055" +
    "\024\001\002\000\046\004\uffc6\005\uffc6\006\uffc6\007\uffc6" +
    "\014\071\016\uffc6\024\uffc6\027\uffc6\036\uffc6\037\uffc6\040" +
    "\uffc6\042\uffc6\044\uffc6\045\uffc6\047\uffc6\050\uffc6\054\uffc6" +
    "\055\uffc6\001\002\000\046\004\uffc6\005\uffc6\006\uffc6\007" +
    "\uffc6\014\071\016\uffc6\024\uffc6\027\uffc6\036\uffc6\037\uffc6" +
    "\040\uffc6\042\uffc6\044\uffc6\045\uffc6\047\uffc6\050\uffc6\054" +
    "\uffc6\055\uffc6\001\002\000\046\004\uffc6\005\uffc6\006\uffc6" +
    "\007\uffc6\014\071\016\uffc6\024\uffc6\027\uffc6\036\uffc6\037" +
    "\uffc6\040\uffc6\042\uffc6\044\uffc6\045\uffc6\047\uffc6\050\uffc6" +
    "\054\uffc6\055\uffc6\001\002\000\044\004\uffce\005\uffce\006" +
    "\uffce\007\uffce\016\uffce\024\uffce\027\uffce\036\uffce\037\uffce" +
    "\040\uffce\042\uffce\044\uffce\045\uffce\047\uffce\050\uffce\054" +
    "\uffce\055\uffce\001\002\000\044\004\uffcc\005\uffcc\006\uffcc" +
    "\007\uffcc\016\uffcc\024\uffcc\027\uffcc\036\uffcc\037\uffcc\040" +
    "\uffcc\042\uffcc\044\uffcc\045\uffcc\047\uffcc\050\uffcc\054\uffcc" +
    "\055\uffcc\001\002\000\044\004\uffcd\005\uffcd\006\uffcd\007" +
    "\uffcd\016\uffcd\024\uffcd\027\uffcd\036\uffcd\037\uffcd\040\uffcd" +
    "\042\uffcd\044\uffcd\045\uffcd\047\uffcd\050\uffcd\054\uffcd\055" +
    "\uffcd\001\002\000\046\004\uffc6\005\uffc6\006\uffc6\007\uffc6" +
    "\014\071\016\uffc6\024\uffc6\027\uffc6\036\uffc6\037\uffc6\040" +
    "\uffc6\042\uffc6\044\uffc6\045\uffc6\047\uffc6\050\uffc6\054\uffc6" +
    "\055\uffc6\001\002\000\044\004\uffeb\005\uffeb\006\uffeb\007" +
    "\uffeb\016\uffeb\024\uffeb\027\uffeb\036\uffeb\037\uffeb\040\uffeb" +
    "\042\uffeb\044\uffeb\045\uffeb\047\uffeb\050\uffeb\054\uffeb\055" +
    "\uffeb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\175\000\006\002\004\007\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\003\010" +
    "\001\001\000\010\012\030\013\026\014\022\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\012\032\013\026\001\001\000\002\001" +
    "\001\000\006\012\061\013\026\001\001\000\006\012\060" +
    "\013\026\001\001\000\002\001\001\000\006\012\057\013" +
    "\026\001\001\000\006\012\056\013\026\001\001\000\006" +
    "\012\055\013\026\001\001\000\006\012\054\013\026\001" +
    "\001\000\006\012\053\013\026\001\001\000\006\012\052" +
    "\013\026\001\001\000\006\012\051\013\026\001\001\000" +
    "\006\012\050\013\026\001\001\000\006\012\047\013\026" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\012\030\013\026" +
    "\014\063\001\001\000\002\001\001\000\010\012\030\013" +
    "\026\014\065\001\001\000\002\001\001\000\010\012\030" +
    "\013\026\014\067\001\001\000\004\006\071\001\001\000" +
    "\002\001\001\000\004\016\072\001\001\000\004\003\073" +
    "\001\001\000\002\001\001\000\010\012\030\013\026\014" +
    "\075\001\001\000\002\001\001\000\010\012\030\013\026" +
    "\014\077\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\004\102\001\001\000\014\005\106\010\114\012\030" +
    "\013\026\014\103\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\011\115\012\117\013\026\014\116\001\001\000\002" +
    "\001\001\000\004\006\146\001\001\000\004\006\131\001" +
    "\001\000\002\001\001\000\006\012\121\013\026\001\001" +
    "\000\002\001\001\000\010\011\123\012\124\013\026\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\012\126" +
    "\013\026\001\001\000\002\001\001\000\004\006\144\001" +
    "\001\000\010\012\030\013\026\014\142\001\001\000\002" +
    "\001\001\000\004\006\140\001\001\000\004\015\134\001" +
    "\001\000\004\006\137\001\001\000\010\012\030\013\026" +
    "\014\136\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\015\141\001\001\000\002\001\001\000\004\006\143" +
    "\001\001\000\002\001\001\000\004\015\145\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\012\030\013\026" +
    "\014\150\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\153\001\001\000\002\001\001\000\010\012\030" +
    "\013\026\014\155\001\001\000\002\001\001\000\004\006" +
    "\157\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\012\030\013\026\014\163\001\001\000" +
    "\002\001\001\000\004\006\165\001\001\000\002\001\001" +
    "\000\010\012\030\013\026\014\175\001\001\000\004\006" +
    "\174\001\001\000\004\006\173\001\001\000\004\006\172" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\006\176\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


  public static HashMap variables = new HashMap<String, SimpleEntry<Integer, String>>();
  public static HashMap constantes = new HashMap<String, SimpleEntry<Integer, String>>();
  Boolean err = false;

  public static SimpleEntry<Integer, String> valorde(SimpleEntry<Integer, String> id){
    SimpleEntry<Integer, String> r = null;
    if(id.getKey()==3){
      if(constantes.containsKey(id.getValue()))
        r = ((SimpleEntry<Integer, String>) constantes.get(id.getValue()));
      else if(variables.containsKey(id.getValue()))
        r = ((SimpleEntry<Integer, String>) variables.get(id.getValue()));
    } else
      r = id;
    return r;
  }

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // el ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("el",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // el ::= PC 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("el",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // la ::= v IGUAL v COMA v IGUAL v 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("la",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // la ::= v IGUAL v COMA la 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("la",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // as ::= 
            {
              ArrayList<SimpleEntry<Integer,String>> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("as",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // as ::= IGUAL lv 
            {
              ArrayList<SimpleEntry<Integer,String>> RESULT =null;
		int lvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<SimpleEntry<Integer,String>> lv = (ArrayList<SimpleEntry<Integer,String>>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = lv; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("as",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // se ::= lv BOOL el 
            {
              String RESULT =null;
		 if(!err) GoPL.out.println("ERROR"); err = true; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("se",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // se ::= lv STRING el 
            {
              String RESULT =null;
		 if(!err) GoPL.out.println("ERROR"); err = true; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("se",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // se ::= lv INT el 
            {
              String RESULT =null;
		 if(!err) GoPL.out.println("ERROR"); err = true; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("se",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // se ::= VAR la el 
            {
              String RESULT =null;
		 if(!err) GoPL.out.println("ERROR"); err = true; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("se",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // se ::= VAR lv el 
            {
              String RESULT =null;
		 if(!err) GoPL.out.println("ERROR"); err = true; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("se",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // se ::= PRINT AP lv COMENT 
            {
              String RESULT =null;
		int lvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<SimpleEntry<Integer,String>> lv = (ArrayList<SimpleEntry<Integer,String>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                          GoPL.out.println("ERROR\n(comentario mal formado)\n" +
                          "// no es preciso\n// identificar el tipo");
                          err = true;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("se",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // se ::= COMENTE 
            {
              String RESULT =null;
		 
                          GoPL.out.println("ERROR\n(comentario mal formado)\n" +
                          "// no es preciso\n// identificar el tipo");
                          err = true;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("se",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // in ::= PACKAGE IMPORTS lc FUNC MAINE 
            {
              String RESULT =null;
		 
                                        GoPL.out.println("ERROR\n(en función main)\n" +
                                        "// no es preciso\n// identificar el tipo");
                                        err = true; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("in",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // in ::= PACKAGE IMPORTS lc MAIN 
            {
              String RESULT =null;
		 
                                        GoPL.out.println("ERROR\n(en función main)\n" +
                                        "// no es preciso\n// identificar el tipo");
                                        err = true; 
                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("in",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // in ::= PACKAGE IMPORTS lc FUNC MAIN 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("in",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // v ::= IDENTE 
            {
              SimpleEntry<Integer,String> RESULT =null;
		 if(!err) GoPL.out.println("ERROR");  err = true; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("v",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // v ::= IDENT 
            {
              SimpleEntry<Integer,String> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new SimpleEntry<Integer, String>(3, i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("v",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // v ::= op 
            {
              SimpleEntry<Integer,String> RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SimpleEntry<Integer,String> o = (SimpleEntry<Integer,String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = o; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("v",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // v ::= FALSE 
            {
              SimpleEntry<Integer,String> RESULT =null;
		 RESULT = new SimpleEntry<Integer, String>(2, "false"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("v",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // v ::= TRUE 
            {
              SimpleEntry<Integer,String> RESULT =null;
		 RESULT = new SimpleEntry<Integer, String>(2, "true"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("v",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // v ::= STR 
            {
              SimpleEntry<Integer,String> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SimpleEntry<Integer,String> s = (SimpleEntry<Integer,String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("v",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // v ::= NUM 
            {
              SimpleEntry<Integer,String> RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SimpleEntry<Integer,String> n = (SimpleEntry<Integer,String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("v",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // op ::= AP v CP 
            {
              SimpleEntry<Integer,String> RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SimpleEntry<Integer,String> n = (SimpleEntry<Integer,String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // op ::= v MAYORIG v 
            {
              SimpleEntry<Integer,String> RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SimpleEntry<Integer,String> n1 = (SimpleEntry<Integer,String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SimpleEntry<Integer,String> n2 = (SimpleEntry<Integer,String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        n1 = valorde(n1); n2 = valorde(n2);
                        if(n1.getKey() == 0 && n1.getKey() == 0)
                        RESULT = new SimpleEntry<Integer, String>(2, 
                        String.valueOf(Integer.parseInt(n1.getValue()) >= Integer.parseInt(n2.getValue())));
                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // op ::= v MAYOR v 
            {
              SimpleEntry<Integer,String> RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SimpleEntry<Integer,String> n1 = (SimpleEntry<Integer,String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SimpleEntry<Integer,String> n2 = (SimpleEntry<Integer,String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        n1 = valorde(n1); n2 = valorde(n2);
                        if(n1.getKey() == 0 && n1.getKey() == 0)
                        RESULT = new SimpleEntry<Integer, String>(2, 
                        String.valueOf(Integer.parseInt(n1.getValue()) > Integer.parseInt(n2.getValue())));
                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // op ::= v MENORIG v 
            {
              SimpleEntry<Integer,String> RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SimpleEntry<Integer,String> n1 = (SimpleEntry<Integer,String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SimpleEntry<Integer,String> n2 = (SimpleEntry<Integer,String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        n1 = valorde(n1); n2 = valorde(n2);
                        if(n1.getKey() == 0 && n1.getKey() == 0)
                        RESULT = new SimpleEntry<Integer, String>(2, 
                        String.valueOf(Integer.parseInt(n1.getValue()) <= Integer.parseInt(n2.getValue())));
                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // op ::= v MENOR v 
            {
              SimpleEntry<Integer,String> RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SimpleEntry<Integer,String> n1 = (SimpleEntry<Integer,String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SimpleEntry<Integer,String> n2 = (SimpleEntry<Integer,String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		n1 = valorde(n1); n2 = valorde(n2);
                        if(n1.getKey() == 0 && n1.getKey() == 0)
                        RESULT = new SimpleEntry<Integer, String>(2, 
                        String.valueOf(Integer.parseInt(n1.getValue()) < Integer.parseInt(n2.getValue())));
                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // op ::= v NE v 
            {
              SimpleEntry<Integer,String> RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SimpleEntry<Integer,String> n1 = (SimpleEntry<Integer,String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SimpleEntry<Integer,String> n2 = (SimpleEntry<Integer,String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        n1 = valorde(n1); n2 = valorde(n2);
                        if(n1.getKey() == 2 && n1.getKey() == 2)
                        RESULT = new SimpleEntry<Integer, String>(2, 
                        String.valueOf(Integer.parseInt(n1.getValue()) != Integer.parseInt(n2.getValue())));
                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // op ::= v EQ v 
            {
              SimpleEntry<Integer,String> RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SimpleEntry<Integer,String> n1 = (SimpleEntry<Integer,String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SimpleEntry<Integer,String> n2 = (SimpleEntry<Integer,String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        n1 = valorde(n1); n2 = valorde(n2);
                        if((n1.getKey() == 0) && n2.getKey() == 0)
                        RESULT = new SimpleEntry<Integer, String>(2,
                        String.valueOf(Integer.parseInt(n1.getValue()) == Integer.parseInt(n2.getValue())));
                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // op ::= v MOD v 
            {
              SimpleEntry<Integer,String> RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SimpleEntry<Integer,String> n1 = (SimpleEntry<Integer,String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SimpleEntry<Integer,String> n2 = (SimpleEntry<Integer,String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        n1 = valorde(n1); n2 = valorde(n2);
                        if(n1.getKey() == 0 && n2.getKey() == 0)
                        RESULT = new SimpleEntry<Integer, String>(0, 
                        String.valueOf(Integer.parseInt(n1.getValue()) % Integer.parseInt(n2.getValue())));
                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // op ::= v DIV v 
            {
              SimpleEntry<Integer,String> RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SimpleEntry<Integer,String> n1 = (SimpleEntry<Integer,String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SimpleEntry<Integer,String> n2 = (SimpleEntry<Integer,String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        n1 = valorde(n1); n2 = valorde(n2);
                        if(n1.getKey() == 0 && n2.getKey() == 0)
                        RESULT = new SimpleEntry<Integer, String>(0, 
                        String.valueOf(Integer.parseInt(n1.getValue()) / Integer.parseInt(n2.getValue())));
                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // op ::= v POR v 
            {
              SimpleEntry<Integer,String> RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SimpleEntry<Integer,String> n1 = (SimpleEntry<Integer,String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SimpleEntry<Integer,String> n2 = (SimpleEntry<Integer,String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        n1 = valorde(n1); n2 = valorde(n2);
                        if(n1.getKey() == 0 && n2.getKey() == 0)
                        RESULT = new SimpleEntry<Integer, String>(0, 
                        String.valueOf(Integer.parseInt(n1.getValue()) * Integer.parseInt(n2.getValue())));
                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // op ::= v MENOS v 
            {
              SimpleEntry<Integer,String> RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SimpleEntry<Integer,String> n1 = (SimpleEntry<Integer,String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SimpleEntry<Integer,String> n2 = (SimpleEntry<Integer,String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        n1 = valorde(n1); n2 = valorde(n2);
                        if(n1.getKey() == 0 && n2.getKey() == 0)
                        RESULT = new SimpleEntry<Integer, String>(0, 
                        String.valueOf(Integer.parseInt(n1.getValue()) - Integer.parseInt(n2.getValue())));
                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // op ::= v MAS v 
            {
              SimpleEntry<Integer,String> RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SimpleEntry<Integer,String> n1 = (SimpleEntry<Integer,String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SimpleEntry<Integer,String> n2 = (SimpleEntry<Integer,String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        n1 = valorde(n1); n2 = valorde(n2);
                        if(n1.getKey() == 0 && n2.getKey() == 0)
                        RESULT = new SimpleEntry<Integer, String>(0, 
                        String.valueOf(Integer.parseInt(n1.getValue()) + Integer.parseInt(n2.getValue())));
                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // s ::= se 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // s ::= COMENT 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // s ::= lv DPIG lv el 
            {
              String RESULT =null;
		int lvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<SimpleEntry<Integer,String>> lv = (ArrayList<SimpleEntry<Integer,String>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<SimpleEntry<Integer,String>> as = (ArrayList<SimpleEntry<Integer,String>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		if(!err){
                                if(as==null){
                                  for(SimpleEntry<Integer, String> v : lv){
                                    if(v.getKey() == 3){
                                      variables.put(v.getValue(), new SimpleEntry<Integer, String>(0, "0"));
                                    }
                                  }
                                } else{
                                  if(lv.size() == as.size()){
                                    for(int i = 0; i < lv.size() ; i++){
                                      SimpleEntry<Integer, String> v = lv.get(i);
                                      SimpleEntry<Integer, String> a = as.get(i);
                                      variables.put(v.getValue(), new SimpleEntry<Integer, String>(a.getKey(), a.getValue()));
                                    }
                                  } else{
                                    GoPL.out.println("ERROR");
                                    err=true;
                                  }
                                }
                              }
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // s ::= VAR lv IGUAL lv el 
            {
              String RESULT =null;
		int lvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<SimpleEntry<Integer,String>> lv = (ArrayList<SimpleEntry<Integer,String>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<SimpleEntry<Integer,String>> as = (ArrayList<SimpleEntry<Integer,String>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		if(!err){
                                if(as==null){
                                  for(SimpleEntry<Integer, String> v : lv){
                                    if(v.getKey() == 3){
                                      variables.put(v.getValue(), new SimpleEntry<Integer, String>(0, "0"));
                                    }
                                  }
                                } else{
                                  if(lv.size() == as.size()){
                                    for(int i = 0; i < lv.size() ; i++){
                                      SimpleEntry<Integer, String> v = lv.get(i);
                                      SimpleEntry<Integer, String> a = as.get(i);
                                      variables.put(v.getValue(), new SimpleEntry<Integer, String>(a.getKey(), a.getValue()));
                                    }
                                  } else{
                                    GoPL.out.println("ERROR");
                                    err=true;
                                  }
                                }
                              }
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // s ::= VAR lv BOOL el as 
            {
              String RESULT =null;
		int lvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<SimpleEntry<Integer,String>> lv = (ArrayList<SimpleEntry<Integer,String>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int asright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<SimpleEntry<Integer,String>> as = (ArrayList<SimpleEntry<Integer,String>>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(!err){
                                if(as==null){
                                  for(SimpleEntry<Integer, String> v : lv){
                                    if(v.getKey() == 3){
                                      variables.put(v.getValue(), new SimpleEntry<Integer, String>(2, "false"));
                                    }
                                  }
                                } else{
                                  if(lv.size() == as.size()){
                                    for(int i = 0; i < lv.size() ; i++){
                                      SimpleEntry<Integer, String> v = lv.get(i);
                                      SimpleEntry<Integer, String> a = as.get(i);
                                      if(a.getKey()==2)
                                        variables.put(v.getValue(), new SimpleEntry<Integer, String>(a.getKey(), a.getValue()));
                                      else{
                                        GoPL.out.println("ERROR");
                                        err = true;
                                        break;
                                      }
                                    }
                                  } else{
                                    GoPL.out.println("ERROR");
                                    err=true;
                                  }
                                }
                              }
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // s ::= VAR lv STRING el as 
            {
              String RESULT =null;
		int lvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<SimpleEntry<Integer,String>> lv = (ArrayList<SimpleEntry<Integer,String>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int asright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<SimpleEntry<Integer,String>> as = (ArrayList<SimpleEntry<Integer,String>>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(!err){
                                if(as==null){
                                  for(SimpleEntry<Integer, String> v : lv){
                                    if(v.getKey() == 3){
                                      variables.put(v.getValue(), new SimpleEntry<Integer, String>(1, ""));
                                    }
                                  }
                                } else{
                                  if(lv.size() == as.size()){
                                    for(int i = 0; i < lv.size() ; i++){
                                      SimpleEntry<Integer, String> v = lv.get(i);
                                      SimpleEntry<Integer, String> a = as.get(i);
                                      if(a.getKey()==1)
                                        variables.put(v.getValue(), new SimpleEntry<Integer, String>(a.getKey(), a.getValue()));
                                      else{
                                        GoPL.out.println("ERROR");
                                        err = true;
                                        break;
                                      }
                                    }
                                  } else{
                                    GoPL.out.println("ERROR");
                                    err=true;
                                  }
                                }
                              }
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // s ::= VAR lv INT as el 
            {
              String RESULT =null;
		int lvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<SimpleEntry<Integer,String>> lv = (ArrayList<SimpleEntry<Integer,String>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<SimpleEntry<Integer,String>> as = (ArrayList<SimpleEntry<Integer,String>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		if(!err){
                                if(as==null){
                                  for(SimpleEntry<Integer, String> v : lv){
                                    if(v.getKey() == 3){
                                      variables.put(v.getValue(), new SimpleEntry<Integer, String>(0, "0"));
                                    }
                                  }
                                } else{
                                  if(lv.size() == as.size()){
                                    for(int i = 0; i < lv.size() ; i++){
                                      SimpleEntry<Integer, String> v = lv.get(i);
                                      SimpleEntry<Integer, String> a = as.get(i);
                                      if(a.getKey()==0)
                                        variables.put(v.getValue(), new SimpleEntry<Integer, String>(a.getKey(), a.getValue()));
                                      else{
                                        GoPL.out.println("ERROR");
                                        err = true;
                                        break;
                                      }
                                    }
                                  } else{
                                    GoPL.out.println("ERROR");
                                    err=true;
                                  }
                                }
                              }
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // s ::= PRINTF AP STR COMA lv CP el 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		SimpleEntry<Integer,String> s = (SimpleEntry<Integer,String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int lvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<SimpleEntry<Integer,String>> lv = (ArrayList<SimpleEntry<Integer,String>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                            if(!err){
                              String st = s.getValue();
                              int idxv = st.indexOf("%v");
                              int idxT = st.indexOf("%T");
                              int i = 0;
                              while(idxv > -1 || idxT > -1){
                                if(idxv > -1 && idxT > -1){
                                  if(idxv<idxT){
                                    st = st.substring(0, idxv) + valorde(lv.get(i)).getValue() + st.substring(idxv+2);
                                  } else{
                                    String tipo = "";
                                    if(valorde(lv.get(i)).getKey()==0) tipo = "int";
                                    else if(valorde(lv.get(i)).getKey()==1) tipo = "string";
                                    else if(valorde(lv.get(i)).getKey()==2) tipo = "bool";
                                    st = st.substring(0, idxT) + tipo + st.substring(idxT+2);
                                  }
                                } else if(idxv > -1){
                                  st = st.substring(0, idxv) + lv.get(i).getValue() + st.substring(idxv+2);
                                } else{
                                  String tipo = "";
                                  if(valorde(lv.get(i)).getKey()==0) tipo = "int";
                                  else if(valorde(lv.get(i)).getKey()==1) tipo = "string";
                                  else if(valorde(lv.get(i)).getKey()==2) tipo = "bool";
                                  st = st.substring(0, idxT) + tipo + st.substring(idxT+2);
                                }

                                idxv = st.indexOf("%v");
                                idxT = st.indexOf("%T");
                                i++;
                              }
                              RESULT = st;
                            }
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // s ::= PRINTLN AP lv CP el 
            {
              String RESULT =null;
		int lvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<SimpleEntry<Integer,String>> lv = (ArrayList<SimpleEntry<Integer,String>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		if(!err){
                            String r = "";
                            for(SimpleEntry<Integer, String> v:lv){
                              r += valorde(v).getValue();
                              r += " ";
                            }
                            RESULT = r.substring(0, r.length()-1) + "\n";
                          }
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // s ::= PRINT AP lv CP el 
            {
              String RESULT =null;
		int lvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<SimpleEntry<Integer,String>> lv = (ArrayList<SimpleEntry<Integer,String>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		if(!err){
                                String r = "";
                                for(SimpleEntry<Integer, String> v:lv){
                                  r += valorde(v).getValue();
                                  r += " ";
                                }
                                RESULT = r.substring(0, r.length()-1);
                              }
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ls ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ls",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ls ::= ls s 
            {
              String RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String ls = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ls!=null ? (s!=null ? ls + s : ls) : (s!=null ?  s : ""); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ls",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // lv ::= BOOL COMA lv 
            {
              ArrayList<SimpleEntry<Integer,String>> RESULT =null;
		int lvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<SimpleEntry<Integer,String>> lv = (ArrayList<SimpleEntry<Integer,String>>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 GoPL.out.println("ERROR"); err=true;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lv",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // lv ::= STRING COMA lv 
            {
              ArrayList<SimpleEntry<Integer,String>> RESULT =null;
		int lvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<SimpleEntry<Integer,String>> lv = (ArrayList<SimpleEntry<Integer,String>>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 GoPL.out.println("ERROR"); err=true;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lv",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // lv ::= INT COMA lv 
            {
              ArrayList<SimpleEntry<Integer,String>> RESULT =null;
		int lvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<SimpleEntry<Integer,String>> lv = (ArrayList<SimpleEntry<Integer,String>>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 GoPL.out.println("ERROR"); err=true;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lv",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // lv ::= BOOL 
            {
              ArrayList<SimpleEntry<Integer,String>> RESULT =null;
		 GoPL.out.println("ERROR"); err=true;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lv",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // lv ::= STRING 
            {
              ArrayList<SimpleEntry<Integer,String>> RESULT =null;
		 GoPL.out.println("ERROR"); err=true;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lv",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // lv ::= INT 
            {
              ArrayList<SimpleEntry<Integer,String>> RESULT =null;
		 GoPL.out.println("ERROR"); err=true;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lv",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // lv ::= v 
            {
              ArrayList<SimpleEntry<Integer,String>> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SimpleEntry<Integer,String> v = (SimpleEntry<Integer,String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(!err){
                            ArrayList<SimpleEntry<Integer, String>> r = new ArrayList<SimpleEntry<Integer, String>>();
                            r.add(v);
                            RESULT = r;
                          }
                       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lv",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // lv ::= v COMA lv 
            {
              ArrayList<SimpleEntry<Integer,String>> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SimpleEntry<Integer,String> v = (SimpleEntry<Integer,String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<SimpleEntry<Integer,String>> lv = (ArrayList<SimpleEntry<Integer,String>>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(!err){
                            ArrayList<SimpleEntry<Integer, String>> r = new ArrayList<SimpleEntry<Integer, String>>();
                            r.add(v);
                            r.addAll(lv);
                            RESULT = r; 
                          }
                       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lv",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // lc ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lc",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // lc ::= CONST lv IGUAL lv el NT$0 lc 
            {
              String RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ArrayList<SimpleEntry<Integer,String>> li = (ArrayList<SimpleEntry<Integer,String>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int lvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<SimpleEntry<Integer,String>> lv = (ArrayList<SimpleEntry<Integer,String>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lc",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // NT$0 ::= 
            {
              String RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<SimpleEntry<Integer,String>> li = (ArrayList<SimpleEntry<Integer,String>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<SimpleEntry<Integer,String>> lv = (ArrayList<SimpleEntry<Integer,String>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

int u = 0;
for(SimpleEntry<Integer, String> i:li){
  if (i.getKey() == 3){
    SimpleEntry<Integer, String> v = lv.get(u);
  if(v.getKey() != 3)  constantes.put(i.getValue(), v);
  }
}

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // st ::= in AC ls CC 
            {
              String RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String ls = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(ls!=null && !err) GoPL.out.print(ls + "\n"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("st",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= st EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

