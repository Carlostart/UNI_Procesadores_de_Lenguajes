
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Aug 07 14:19:01 GMT 2019
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.ArrayList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Aug 07 14:19:01 GMT 2019
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\064\000\002\002\004\000\002\015\002\000\002\002" +
    "\004\000\002\003\003\000\002\003\004\000\002\004\004" +
    "\000\002\016\002\000\002\017\002\000\002\004\012\000" +
    "\002\020\002\000\002\021\002\000\002\004\011\000\002" +
    "\022\002\000\002\004\012\000\002\023\002\000\002\024" +
    "\002\000\002\025\002\000\002\004\016\000\002\004\007" +
    "\000\002\004\005\000\002\026\002\000\002\004\006\000" +
    "\002\006\004\000\002\006\006\000\002\006\002\000\002" +
    "\011\003\000\002\010\004\000\002\010\002\000\002\012" +
    "\003\000\002\013\003\000\002\014\003\000\002\005\005" +
    "\000\002\005\005\000\002\005\005\000\002\005\005\000" +
    "\002\005\004\000\002\005\005\000\002\005\005\000\002" +
    "\005\003\000\002\005\003\000\002\007\005\000\002\007" +
    "\005\000\002\007\005\000\002\007\005\000\002\007\005" +
    "\000\002\007\005\000\002\007\004\000\002\027\002\000" +
    "\002\007\006\000\002\030\002\000\002\007\006\000\002" +
    "\007\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\155\000\030\005\000\010\000\012\000\016\000\027" +
    "\000\030\000\031\000\033\000\034\000\037\000\040\000" +
    "\001\002\000\030\005\007\010\016\012\023\016\024\027" +
    "\015\030\013\031\017\033\012\034\027\037\011\040\026" +
    "\001\002\000\004\002\006\001\002\000\004\002\001\001" +
    "\002\000\012\005\007\010\016\037\011\040\026\001\002" +
    "\000\004\010\144\001\002\000\040\004\uffda\005\uffda\006" +
    "\uffda\007\uffda\011\uffda\014\uffda\017\142\020\uffda\022\uffda" +
    "\023\uffda\024\uffda\025\uffda\026\uffda\035\uffda\036\uffda\001" +
    "\002\000\006\014\uffe9\037\133\001\002\000\004\010\uffe5" +
    "\001\002\000\014\004\044\005\040\006\042\007\047\014" +
    "\132\001\002\000\004\010\uffe8\001\002\000\012\005\007" +
    "\010\016\037\011\040\026\001\002\000\030\005\uffe4\010" +
    "\uffe4\012\uffe4\016\uffe4\027\uffe4\030\uffe4\031\uffe4\033\uffe4" +
    "\034\uffe4\037\uffe4\040\uffe4\001\002\000\032\002\uffff\005" +
    "\007\010\016\012\023\016\024\027\015\030\013\031\017" +
    "\033\012\034\027\037\011\040\026\001\002\000\034\002" +
    "\ufffe\005\ufffe\010\ufffe\012\ufffe\013\ufffe\016\ufffe\027\ufffe" +
    "\030\ufffe\031\ufffe\033\ufffe\034\ufffe\037\ufffe\040\ufffe\001" +
    "\002\000\004\010\120\001\002\000\030\005\uffed\010\uffed" +
    "\012\uffed\016\uffed\027\uffed\030\uffed\031\uffed\033\uffed\034" +
    "\uffed\037\uffed\040\uffed\001\002\000\004\010\110\001\002" +
    "\000\030\005\ufff5\010\ufff5\012\ufff5\016\ufff5\027\ufff5\030" +
    "\ufff5\031\ufff5\033\ufff5\034\ufff5\037\ufff5\040\ufff5\001\002" +
    "\000\036\004\uffdb\005\uffdb\006\uffdb\007\uffdb\011\uffdb\014" +
    "\uffdb\020\uffdb\022\uffdb\023\uffdb\024\uffdb\025\uffdb\026\uffdb" +
    "\035\uffdb\036\uffdb\001\002\000\004\010\uffe3\001\002\000" +
    "\004\010\031\001\002\000\014\005\ufff8\010\ufff8\021\ufff8" +
    "\037\ufff8\040\ufff8\001\002\000\014\005\007\010\034\021" +
    "\033\037\011\040\026\001\002\000\014\005\007\010\034" +
    "\021\033\037\011\040\026\001\002\000\014\005\007\010" +
    "\034\021\033\037\011\040\026\001\002\000\010\011\065" +
    "\035\063\036\064\001\002\000\026\004\044\005\040\006" +
    "\042\007\047\020\037\022\043\023\046\024\045\025\041" +
    "\026\050\001\002\000\012\005\007\010\016\037\011\040" +
    "\026\001\002\000\012\005\007\010\016\037\011\040\026" +
    "\001\002\000\012\005\007\010\016\037\011\040\026\001" +
    "\002\000\012\005\007\010\016\037\011\040\026\001\002" +
    "\000\012\005\007\010\016\037\011\040\026\001\002\000" +
    "\012\005\007\010\016\037\011\040\026\001\002\000\012" +
    "\005\007\010\016\037\011\040\026\001\002\000\012\005" +
    "\007\010\016\037\011\040\026\001\002\000\012\005\007" +
    "\010\016\037\011\040\026\001\002\000\012\005\007\010" +
    "\016\037\011\040\026\001\002\000\022\004\044\005\040" +
    "\006\042\007\047\011\uffd6\014\uffd6\035\uffd6\036\uffd6\001" +
    "\002\000\036\004\uffdf\005\uffdf\006\uffdf\007\uffdf\011\uffdf" +
    "\014\uffdf\020\uffdf\022\uffdf\023\uffdf\024\uffdf\025\uffdf\026" +
    "\uffdf\035\uffdf\036\uffdf\001\002\000\022\004\044\005\040" +
    "\006\042\007\047\011\uffd5\014\uffd5\035\uffd5\036\uffd5\001" +
    "\002\000\022\004\044\005\040\006\042\007\047\011\uffd7" +
    "\014\uffd7\035\uffd7\036\uffd7\001\002\000\036\004\uffe2\005" +
    "\uffe2\006\042\007\047\011\uffe2\014\uffe2\020\uffe2\022\uffe2" +
    "\023\uffe2\024\uffe2\025\uffe2\026\uffe2\035\uffe2\036\uffe2\001" +
    "\002\000\022\004\044\005\040\006\042\007\047\011\uffd8" +
    "\014\uffd8\035\uffd8\036\uffd8\001\002\000\036\004\uffe0\005" +
    "\uffe0\006\uffe0\007\uffe0\011\uffe0\014\uffe0\020\uffe0\022\uffe0" +
    "\023\uffe0\024\uffe0\025\uffe0\026\uffe0\035\uffe0\036\uffe0\001" +
    "\002\000\022\004\044\005\040\006\042\007\047\011\uffd4" +
    "\014\uffd4\035\uffd4\036\uffd4\001\002\000\036\004\uffe1\005" +
    "\uffe1\006\042\007\047\011\uffe1\014\uffe1\020\uffe1\022\uffe1" +
    "\023\uffe1\024\uffe1\025\uffe1\026\uffe1\035\uffe1\036\uffe1\001" +
    "\002\000\022\004\044\005\040\006\042\007\047\011\uffd9" +
    "\014\uffd9\035\uffd9\036\uffd9\001\002\000\014\005\uffd2\010" +
    "\uffd2\021\uffd2\037\uffd2\040\uffd2\001\002\000\014\005\uffd0" +
    "\010\uffd0\021\uffd0\037\uffd0\040\uffd0\001\002\000\030\005" +
    "\ufff7\010\ufff7\012\ufff7\016\ufff7\027\ufff7\030\ufff7\031\ufff7" +
    "\033\ufff7\034\ufff7\037\ufff7\040\ufff7\001\002\000\030\005" +
    "\007\010\016\012\023\016\024\027\015\030\013\031\017" +
    "\033\012\034\027\037\011\040\026\001\002\000\036\002" +
    "\ufff6\005\ufff6\010\ufff6\012\ufff6\013\ufff6\015\ufff6\016\ufff6" +
    "\027\ufff6\030\ufff6\031\ufff6\033\ufff6\034\ufff6\037\ufff6\040" +
    "\ufff6\001\002\000\014\005\007\010\034\021\033\037\011" +
    "\040\026\001\002\000\012\011\uffcf\014\uffcf\035\uffcf\036" +
    "\uffcf\001\002\000\014\005\007\010\034\021\033\037\011" +
    "\040\026\001\002\000\012\011\uffd1\014\uffd1\035\uffd1\036" +
    "\uffd1\001\002\000\010\011\077\035\063\036\064\001\002" +
    "\000\030\004\044\005\040\006\042\007\047\011\076\020" +
    "\037\022\043\023\046\024\045\025\041\026\050\001\002" +
    "\000\036\004\uffdd\005\uffdd\006\uffdd\007\uffdd\011\uffdd\014" +
    "\uffdd\020\uffdd\022\uffdd\023\uffdd\024\uffdd\025\uffdd\026\uffdd" +
    "\035\uffdd\036\uffdd\001\002\000\012\011\uffce\014\uffce\035" +
    "\uffce\036\uffce\001\002\000\012\011\uffd3\014\uffd3\035\063" +
    "\036\064\001\002\000\030\005\007\010\016\012\023\016" +
    "\024\027\015\030\013\031\017\033\012\034\027\037\011" +
    "\040\026\001\002\000\004\030\103\001\002\000\004\010" +
    "\104\001\002\000\014\005\007\010\034\021\033\037\011" +
    "\040\026\001\002\000\010\011\106\035\063\036\064\001" +
    "\002\000\004\014\107\001\002\000\036\002\ufff4\005\ufff4" +
    "\010\ufff4\012\ufff4\013\ufff4\015\ufff4\016\ufff4\027\ufff4\030" +
    "\ufff4\031\ufff4\033\ufff4\034\ufff4\037\ufff4\040\ufff4\001\002" +
    "\000\012\005\007\010\016\037\011\040\026\001\002\000" +
    "\014\004\044\005\040\006\042\007\047\011\112\001\002" +
    "\000\004\014\113\001\002\000\036\002\uffef\005\uffef\010" +
    "\uffef\012\uffef\013\uffef\015\uffef\016\uffef\027\uffef\030\uffef" +
    "\031\uffef\033\uffef\034\uffef\037\uffef\040\uffef\001\002\000" +
    "\030\005\007\010\016\012\023\016\024\027\015\030\013" +
    "\031\017\033\012\034\027\037\011\040\026\001\002\000" +
    "\032\005\007\010\016\012\023\013\116\016\024\027\015" +
    "\030\013\031\017\033\012\034\027\037\011\040\026\001" +
    "\002\000\036\002\uffec\005\uffec\010\uffec\012\uffec\013\uffec" +
    "\015\uffec\016\uffec\027\uffec\030\uffec\031\uffec\033\uffec\034" +
    "\uffec\037\uffec\040\uffec\001\002\000\034\002\ufffd\005\ufffd" +
    "\010\ufffd\012\ufffd\013\ufffd\016\ufffd\027\ufffd\030\ufffd\031" +
    "\ufffd\033\ufffd\034\ufffd\037\ufffd\040\ufffd\001\002\000\014" +
    "\005\007\010\034\021\033\037\011\040\026\001\002\000" +
    "\010\011\122\035\063\036\064\001\002\000\030\005\ufffb" +
    "\010\ufffb\012\ufffb\016\ufffb\027\ufffb\030\ufffb\031\ufffb\033" +
    "\ufffb\034\ufffb\037\ufffb\040\ufffb\001\002\000\030\005\007" +
    "\010\016\012\023\016\024\027\015\030\013\031\017\033" +
    "\012\034\027\037\011\040\026\001\002\000\036\002\ufffa" +
    "\005\ufffa\010\ufffa\012\ufffa\013\ufffa\015\ufffa\016\ufffa\027" +
    "\ufffa\030\ufffa\031\ufffa\033\ufffa\034\ufffa\037\ufffa\040\ufffa" +
    "\001\002\000\036\002\uffe6\005\uffe6\010\uffe6\012\uffe6\013" +
    "\uffe6\015\126\016\uffe6\027\uffe6\030\uffe6\031\uffe6\033\uffe6" +
    "\034\uffe6\037\uffe6\040\uffe6\001\002\000\030\005\007\010" +
    "\016\012\023\016\024\027\015\030\013\031\017\033\012" +
    "\034\027\037\011\040\026\001\002\000\036\002\ufff9\005" +
    "\ufff9\010\ufff9\012\ufff9\013\ufff9\015\ufff9\016\ufff9\027\ufff9" +
    "\030\ufff9\031\ufff9\033\ufff9\034\ufff9\037\ufff9\040\ufff9\001" +
    "\002\000\036\002\uffe7\005\uffe7\010\uffe7\012\uffe7\013\uffe7" +
    "\015\uffe7\016\uffe7\027\uffe7\030\uffe7\031\uffe7\033\uffe7\034" +
    "\uffe7\037\uffe7\040\uffe7\001\002\000\014\004\044\005\040" +
    "\006\042\007\047\011\076\001\002\000\036\002\ufffc\005" +
    "\ufffc\010\ufffc\012\ufffc\013\ufffc\015\ufffc\016\ufffc\027\ufffc" +
    "\030\ufffc\031\ufffc\033\ufffc\034\ufffc\037\ufffc\040\ufffc\001" +
    "\002\000\010\014\uffe9\017\136\037\133\001\002\000\004" +
    "\014\135\001\002\000\036\002\uffee\005\uffee\010\uffee\012" +
    "\uffee\013\uffee\015\uffee\016\uffee\027\uffee\030\uffee\031\uffee" +
    "\033\uffee\034\uffee\037\uffee\040\uffee\001\002\000\004\040" +
    "\140\001\002\000\004\014\uffeb\001\002\000\006\014\uffe9" +
    "\037\133\001\002\000\004\014\uffea\001\002\000\012\005" +
    "\007\010\016\037\011\040\026\001\002\000\036\004\044" +
    "\005\040\006\042\007\047\011\uffdc\014\uffdc\020\uffdc\022" +
    "\uffdc\023\uffdc\024\uffdc\025\uffdc\026\uffdc\035\uffdc\036\uffdc" +
    "\001\002\000\012\005\007\010\016\037\011\040\026\001" +
    "\002\000\014\004\044\005\040\006\042\007\047\014\146" +
    "\001\002\000\014\005\ufff3\010\ufff3\021\ufff3\037\ufff3\040" +
    "\ufff3\001\002\000\014\005\007\010\034\021\033\037\011" +
    "\040\026\001\002\000\010\014\ufff2\035\063\036\064\001" +
    "\002\000\004\014\152\001\002\000\012\005\007\010\016" +
    "\037\011\040\026\001\002\000\014\004\044\005\040\006" +
    "\042\007\047\011\154\001\002\000\030\005\ufff1\010\ufff1" +
    "\012\ufff1\016\ufff1\027\ufff1\030\ufff1\031\ufff1\033\ufff1\034" +
    "\ufff1\037\ufff1\040\ufff1\001\002\000\030\005\007\010\016" +
    "\012\023\016\024\027\015\030\013\031\017\033\012\034" +
    "\027\037\011\040\026\001\002\000\036\002\ufff0\005\ufff0" +
    "\010\ufff0\012\ufff0\013\ufff0\015\ufff0\016\ufff0\027\ufff0\030" +
    "\ufff0\031\ufff0\033\ufff0\034\ufff0\037\ufff0\040\ufff0\001\002" +
    "\000\036\004\uffde\005\uffde\006\uffde\007\uffde\011\uffde\014" +
    "\uffde\020\uffde\022\uffde\023\uffde\024\uffde\025\uffde\026\uffde" +
    "\035\uffde\036\uffde\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\155\000\006\002\004\015\003\001\001\000\020\003" +
    "\017\004\020\005\013\011\021\012\027\013\024\014\007" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\005" +
    "\156\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\133\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\130\001\001\000\002\001\001" +
    "\000\016\004\116\005\013\011\021\012\027\013\024\014" +
    "\007\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\026\113\001\001\000\002\001\001\000\004\022\100\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\020\031\001\001\000\006\005\035\007\034\001" +
    "\001\000\006\005\035\007\077\001\001\000\006\005\074" +
    "\007\073\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\061\001\001\000\004\005\060\001\001\000\004" +
    "\005\057\001\001\000\004\005\056\001\001\000\004\005" +
    "\055\001\001\000\004\005\054\001\001\000\004\005\053" +
    "\001\001\000\004\005\052\001\001\000\004\005\051\001" +
    "\001\000\004\005\050\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\027\071\001" +
    "\001\000\004\030\067\001\001\000\004\021\065\001\001" +
    "\000\016\004\066\005\013\011\021\012\027\013\024\014" +
    "\007\001\001\000\002\001\001\000\006\005\035\007\070" +
    "\001\001\000\002\001\001\000\006\005\035\007\072\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\004\101\005\013\011\021\012\027\013\024\014\007" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\005" +
    "\035\007\104\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\110\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\003\114" +
    "\004\020\005\013\011\021\012\027\013\024\014\007\001" +
    "\001\000\016\004\116\005\013\011\021\012\027\013\024" +
    "\014\007\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\005\035\007\120\001\001\000\002\001\001\000\004" +
    "\016\122\001\001\000\016\004\123\005\013\011\021\012" +
    "\027\013\024\014\007\001\001\000\004\017\124\001\001" +
    "\000\004\010\126\001\001\000\016\004\127\005\013\011" +
    "\021\012\027\013\024\014\007\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\136\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\140\001" +
    "\001\000\002\001\001\000\004\005\142\001\001\000\002" +
    "\001\001\000\004\005\144\001\001\000\002\001\001\000" +
    "\004\023\146\001\001\000\006\005\035\007\147\001\001" +
    "\000\004\024\150\001\001\000\002\001\001\000\004\005" +
    "\152\001\001\000\002\001\001\000\004\025\154\001\001" +
    "\000\016\004\155\005\013\011\021\012\027\013\024\014" +
    "\007\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


  ArrayList<ArrayList<String>> bloques = new ArrayList<>();
  int profundidad=0;

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Condicion ::= AP Condicion CP 
            {
              Etiqueta RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Etiqueta c = (Etiqueta)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = c;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Condicion ::= Condicion OR NT$11 Condicion 
            {
              Etiqueta RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Etiqueta) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Etiqueta c1 = (Etiqueta)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Etiqueta o = (Etiqueta)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Etiqueta c2 = (Etiqueta)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
      Generator.salida(Generator.LABEL, null, null, c1.v());
      Generator.salida(Generator.GOTO, null, null, c2.v());
      RESULT = c2;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // NT$11 ::= 
            {
              Etiqueta RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Etiqueta c1 = (Etiqueta)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Etiqueta o = (Etiqueta)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

      Generator.salida(Generator.LABEL, null, null, c1.f());
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$11",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Condicion ::= Condicion AND NT$10 Condicion 
            {
              Etiqueta RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Etiqueta) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Etiqueta c1 = (Etiqueta)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Etiqueta c2 = (Etiqueta)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
      Generator.salida(Generator.LABEL, null, null, c1.f());
      Generator.salida(Generator.GOTO, null, null, c2.f());
      RESULT = c2;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // NT$10 ::= 
            {
              Etiqueta RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Etiqueta c1 = (Etiqueta)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

      Generator.salida(Generator.LABEL, null, null, c1.v());
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Condicion ::= NOT Condicion 
            {
              Etiqueta RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Etiqueta c = (Etiqueta)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
      RESULT = new Etiqueta(c.f(),c.v());
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Condicion ::= Expresion MENOR Expresion 
            {
              Etiqueta RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
      String v = Generator.nuevaEtiqueta();
      String f = Generator.nuevaEtiqueta();
      PLXC.out.print("if(" + e1 + "<" + e2 + ") ");
      Generator.salida(Generator.GOTO, null, null, v);
      Generator.salida(Generator.GOTO, null, null, f);
      RESULT = new Etiqueta(v,f);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Condicion ::= Expresion MAYOR Expresion 
            {
              Etiqueta RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
      String v = Generator.nuevaEtiqueta();
      String f = Generator.nuevaEtiqueta();
      PLXC.out.print("if(" + e2 + "<" + e1 + ") ");
      Generator.salida(Generator.GOTO, null, null, v);
      Generator.salida(Generator.GOTO, null, null, f);
      RESULT = new Etiqueta(v,f);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Condicion ::= Expresion MENOREQ Expresion 
            {
              Etiqueta RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
      String v = Generator.nuevaEtiqueta();
      String f = Generator.nuevaEtiqueta();
      PLXC.out.print("if(" + e2 + "<" + e1 + ") ");
      Generator.salida(Generator.GOTO, null, null, f);
      Generator.salida(Generator.GOTO, null, null, v);
      RESULT = new Etiqueta(v,f);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Condicion ::= Expresion MAYOREQ Expresion 
            {
              Etiqueta RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
      String v = Generator.nuevaEtiqueta();
      String f = Generator.nuevaEtiqueta();
      PLXC.out.print("if(" + e1 + "<" + e2 + ") ");
      Generator.salida(Generator.GOTO, null, null, f);
      Generator.salida(Generator.GOTO, null, null, v);
      RESULT = new Etiqueta(v,f);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Condicion ::= Expresion NOTEQ Expresion 
            {
              Etiqueta RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
      String v = Generator.nuevaEtiqueta();
      String f = Generator.nuevaEtiqueta();
      PLXC.out.print("if(" + e1 + "==" + e2 + ") ");
      Generator.salida(Generator.GOTO, null, null, f);
      Generator.salida(Generator.GOTO, null, null, v);
      RESULT = new Etiqueta(v,f);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Condicion ::= Expresion EQEQ Expresion 
            {
              Etiqueta RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
      String v = Generator.nuevaEtiqueta();
      String f = Generator.nuevaEtiqueta();
      PLXC.out.print("if(" + e1 + "==" + e2 + ") ");
      Generator.salida(Generator.GOTO, null, null, v);
      Generator.salida(Generator.GOTO, null, null, f);
      RESULT = new Etiqueta(v,f);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Expresion ::= IDENT 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
      ArrayList<String> aux = new ArrayList<>();
      for(int u = 0; u<profundidad+1;u++) aux.addAll(bloques.get(u));
      /* PLC.out.print(aux); */

      if (!aux.contains(i)) {
        throw new java.lang.Error("...\nerror:\n# variable no encontrada\n...");
        /* PLC.out.println("...\nerror:\n# variable no encontrada\n..."); */
      }
      RESULT = i;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Expresion ::= ENTERO 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Expresion ::= IDENT EQ Expresion 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
      Generator.salida(Generator.ASIG, i, e, null);  RESULT = i;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Expresion ::= AP Expresion CP 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Expresion ::= MENOS Expresion 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
      String t = Generator.nuevaTemp();
      Generator.salida(Generator.MENOS, "0", e, t);
      RESULT = t;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Expresion ::= Expresion DIV Expresion 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
      String t = Generator.nuevaTemp();
      Generator.salida(Generator.DIV, e1, e2, t);
      RESULT = t;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Expresion ::= Expresion POR Expresion 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
      String t = Generator.nuevaTemp();
      Generator.salida(Generator.POR, e1, e2, t);
      RESULT = t;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Expresion ::= Expresion MENOS Expresion 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
      String t = Generator.nuevaTemp();
      Generator.salida(Generator.MENOS, e1, e2, t);
      RESULT = t;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Expresion ::= Expresion MAS Expresion 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
      String t = Generator.nuevaTemp();
      Generator.salida(Generator.MAS, e1, e2, t);
      RESULT = t;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // For ::= FOR 
            {
              Etiqueta RESULT =null;
		
  RESULT = new Etiqueta(null, null);
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("For",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Do ::= DO 
            {
              Etiqueta RESULT =null;
		
  RESULT = new Etiqueta(null, null);
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Do",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // While ::= WHILE 
            {
              Etiqueta RESULT =null;
		
    RESULT = new Etiqueta(null, null);
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("While",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Else ::= 
            {
              Etiqueta RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Else",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Else ::= ELSE Sentencia 
            {
              Etiqueta RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Else",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // If ::= IF 
            {
              Etiqueta RESULT =null;
		
    RESULT = new Etiqueta(null, null);
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("If",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Declaracion ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Declaracion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Declaracion ::= IDENT EQ ENTERO Declaracion 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
      if (bloques.get(profundidad).contains(i)){
        throw new java.lang.Error("...\nerror:\n# variable ya declarada\n...");
      } else{
        bloques.get(profundidad).add(i);
      }
      Generator.salida(Generator.ASIG, i, e, null);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Declaracion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Declaracion ::= IDENT Declaracion 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
      if (bloques.get(profundidad).contains(i)){
        throw new java.lang.Error("...\nerror:\n# variable ya declarada\n...");
      } else{
        bloques.get(profundidad).add(i);
      }
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Declaracion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Sentencia ::= AC NT$9 Lista_de_sent CC 
            {
              String RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
        bloques.get(profundidad).clear();
        profundidad--;
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NT$9 ::= 
            {
              String RESULT =null;

    bloques.add(new ArrayList<>());
    profundidad++;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Sentencia ::= INT Declaracion PYC 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Sentencia ::= PRINT AP Expresion CP PYC 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
      Generator.salida(Generator.PRINT, e, null, null);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Sentencia ::= For AP Expresion PYC NT$6 Condicion NT$7 PYC Expresion CP NT$8 Sentencia 
            {
              String RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		Etiqueta f = (Etiqueta)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Etiqueta c = (Etiqueta)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		
      Generator.salida(Generator.GOTO, null, null, f.f());
      Generator.salida(Generator.LABEL, null, null, c.f());
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NT$8 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Etiqueta f = (Etiqueta)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Etiqueta c = (Etiqueta)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

      Generator.salida(Generator.GOTO, null, null, f.v());
      Generator.salida(Generator.LABEL, null, null, c.v());
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NT$7 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Etiqueta f = (Etiqueta)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Etiqueta c = (Etiqueta)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

      Generator.salida(Generator.LABEL, null, null, f.f());
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NT$6 ::= 
            {
              String RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Etiqueta f = (Etiqueta)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

      f.setV(Generator.nuevaEtiqueta());
      f.setF(Generator.nuevaEtiqueta());
      Generator.salida(Generator.LABEL, null, null, f.v());
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Sentencia ::= Do NT$5 Sentencia WHILE AP Condicion CP PYC 
            {
              String RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Etiqueta d = (Etiqueta)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Etiqueta c = (Etiqueta)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
      Generator.salida(Generator.LABEL, null, null, c.v());
      Generator.salida(Generator.GOTO, null, null, d.v());
      Generator.salida(Generator.LABEL, null, null, c.f());
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NT$5 ::= 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Etiqueta d = (Etiqueta)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

      d.setV(Generator.nuevaEtiqueta());
      Generator.salida(Generator.LABEL, null, null, d.v());
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Sentencia ::= While AP NT$3 Condicion CP NT$4 Sentencia 
            {
              String RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Etiqueta w = (Etiqueta)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Etiqueta c = (Etiqueta)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
      Generator.salida(Generator.GOTO, null, null, w.v());
      Generator.salida(Generator.LABEL, null, null, c.f());
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NT$4 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Etiqueta w = (Etiqueta)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Etiqueta c = (Etiqueta)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

      Generator.salida(Generator.LABEL, null, null, c.v());
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NT$3 ::= 
            {
              String RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Etiqueta w = (Etiqueta)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

      w.setV(Generator.nuevaEtiqueta());
      Generator.salida(Generator.LABEL, null, null, w.v());
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Sentencia ::= If AP Condicion CP NT$1 Sentencia NT$2 Else 
            {
              String RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Etiqueta i = (Etiqueta)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Etiqueta c = (Etiqueta)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		
      Generator.salida(Generator.LABEL, null, null, i.f());
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$2 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Etiqueta i = (Etiqueta)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Etiqueta c = (Etiqueta)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

      i.setF(Generator.nuevaEtiqueta());
      Generator.salida(Generator.GOTO, null, null, i.f());
      Generator.salida(Generator.LABEL, null, null, c.f());
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NT$1 ::= 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Etiqueta i = (Etiqueta)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Etiqueta c = (Etiqueta)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

      Generator.salida(Generator.LABEL, null, null, c.v());
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Sentencia ::= Expresion PYC 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Lista_de_sent ::= Lista_de_sent Sentencia 
            {
              String RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Lista_de_sent",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Lista_de_sent ::= Sentencia 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Lista_de_sent",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // s ::= NT$0 Lista_de_sent 
            {
              String RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              String RESULT =null;
bloques.add(new ArrayList<>());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= s EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

