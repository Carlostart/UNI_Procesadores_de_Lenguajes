
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Feb 08 19:31:39 GMT 2019
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Feb 08 19:31:39 GMT 2019
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\114\000\002\002\004\000\002\020\002\000\002\002" +
    "\004\000\002\003\003\000\002\003\004\000\002\004\004" +
    "\000\002\021\002\000\002\022\002\000\002\004\012\000" +
    "\002\023\002\000\002\024\002\000\002\004\011\000\002" +
    "\025\002\000\002\004\012\000\002\026\002\000\002\027" +
    "\002\000\002\030\002\000\002\004\016\000\002\004\007" +
    "\000\002\004\010\000\002\004\005\000\002\004\005\000" +
    "\002\031\002\000\002\004\006\000\002\011\004\000\002" +
    "\011\003\000\002\014\003\000\002\013\004\000\002\013" +
    "\002\000\002\015\003\000\002\016\003\000\002\017\003" +
    "\000\002\006\004\000\002\006\006\000\002\006\002\000" +
    "\002\007\004\000\002\007\006\000\002\007\010\000\002" +
    "\007\002\000\002\005\005\000\002\005\005\000\002\005" +
    "\005\000\002\005\005\000\002\005\004\000\002\005\004" +
    "\000\002\005\004\000\002\005\004\000\002\005\004\000" +
    "\002\005\005\000\002\005\005\000\002\005\004\000\002" +
    "\005\004\000\002\032\002\000\002\005\005\000\002\005" +
    "\003\000\002\005\003\000\002\005\006\000\002\005\006" +
    "\000\002\005\003\000\002\005\003\000\002\005\005\000" +
    "\002\005\004\000\002\010\003\000\002\010\003\000\002" +
    "\012\005\000\002\012\005\000\002\012\005\000\002\012" +
    "\005\000\002\012\005\000\002\012\005\000\002\012\004" +
    "\000\002\033\002\000\002\012\006\000\002\034\002\000" +
    "\002\012\006\000\002\012\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\235\000\050\005\000\006\000\007\000\012\000\014" +
    "\000\020\000\023\000\031\000\032\000\034\000\036\000" +
    "\037\000\040\000\042\000\045\000\046\000\047\000\050" +
    "\000\051\000\001\002\000\050\005\027\006\007\007\013" +
    "\012\021\014\030\020\031\023\016\031\020\032\015\034" +
    "\012\036\014\037\034\040\032\042\037\045\022\046\011" +
    "\047\036\050\023\051\041\001\002\000\004\002\006\001" +
    "\002\000\004\002\001\001\002\000\030\005\027\006\007" +
    "\007\013\012\021\023\016\037\034\040\032\046\011\047" +
    "\036\050\023\051\041\001\002\000\004\012\224\001\002" +
    "\000\072\004\uffc7\005\222\006\uffc7\007\221\010\uffc7\011" +
    "\uffc7\012\uffc7\013\uffc7\015\uffc7\016\uffc7\021\uffc3\022\uffc7" +
    "\023\uffc7\024\uffc7\025\uffc7\026\uffc7\027\uffc7\030\uffc7\035" +
    "\uffc7\037\uffc7\040\uffc7\041\223\043\uffc7\044\uffc7\046\uffc7" +
    "\047\uffc7\050\uffc7\051\uffc7\001\002\000\010\016\uffdf\046" +
    "\177\051\174\001\002\000\004\046\211\001\002\000\010" +
    "\016\uffdb\046\177\051\174\001\002\000\004\012\uffe4\001" +
    "\002\000\030\005\027\006\007\007\013\012\021\023\016" +
    "\037\034\040\032\046\011\047\036\050\023\051\041\001" +
    "\002\000\016\004\060\006\061\010\063\011\062\016\172" +
    "\035\057\001\002\000\004\012\uffe7\001\002\000\034\005" +
    "\027\006\007\007\013\012\021\023\016\034\051\036\054" +
    "\037\034\040\032\046\011\047\036\050\023\051\041\001" +
    "\002\000\050\005\uffe3\006\uffe3\007\uffe3\012\uffe3\014\uffe3" +
    "\020\uffe3\023\uffe3\031\uffe3\032\uffe3\034\uffe3\036\uffe3\037" +
    "\uffe3\040\uffe3\042\uffe3\045\uffe3\046\uffe3\047\uffe3\050\uffe3" +
    "\051\uffe3\001\002\000\066\004\uffca\005\uffca\006\uffca\007" +
    "\uffca\010\uffca\011\uffca\012\uffca\013\uffca\015\uffca\016\uffca" +
    "\022\uffca\023\uffca\024\uffca\025\uffca\026\uffca\027\uffca\030" +
    "\uffca\035\uffca\037\uffca\040\uffca\043\uffca\044\uffca\046\uffca" +
    "\047\uffca\050\uffca\051\uffca\001\002\000\052\002\uffff\005" +
    "\027\006\007\007\013\012\021\014\030\020\031\023\016" +
    "\031\020\032\015\034\012\036\014\037\034\040\032\042" +
    "\037\045\022\046\011\047\036\050\023\051\041\001\002" +
    "\000\054\002\ufffe\005\ufffe\006\ufffe\007\ufffe\012\ufffe\014" +
    "\ufffe\015\ufffe\020\ufffe\023\ufffe\031\ufffe\032\ufffe\034\ufffe" +
    "\036\ufffe\037\ufffe\040\ufffe\042\ufffe\045\ufffe\046\ufffe\047" +
    "\ufffe\050\ufffe\051\ufffe\001\002\000\004\012\160\001\002" +
    "\000\004\046\157\001\002\000\050\005\uffeb\006\uffeb\007" +
    "\uffeb\012\uffeb\014\uffeb\020\uffeb\023\uffeb\031\uffeb\032\uffeb" +
    "\034\uffeb\036\uffeb\037\uffeb\040\uffeb\042\uffeb\045\uffeb\046" +
    "\uffeb\047\uffeb\050\uffeb\051\uffeb\001\002\000\004\012\147" +
    "\001\002\000\030\005\uffcd\006\uffcd\007\uffcd\012\uffcd\023" +
    "\uffcd\037\uffcd\040\uffcd\046\uffcd\047\uffcd\050\uffcd\051\uffcd" +
    "\001\002\000\050\005\ufff5\006\ufff5\007\ufff5\012\ufff5\014" +
    "\ufff5\020\ufff5\023\ufff5\031\ufff5\032\ufff5\034\ufff5\036\ufff5" +
    "\037\ufff5\040\ufff5\042\ufff5\045\ufff5\046\ufff5\047\ufff5\050" +
    "\ufff5\051\ufff5\001\002\000\030\005\027\006\007\007\013" +
    "\012\021\023\016\037\034\040\032\046\011\047\036\050" +
    "\023\051\041\001\002\000\004\021\126\001\002\000\066" +
    "\004\uffcb\005\uffcb\006\uffcb\007\uffcb\010\uffcb\011\uffcb\012" +
    "\uffcb\013\uffcb\015\uffcb\016\uffcb\022\uffcb\023\uffcb\024\uffcb" +
    "\025\uffcb\026\uffcb\027\uffcb\030\uffcb\035\uffcb\037\uffcb\040" +
    "\uffcb\043\uffcb\044\uffcb\046\uffcb\047\uffcb\050\uffcb\051\uffcb" +
    "\001\002\000\004\012\uffe2\001\002\000\004\012\042\001" +
    "\002\000\070\004\uffc6\005\uffc6\006\uffc6\007\uffc6\010\uffc6" +
    "\011\uffc6\012\uffc6\013\uffc6\015\uffc6\016\uffc6\021\uffc2\022" +
    "\uffc6\023\uffc6\024\uffc6\025\uffc6\026\uffc6\027\uffc6\030\uffc6" +
    "\035\uffc6\037\uffc6\040\uffc6\043\uffc6\044\uffc6\046\uffc6\047" +
    "\uffc6\050\uffc6\051\uffc6\001\002\000\030\005\ufff8\006\ufff8" +
    "\007\ufff8\012\ufff8\023\ufff8\037\ufff8\040\ufff8\046\ufff8\047" +
    "\ufff8\050\ufff8\051\ufff8\001\002\000\030\005\027\006\007" +
    "\007\013\012\050\023\046\037\034\040\032\046\011\047" +
    "\036\050\023\051\041\001\002\000\004\021\124\001\002" +
    "\000\030\004\060\006\061\010\063\011\062\022\100\024" +
    "\103\025\105\026\104\027\101\030\106\035\057\001\002" +
    "\000\030\005\027\006\007\007\013\012\050\023\046\037" +
    "\034\040\032\046\011\047\036\050\023\051\041\001\002" +
    "\000\010\013\117\043\071\044\072\001\002\000\034\005" +
    "\027\006\007\007\013\012\050\023\046\034\051\036\054" +
    "\037\034\040\032\046\011\047\036\050\023\051\041\001" +
    "\002\000\004\013\115\001\002\000\032\004\060\006\061" +
    "\010\063\011\062\013\102\022\100\024\103\025\105\026" +
    "\104\027\101\030\106\035\057\001\002\000\010\013\073" +
    "\043\071\044\072\001\002\000\004\013\055\001\002\000" +
    "\030\005\027\006\007\007\013\012\021\023\016\037\034" +
    "\040\032\046\011\047\036\050\023\051\041\001\002\000" +
    "\066\004\uffc9\005\uffc9\006\uffc9\007\uffc9\010\uffc9\011\uffc9" +
    "\012\uffc9\013\uffc9\015\uffc9\016\uffc9\022\uffc9\023\uffc9\024" +
    "\uffc9\025\uffc9\026\uffc9\027\uffc9\030\uffc9\035\uffc9\037\uffc9" +
    "\040\uffc9\043\uffc9\044\uffc9\046\uffc9\047\uffc9\050\uffc9\051" +
    "\uffc9\001\002\000\030\005\027\006\007\007\013\012\021" +
    "\023\016\037\034\040\032\046\011\047\036\050\023\051" +
    "\041\001\002\000\030\005\027\006\007\007\013\012\021" +
    "\023\016\037\034\040\032\046\011\047\036\050\023\051" +
    "\041\001\002\000\030\005\027\006\007\007\013\012\021" +
    "\023\016\037\034\040\032\046\011\047\036\050\023\051" +
    "\041\001\002\000\030\005\027\006\007\007\013\012\021" +
    "\023\016\037\034\040\032\046\011\047\036\050\023\051" +
    "\041\001\002\000\030\005\027\006\007\007\013\012\021" +
    "\023\016\037\034\040\032\046\011\047\036\050\023\051" +
    "\041\001\002\000\066\004\uffd8\005\uffd8\006\uffd8\007\uffd8" +
    "\010\uffd8\011\062\012\uffd8\013\uffd8\015\uffd8\016\uffd8\022" +
    "\uffd8\023\uffd8\024\uffd8\025\uffd8\026\uffd8\027\uffd8\030\uffd8" +
    "\035\057\037\uffd8\040\uffd8\043\uffd8\044\uffd8\046\uffd8\047" +
    "\uffd8\050\uffd8\051\uffd8\001\002\000\066\004\uffd7\005\uffd7" +
    "\006\uffd7\007\uffd7\010\uffd7\011\uffd7\012\uffd7\013\uffd7\015" +
    "\uffd7\016\uffd7\022\uffd7\023\uffd7\024\uffd7\025\uffd7\026\uffd7" +
    "\027\uffd7\030\uffd7\035\uffd7\037\uffd7\040\uffd7\043\uffd7\044" +
    "\uffd7\046\uffd7\047\uffd7\050\uffd7\051\uffd7\001\002\000\066" +
    "\004\uffd9\005\uffd9\006\uffd9\007\uffd9\010\063\011\062\012" +
    "\uffd9\013\uffd9\015\uffd9\016\uffd9\022\uffd9\023\uffd9\024\uffd9" +
    "\025\uffd9\026\uffd9\027\uffd9\030\uffd9\035\057\037\uffd9\040" +
    "\uffd9\043\uffd9\044\uffd9\046\uffd9\047\uffd9\050\uffd9\051\uffd9" +
    "\001\002\000\066\004\uffda\005\uffda\006\uffda\007\uffda\010" +
    "\063\011\062\012\uffda\013\uffda\015\uffda\016\uffda\022\uffda" +
    "\023\uffda\024\uffda\025\uffda\026\uffda\027\uffda\030\uffda\035" +
    "\057\037\uffda\040\uffda\043\uffda\044\uffda\046\uffda\047\uffda" +
    "\050\uffda\051\uffda\001\002\000\066\004\uffd1\005\uffd1\006" +
    "\uffd1\007\uffd1\010\uffd1\011\uffd1\012\uffd1\013\uffd1\015\uffd1" +
    "\016\uffd1\022\uffd1\023\uffd1\024\uffd1\025\uffd1\026\uffd1\027" +
    "\uffd1\030\uffd1\035\uffd1\037\uffd1\040\uffd1\043\uffd1\044\uffd1" +
    "\046\uffd1\047\uffd1\050\uffd1\051\uffd1\001\002\000\030\005" +
    "\uffba\006\uffba\007\uffba\012\uffba\023\uffba\037\uffba\040\uffba" +
    "\046\uffba\047\uffba\050\uffba\051\uffba\001\002\000\030\005" +
    "\uffb8\006\uffb8\007\uffb8\012\uffb8\023\uffb8\037\uffb8\040\uffb8" +
    "\046\uffb8\047\uffb8\050\uffb8\051\uffb8\001\002\000\012\013" +
    "\uffb6\016\uffb6\043\uffb6\044\uffb6\001\002\000\030\005\027" +
    "\006\007\007\013\012\050\023\046\037\034\040\032\046" +
    "\011\047\036\050\023\051\041\001\002\000\012\013\uffb7" +
    "\016\uffb7\043\uffb7\044\uffb7\001\002\000\030\005\027\006" +
    "\007\007\013\012\050\023\046\037\034\040\032\046\011" +
    "\047\036\050\023\051\041\001\002\000\012\013\uffb9\016" +
    "\uffb9\043\uffb9\044\uffb9\001\002\000\030\005\027\006\007" +
    "\007\013\012\021\023\016\037\034\040\032\046\011\047" +
    "\036\050\023\051\041\001\002\000\030\005\027\006\007" +
    "\007\013\012\021\023\016\037\034\040\032\046\011\047" +
    "\036\050\023\051\041\001\002\000\066\004\uffd0\005\uffd0" +
    "\006\uffd0\007\uffd0\010\uffd0\011\uffd0\012\uffd0\013\uffd0\015" +
    "\uffd0\016\uffd0\022\uffd0\023\uffd0\024\uffd0\025\uffd0\026\uffd0" +
    "\027\uffd0\030\uffd0\035\uffd0\037\uffd0\040\uffd0\043\uffd0\044" +
    "\uffd0\046\uffd0\047\uffd0\050\uffd0\051\uffd0\001\002\000\030" +
    "\005\027\006\007\007\013\012\021\023\016\037\034\040" +
    "\032\046\011\047\036\050\023\051\041\001\002\000\030" +
    "\005\027\006\007\007\013\012\021\023\016\037\034\040" +
    "\032\046\011\047\036\050\023\051\041\001\002\000\030" +
    "\005\027\006\007\007\013\012\021\023\016\037\034\040" +
    "\032\046\011\047\036\050\023\051\041\001\002\000\030" +
    "\005\027\006\007\007\013\012\021\023\016\037\034\040" +
    "\032\046\011\047\036\050\023\051\041\001\002\000\024" +
    "\004\060\006\061\010\063\011\062\013\uffbe\016\uffbe\035" +
    "\057\043\uffbe\044\uffbe\001\002\000\024\004\060\006\061" +
    "\010\063\011\062\013\uffbd\016\uffbd\035\057\043\uffbd\044" +
    "\uffbd\001\002\000\024\004\060\006\061\010\063\011\062" +
    "\013\uffbf\016\uffbf\035\057\043\uffbf\044\uffbf\001\002\000" +
    "\024\004\060\006\061\010\063\011\062\013\uffc0\016\uffc0" +
    "\035\057\043\uffc0\044\uffc0\001\002\000\024\004\060\006" +
    "\061\010\063\011\062\013\uffbc\016\uffbc\035\057\043\uffbc" +
    "\044\uffbc\001\002\000\024\004\060\006\061\010\063\011" +
    "\062\013\uffc1\016\uffc1\035\057\043\uffc1\044\uffc1\001\002" +
    "\000\030\005\027\006\007\007\013\012\021\023\016\037" +
    "\034\040\032\046\011\047\036\050\023\051\041\001\002" +
    "\000\066\004\uffc8\005\uffc8\006\uffc8\007\uffc8\010\uffc8\011" +
    "\uffc8\012\uffc8\013\uffc8\015\uffc8\016\uffc8\022\uffc8\023\uffc8" +
    "\024\uffc8\025\uffc8\026\uffc8\027\uffc8\030\uffc8\035\uffc8\037" +
    "\uffc8\040\uffc8\043\uffc8\044\uffc8\046\uffc8\047\uffc8\050\uffc8" +
    "\051\uffc8\001\002\000\050\005\ufff7\006\ufff7\007\ufff7\012" +
    "\ufff7\014\ufff7\020\ufff7\023\ufff7\031\ufff7\032\ufff7\034\ufff7" +
    "\036\ufff7\037\ufff7\040\ufff7\042\ufff7\045\ufff7\046\ufff7\047" +
    "\ufff7\050\ufff7\051\ufff7\001\002\000\050\005\027\006\007" +
    "\007\013\012\021\014\030\020\031\023\016\031\020\032" +
    "\015\034\012\036\014\037\034\040\032\042\037\045\022" +
    "\046\011\047\036\050\023\051\041\001\002\000\056\002" +
    "\ufff6\005\ufff6\006\ufff6\007\ufff6\012\ufff6\014\ufff6\015\ufff6" +
    "\017\ufff6\020\ufff6\023\ufff6\031\ufff6\032\ufff6\034\ufff6\036" +
    "\ufff6\037\ufff6\040\ufff6\042\ufff6\045\ufff6\046\ufff6\047\ufff6" +
    "\050\ufff6\051\ufff6\001\002\000\032\004\060\006\061\010" +
    "\063\011\062\013\uffcf\022\uffcf\024\103\025\105\026\104" +
    "\027\101\030\106\035\057\001\002\000\012\013\uffbb\016" +
    "\uffbb\043\uffbb\044\uffbb\001\002\000\030\005\027\006\007" +
    "\007\013\012\021\023\016\037\034\040\032\046\011\047" +
    "\036\050\023\051\041\001\002\000\066\004\060\005\uffc5" +
    "\006\061\007\uffc5\010\063\011\062\012\uffc5\013\uffc5\015" +
    "\uffc5\016\uffc5\022\uffc5\023\uffc5\024\uffc5\025\uffc5\026\uffc5" +
    "\027\uffc5\030\uffc5\035\057\037\uffc5\040\uffc5\043\uffc5\044" +
    "\uffc5\046\uffc5\047\uffc5\050\uffc5\051\uffc5\001\002\000\032" +
    "\005\027\006\007\007\013\012\021\014\127\023\016\037" +
    "\034\040\032\046\011\047\036\050\023\051\041\001\002" +
    "\000\030\005\027\006\007\007\013\012\021\023\016\037" +
    "\034\040\032\046\011\047\036\050\023\051\041\001\002" +
    "\000\032\005\027\006\007\007\013\012\021\015\132\023" +
    "\016\037\034\040\032\046\011\047\036\050\023\051\041" +
    "\001\002\000\042\004\060\005\uffe8\006\061\007\uffe8\010" +
    "\063\011\062\012\uffe8\015\uffe8\023\uffe8\035\057\037\uffe8" +
    "\040\uffe8\046\uffe8\047\uffe8\050\uffe8\051\uffe8\001\002\000" +
    "\004\016\134\001\002\000\042\004\060\005\uffe9\006\061" +
    "\007\uffe9\010\063\011\062\012\uffe9\015\uffe9\023\uffe9\035" +
    "\057\037\uffe9\040\uffe9\046\uffe9\047\uffe9\050\uffe9\051\uffe9" +
    "\001\002\000\056\002\uffee\005\uffee\006\uffee\007\uffee\012" +
    "\uffee\014\uffee\015\uffee\017\uffee\020\uffee\023\uffee\031\uffee" +
    "\032\uffee\034\uffee\036\uffee\037\uffee\040\uffee\042\uffee\045" +
    "\uffee\046\uffee\047\uffee\050\uffee\051\uffee\001\002\000\066" +
    "\004\060\005\uffce\006\061\007\uffce\010\063\011\062\012" +
    "\uffce\013\uffce\015\uffce\016\uffce\022\uffce\023\uffce\024\uffce" +
    "\025\uffce\026\uffce\027\uffce\030\uffce\035\057\037\uffce\040" +
    "\uffce\043\uffce\044\uffce\046\uffce\047\uffce\050\uffce\051\uffce" +
    "\001\002\000\050\005\027\006\007\007\013\012\021\014" +
    "\030\020\031\023\016\031\020\032\015\034\012\036\014" +
    "\037\034\040\032\042\037\045\022\046\011\047\036\050" +
    "\023\051\041\001\002\000\004\032\140\001\002\000\004" +
    "\012\141\001\002\000\030\005\027\006\007\007\013\012" +
    "\050\023\046\037\034\040\032\046\011\047\036\050\023" +
    "\051\041\001\002\000\010\013\143\043\071\044\072\001" +
    "\002\000\004\016\144\001\002\000\056\002\ufff4\005\ufff4" +
    "\006\ufff4\007\ufff4\012\ufff4\014\ufff4\015\ufff4\017\ufff4\020" +
    "\ufff4\023\ufff4\031\ufff4\032\ufff4\034\ufff4\036\ufff4\037\ufff4" +
    "\040\ufff4\042\ufff4\045\ufff4\046\ufff4\047\ufff4\050\ufff4\051" +
    "\ufff4\001\002\000\030\005\027\006\007\007\013\012\021" +
    "\023\016\037\034\040\032\046\011\047\036\050\023\051" +
    "\041\001\002\000\066\004\060\005\uffcc\006\061\007\uffcc" +
    "\010\063\011\062\012\uffcc\013\uffcc\015\uffcc\016\uffcc\022" +
    "\uffcc\023\uffcc\024\uffcc\025\uffcc\026\uffcc\027\uffcc\030\uffcc" +
    "\035\057\037\uffcc\040\uffcc\043\uffcc\044\uffcc\046\uffcc\047" +
    "\uffcc\050\uffcc\051\uffcc\001\002\000\030\005\027\006\007" +
    "\007\013\012\021\023\016\037\034\040\032\046\011\047" +
    "\036\050\023\051\041\001\002\000\016\004\060\006\061" +
    "\010\063\011\062\013\151\035\057\001\002\000\004\016" +
    "\152\001\002\000\056\002\uffef\005\uffef\006\uffef\007\uffef" +
    "\012\uffef\014\uffef\015\uffef\017\uffef\020\uffef\023\uffef\031" +
    "\uffef\032\uffef\034\uffef\036\uffef\037\uffef\040\uffef\042\uffef" +
    "\045\uffef\046\uffef\047\uffef\050\uffef\051\uffef\001\002\000" +
    "\050\005\027\006\007\007\013\012\021\014\030\020\031" +
    "\023\016\031\020\032\015\034\012\036\014\037\034\040" +
    "\032\042\037\045\022\046\011\047\036\050\023\051\041" +
    "\001\002\000\052\005\027\006\007\007\013\012\021\014" +
    "\030\015\155\020\031\023\016\031\020\032\015\034\012" +
    "\036\014\037\034\040\032\042\037\045\022\046\011\047" +
    "\036\050\023\051\041\001\002\000\056\002\uffea\005\uffea" +
    "\006\uffea\007\uffea\012\uffea\014\uffea\015\uffea\017\uffea\020" +
    "\uffea\023\uffea\031\uffea\032\uffea\034\uffea\036\uffea\037\uffea" +
    "\040\uffea\042\uffea\045\uffea\046\uffea\047\uffea\050\uffea\051" +
    "\uffea\001\002\000\054\002\ufffd\005\ufffd\006\ufffd\007\ufffd" +
    "\012\ufffd\014\ufffd\015\ufffd\020\ufffd\023\ufffd\031\ufffd\032" +
    "\ufffd\034\ufffd\036\ufffd\037\ufffd\040\ufffd\042\ufffd\045\ufffd" +
    "\046\ufffd\047\ufffd\050\ufffd\051\ufffd\001\002\000\066\004" +
    "\uffd5\005\uffd5\006\uffd5\007\uffd5\010\uffd5\011\uffd5\012\uffd5" +
    "\013\uffd5\015\uffd5\016\uffd5\022\uffd5\023\uffd5\024\uffd5\025" +
    "\uffd5\026\uffd5\027\uffd5\030\uffd5\035\uffd5\037\uffd5\040\uffd5" +
    "\043\uffd5\044\uffd5\046\uffd5\047\uffd5\050\uffd5\051\uffd5\001" +
    "\002\000\030\005\027\006\007\007\013\012\050\023\046" +
    "\037\034\040\032\046\011\047\036\050\023\051\041\001" +
    "\002\000\010\013\162\043\071\044\072\001\002\000\050" +
    "\005\ufffb\006\ufffb\007\ufffb\012\ufffb\014\ufffb\020\ufffb\023" +
    "\ufffb\031\ufffb\032\ufffb\034\ufffb\036\ufffb\037\ufffb\040\ufffb" +
    "\042\ufffb\045\ufffb\046\ufffb\047\ufffb\050\ufffb\051\ufffb\001" +
    "\002\000\050\005\027\006\007\007\013\012\021\014\030" +
    "\020\031\023\016\031\020\032\015\034\012\036\014\037" +
    "\034\040\032\042\037\045\022\046\011\047\036\050\023" +
    "\051\041\001\002\000\056\002\ufffa\005\ufffa\006\ufffa\007" +
    "\ufffa\012\ufffa\014\ufffa\015\ufffa\017\ufffa\020\ufffa\023\ufffa" +
    "\031\ufffa\032\ufffa\034\ufffa\036\ufffa\037\ufffa\040\ufffa\042" +
    "\ufffa\045\ufffa\046\ufffa\047\ufffa\050\ufffa\051\ufffa\001\002" +
    "\000\056\002\uffe5\005\uffe5\006\uffe5\007\uffe5\012\uffe5\014" +
    "\uffe5\015\uffe5\017\166\020\uffe5\023\uffe5\031\uffe5\032\uffe5" +
    "\034\uffe5\036\uffe5\037\uffe5\040\uffe5\042\uffe5\045\uffe5\046" +
    "\uffe5\047\uffe5\050\uffe5\051\uffe5\001\002\000\050\005\027" +
    "\006\007\007\013\012\021\014\030\020\031\023\016\031" +
    "\020\032\015\034\012\036\014\037\034\040\032\042\037" +
    "\045\022\046\011\047\036\050\023\051\041\001\002\000" +
    "\056\002\ufff9\005\ufff9\006\ufff9\007\ufff9\012\ufff9\014\ufff9" +
    "\015\ufff9\017\ufff9\020\ufff9\023\ufff9\031\ufff9\032\ufff9\034" +
    "\ufff9\036\ufff9\037\ufff9\040\ufff9\042\ufff9\045\ufff9\046\ufff9" +
    "\047\ufff9\050\ufff9\051\ufff9\001\002\000\056\002\uffe6\005" +
    "\uffe6\006\uffe6\007\uffe6\012\uffe6\014\uffe6\015\uffe6\017\uffe6" +
    "\020\uffe6\023\uffe6\031\uffe6\032\uffe6\034\uffe6\036\uffe6\037" +
    "\uffe6\040\uffe6\042\uffe6\045\uffe6\046\uffe6\047\uffe6\050\uffe6" +
    "\051\uffe6\001\002\000\016\004\060\006\061\010\063\011" +
    "\062\013\102\035\057\001\002\000\056\002\ufffc\005\ufffc" +
    "\006\ufffc\007\ufffc\012\ufffc\014\ufffc\015\ufffc\017\ufffc\020" +
    "\ufffc\023\ufffc\031\ufffc\032\ufffc\034\ufffc\036\ufffc\037\ufffc" +
    "\040\ufffc\042\ufffc\045\ufffc\046\ufffc\047\ufffc\050\ufffc\051" +
    "\ufffc\001\002\000\066\004\060\005\uffcf\006\061\007\uffcf" +
    "\010\063\011\062\012\uffcf\013\uffcf\015\uffcf\016\uffcf\022" +
    "\uffcf\023\uffcf\024\uffcf\025\uffcf\026\uffcf\027\uffcf\030\uffcf" +
    "\035\057\037\uffcf\040\uffcf\043\uffcf\044\uffcf\046\uffcf\047" +
    "\uffcf\050\uffcf\051\uffcf\001\002\000\012\016\uffc2\021\uffc2" +
    "\046\uffc2\051\uffc2\001\002\000\004\016\210\001\002\000" +
    "\012\016\uffdb\021\200\046\177\051\174\001\002\000\012" +
    "\016\uffc3\021\uffc3\046\uffc3\051\uffc3\001\002\000\032\005" +
    "\027\006\007\007\013\012\021\014\202\023\016\037\034" +
    "\040\032\046\011\047\036\050\023\051\041\001\002\000" +
    "\004\016\uffde\001\002\000\030\005\027\006\007\007\013" +
    "\012\021\023\016\037\034\040\032\046\011\047\036\050" +
    "\023\051\041\001\002\000\022\004\060\006\061\010\063" +
    "\011\062\016\uffdb\035\057\046\177\051\174\001\002\000" +
    "\004\016\uffdd\001\002\000\032\005\027\006\007\007\013" +
    "\012\021\015\206\023\016\037\034\040\032\046\011\047" +
    "\036\050\023\051\041\001\002\000\010\016\uffdb\046\177" +
    "\051\174\001\002\000\004\016\uffdc\001\002\000\056\002" +
    "\uffec\005\uffec\006\uffec\007\uffec\012\uffec\014\uffec\015\uffec" +
    "\017\uffec\020\uffec\023\uffec\031\uffec\032\uffec\034\uffec\036" +
    "\uffec\037\uffec\040\uffec\042\uffec\045\uffec\046\uffec\047\uffec" +
    "\050\uffec\051\uffec\001\002\000\066\004\uffd4\005\uffd4\006" +
    "\uffd4\007\uffd4\010\uffd4\011\uffd4\012\uffd4\013\uffd4\015\uffd4" +
    "\016\uffd4\022\uffd4\023\uffd4\024\uffd4\025\uffd4\026\uffd4\027" +
    "\uffd4\030\uffd4\035\uffd4\037\uffd4\040\uffd4\043\uffd4\044\uffd4" +
    "\046\uffd4\047\uffd4\050\uffd4\051\uffd4\001\002\000\012\016" +
    "\uffdf\021\215\046\177\051\174\001\002\000\004\016\214" +
    "\001\002\000\056\002\uffed\005\uffed\006\uffed\007\uffed\012" +
    "\uffed\014\uffed\015\uffed\017\uffed\020\uffed\023\uffed\031\uffed" +
    "\032\uffed\034\uffed\036\uffed\037\uffed\040\uffed\042\uffed\045" +
    "\uffed\046\uffed\047\uffed\050\uffed\051\uffed\001\002\000\030" +
    "\005\027\006\007\007\013\012\021\023\016\037\034\040" +
    "\032\046\011\047\036\050\023\051\041\001\002\000\004" +
    "\016\uffe1\001\002\000\022\004\060\006\061\010\063\011" +
    "\062\016\uffdf\035\057\046\177\051\174\001\002\000\004" +
    "\016\uffe0\001\002\000\066\004\uffd2\005\uffd2\006\uffd2\007" +
    "\uffd2\010\uffd2\011\uffd2\012\uffd2\013\uffd2\015\uffd2\016\uffd2" +
    "\022\uffd2\023\uffd2\024\uffd2\025\uffd2\026\uffd2\027\uffd2\030" +
    "\uffd2\035\uffd2\037\uffd2\040\uffd2\043\uffd2\044\uffd2\046\uffd2" +
    "\047\uffd2\050\uffd2\051\uffd2\001\002\000\066\004\uffd3\005" +
    "\uffd3\006\uffd3\007\uffd3\010\uffd3\011\uffd3\012\uffd3\013\uffd3" +
    "\015\uffd3\016\uffd3\022\uffd3\023\uffd3\024\uffd3\025\uffd3\026" +
    "\uffd3\027\uffd3\030\uffd3\035\uffd3\037\uffd3\040\uffd3\043\uffd3" +
    "\044\uffd3\046\uffd3\047\uffd3\050\uffd3\051\uffd3\001\002\000" +
    "\066\004\uffc4\005\uffc4\006\uffc4\007\uffc4\010\uffc4\011\uffc4" +
    "\012\uffc4\013\uffc4\015\uffc4\016\uffc4\022\uffc4\023\uffc4\024" +
    "\uffc4\025\uffc4\026\uffc4\027\uffc4\030\uffc4\035\uffc4\037\uffc4" +
    "\040\uffc4\043\uffc4\044\uffc4\046\uffc4\047\uffc4\050\uffc4\051" +
    "\uffc4\001\002\000\030\005\027\006\007\007\013\012\021" +
    "\023\016\037\034\040\032\046\011\047\036\050\023\051" +
    "\041\001\002\000\016\004\060\006\061\010\063\011\062" +
    "\016\226\035\057\001\002\000\030\005\ufff3\006\ufff3\007" +
    "\ufff3\012\ufff3\023\ufff3\037\ufff3\040\ufff3\046\ufff3\047\ufff3" +
    "\050\ufff3\051\ufff3\001\002\000\030\005\027\006\007\007" +
    "\013\012\050\023\046\037\034\040\032\046\011\047\036" +
    "\050\023\051\041\001\002\000\010\016\ufff2\043\071\044" +
    "\072\001\002\000\004\016\232\001\002\000\030\005\027" +
    "\006\007\007\013\012\021\023\016\037\034\040\032\046" +
    "\011\047\036\050\023\051\041\001\002\000\016\004\060" +
    "\006\061\010\063\011\062\013\234\035\057\001\002\000" +
    "\050\005\ufff1\006\ufff1\007\ufff1\012\ufff1\014\ufff1\020\ufff1" +
    "\023\ufff1\031\ufff1\032\ufff1\034\ufff1\036\ufff1\037\ufff1\040" +
    "\ufff1\042\ufff1\045\ufff1\046\ufff1\047\ufff1\050\ufff1\051\ufff1" +
    "\001\002\000\050\005\027\006\007\007\013\012\021\014" +
    "\030\020\031\023\016\031\020\032\015\034\012\036\014" +
    "\037\034\040\032\042\037\045\022\046\011\047\036\050" +
    "\023\051\041\001\002\000\056\002\ufff0\005\ufff0\006\ufff0" +
    "\007\ufff0\012\ufff0\014\ufff0\015\ufff0\017\ufff0\020\ufff0\023" +
    "\ufff0\031\ufff0\032\ufff0\034\ufff0\036\ufff0\037\ufff0\040\ufff0" +
    "\042\ufff0\045\ufff0\046\ufff0\047\ufff0\050\ufff0\051\ufff0\001" +
    "\002\000\066\004\uffd6\005\uffd6\006\uffd6\007\uffd6\010\uffd6" +
    "\011\uffd6\012\uffd6\013\uffd6\015\uffd6\016\uffd6\022\uffd6\023" +
    "\uffd6\024\uffd6\025\uffd6\026\uffd6\027\uffd6\030\uffd6\035\uffd6" +
    "\037\uffd6\040\uffd6\043\uffd6\044\uffd6\046\uffd6\047\uffd6\050" +
    "\uffd6\051\uffd6\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\235\000\006\002\004\020\003\001\001\000\022\003" +
    "\023\004\024\005\016\010\034\014\025\015\037\016\032" +
    "\017\007\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\005\236\010\043\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\006\212\010\211\001\001\000\002\001" +
    "\001\000\006\007\174\010\175\001\001\000\002\001\001" +
    "\000\006\005\172\010\043\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\005\170\010\043\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\004\155\005\016\010" +
    "\034\014\025\015\037\016\032\017\007\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\031" +
    "\152\001\001\000\002\001\001\000\004\032\144\001\001" +
    "\000\004\025\135\001\001\000\006\005\134\010\043\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\023\042\001" +
    "\001\000\010\005\044\010\043\012\046\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\005\121\010\043\012" +
    "\122\001\001\000\002\001\001\000\010\005\051\010\043" +
    "\012\052\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\005\055\010\043" +
    "\001\001\000\002\001\001\000\006\005\067\010\043\001" +
    "\001\000\006\005\066\010\043\001\001\000\006\005\065" +
    "\010\043\001\001\000\006\005\064\010\043\001\001\000" +
    "\006\005\063\010\043\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\033\075\001\001\000\004\034\073\001\001" +
    "\000\002\001\001\000\010\005\044\010\043\012\074\001" +
    "\001\000\002\001\001\000\010\005\044\010\043\012\076" +
    "\001\001\000\002\001\001\000\006\005\113\010\043\001" +
    "\001\000\006\005\112\010\043\001\001\000\002\001\001" +
    "\000\006\005\111\010\043\001\001\000\006\005\110\010" +
    "\043\001\001\000\006\005\107\010\043\001\001\000\006" +
    "\005\106\010\043\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\005\115\010\043\001\001\000" +
    "\002\001\001\000\004\024\117\001\001\000\020\004\120" +
    "\005\016\010\034\014\025\015\037\016\032\017\007\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\005\124\010\043\001\001\000\002\001\001\000" +
    "\006\005\124\010\043\001\001\000\010\005\130\010\043" +
    "\011\127\001\001\000\006\005\132\010\043\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\004\136\005\016\010" +
    "\034\014\025\015\037\016\032\017\007\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\005\044\010\043\012" +
    "\141\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\005\145\010\043\001\001\000\002\001" +
    "\001\000\006\005\147\010\043\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\003\153\004" +
    "\024\005\016\010\034\014\025\015\037\016\032\017\007" +
    "\001\001\000\020\004\155\005\016\010\034\014\025\015" +
    "\037\016\032\017\007\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\005\044\010\043\012" +
    "\160\001\001\000\002\001\001\000\004\021\162\001\001" +
    "\000\020\004\163\005\016\010\034\014\025\015\037\016" +
    "\032\017\007\001\001\000\004\022\164\001\001\000\004" +
    "\013\166\001\001\000\020\004\167\005\016\010\034\014" +
    "\025\015\037\016\032\017\007\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\007\200\010\175\001\001\000\002\001\001\000\006\005" +
    "\202\010\043\001\001\000\002\001\001\000\010\005\130" +
    "\010\043\011\204\001\001\000\006\007\203\010\175\001" +
    "\001\000\002\001\001\000\006\005\132\010\043\001\001" +
    "\000\006\007\206\010\175\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\006\215\010\211" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\005" +
    "\216\010\043\001\001\000\002\001\001\000\006\006\217" +
    "\010\211\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\005\224\010\043" +
    "\001\001\000\002\001\001\000\004\026\226\001\001\000" +
    "\010\005\044\010\043\012\227\001\001\000\004\027\230" +
    "\001\001\000\002\001\001\000\006\005\232\010\043\001" +
    "\001\000\002\001\001\000\004\030\234\001\001\000\020" +
    "\004\235\005\016\010\034\014\025\015\037\016\032\017" +
    "\007\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


  List<List<String>> bloques = new ArrayList<>();
  int profundidad=0;

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Condicion ::= AP Condicion CP 
            {
              Etiqueta RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Etiqueta c = (Etiqueta)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = c;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Condicion ::= Condicion OR NT$12 Condicion 
            {
              Etiqueta RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Etiqueta) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Etiqueta c1 = (Etiqueta)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Etiqueta o = (Etiqueta)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Etiqueta c2 = (Etiqueta)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
      Generator.salida(Generator.LABEL, null, null, c1.v());
      Generator.salida(Generator.GOTO, null, null, c2.v());
      RESULT = c2;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // NT$12 ::= 
            {
              Etiqueta RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Etiqueta c1 = (Etiqueta)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Etiqueta o = (Etiqueta)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

      Generator.salida(Generator.LABEL, null, null, c1.f());
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$12",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Condicion ::= Condicion AND NT$11 Condicion 
            {
              Etiqueta RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Etiqueta) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Etiqueta c1 = (Etiqueta)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Etiqueta c2 = (Etiqueta)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
      Generator.salida(Generator.LABEL, null, null, c1.f());
      Generator.salida(Generator.GOTO, null, null, c2.f());
      RESULT = c2;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // NT$11 ::= 
            {
              Etiqueta RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Etiqueta c1 = (Etiqueta)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

      Generator.salida(Generator.LABEL, null, null, c1.v());
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$11",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Condicion ::= NOT Condicion 
            {
              Etiqueta RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Etiqueta c = (Etiqueta)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
      RESULT = new Etiqueta(c.f(),c.v());
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Condicion ::= Expresion MENOR Expresion 
            {
              Etiqueta RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
      String v = Generator.nuevaEtiqueta();
      String f = Generator.nuevaEtiqueta();
      PLXC.out.print("if(" + Generator.expresion(e1,0) + "<" + Generator.expresion(e2,0) + ") ");
      Generator.salida(Generator.GOTO, null, null, v);
      Generator.salida(Generator.GOTO, null, null, f);
      RESULT = new Etiqueta(v,f);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Condicion ::= Expresion MAYOR Expresion 
            {
              Etiqueta RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
      String v = Generator.nuevaEtiqueta();
      String f = Generator.nuevaEtiqueta();
      PLXC.out.print("if(" + Generator.expresion(e2,0) + "<" + Generator.expresion(e1,0) + ") ");
      Generator.salida(Generator.GOTO, null, null, v);
      Generator.salida(Generator.GOTO, null, null, f);
      RESULT = new Etiqueta(v,f);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Condicion ::= Expresion MENOREQ Expresion 
            {
              Etiqueta RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
      String v = Generator.nuevaEtiqueta();
      String f = Generator.nuevaEtiqueta();
      PLXC.out.print("if(" + Generator.expresion(e2,0) + "<" + Generator.expresion(e1,0) + ") ");
      Generator.salida(Generator.GOTO, null, null, f);
      Generator.salida(Generator.GOTO, null, null, v);
      RESULT = new Etiqueta(v,f);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Condicion ::= Expresion MAYOREQ Expresion 
            {
              Etiqueta RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
      String v = Generator.nuevaEtiqueta();
      String f = Generator.nuevaEtiqueta();
      PLXC.out.print("if(" + Generator.expresion(e1,0) + "<" + Generator.expresion(e2,0) + ") ");
      Generator.salida(Generator.GOTO, null, null, f);
      Generator.salida(Generator.GOTO, null, null, v);
      RESULT = new Etiqueta(v,f);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Condicion ::= Expresion NOTEQ Expresion 
            {
              Etiqueta RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
      String v = Generator.nuevaEtiqueta();
      String f = Generator.nuevaEtiqueta();
      PLXC.out.print("if(" + Generator.expresion(e1,0) + "==" + Generator.expresion(e2,0) + ") ");
      Generator.salida(Generator.GOTO, null, null, f);
      Generator.salida(Generator.GOTO, null, null, v);
      RESULT = new Etiqueta(v,f);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Condicion ::= Expresion EQEQ Expresion 
            {
              Etiqueta RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
      String v = Generator.nuevaEtiqueta();
      String f = Generator.nuevaEtiqueta();
      PLXC.out.print("if(" + Generator.expresion(e1,0) + "==" + Generator.expresion(e2,0) + ") ");
      Generator.salida(Generator.GOTO, null, null, v);
      Generator.salida(Generator.GOTO, null, null, f);
      RESULT = new Etiqueta(v,f);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Ident ::= MAT 
            {
              String RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = m;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ident",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Ident ::= IDENT 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = i;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ident",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Expresion ::= IDENT LEN 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
      ArrayList<String> aux = new ArrayList<>();
      for(int u = 0; u<profundidad+1;u++)
        aux.addAll(bloques.get(u));
      String s=null;
      for (int u =0; u<aux.size();u++){
        s = aux.get(u);
        if (s.substring(0,s.length()-1).equals("a"+i)){
          break;
        }
      }
      String t = Generator.nuevaTemp();
      Generator.salida(Generator.ASIG, t, s.substring(s.length()-1), null);
      RESULT = t;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Expresion ::= Ident EQ Expresion 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
      ArrayList<String> aux = new ArrayList<>();
      for(int u = 0; u<profundidad+1;u++) aux.addAll(bloques.get(u));
      /* PLC.out.print(aux); */
      if (!aux.contains(i))
        throw new java.lang.Error("\n...\nerror:\n# variable no encontrada\n...");
      Generator.salida(Generator.ASIG, i, Generator.expresion(e,0), null);
      RESULT = i;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Expresion ::= MAT 
            {
              String RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
      m = m.substring(0,m.indexOf("["));
      ArrayList<String> aux = new ArrayList<>();
      for(int u = 0; u<profundidad+1;u++)
        aux.addAll(bloques.get(u));

      boolean repe = false;
      String s=null;
      for (int u =0; u<aux.size();u++){
        s = aux.get(u);
        if (s.substring(0,s.length()-1).equals("a"+m)){
          repe = true;
          break;
        }
      }
      if (!repe)
        throw new java.lang.Error("\n...\nerror:\n# variable no encontrada\n...");

      RESULT = m;
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Expresion ::= IDENT 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
      ArrayList<String> aux = new ArrayList<>();
      for(int u = 0; u<profundidad+1;u++) aux.addAll(bloques.get(u));
      /* PLC.out.print(aux); */

      if (!aux.contains(i))
        throw new java.lang.Error("\n...\nerror:\n# variable no encontrada\n...");

      RESULT = i;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Expresion ::= AP INT CP Expresion 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
      if (!Generator.ints.contains(e) && !Generator.chars.contains(e) && e.charAt(0) == 'c') RESULT = "i" + e.substring(1);
      else RESULT = "i" + e;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Expresion ::= AP CHAR CP Expresion 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
      if  (!Generator.ints.contains(e) && !Generator.chars.contains(e) && e.charAt(0) == 'i') RESULT = "c" + e.substring(1);
      else RESULT = "c" + e;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Expresion ::= CARACTER 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
      int a = c.charAt(1);
      if (a == '\\'){
        if(c.charAt(2) == 'u'){
          RESULT = "c" + Integer.parseInt(c.substring(3,7), 16);
        } else {
          a = c.charAt(2);
          RESULT = "c" + String.valueOf(a);
        }
      } else RESULT = "c" + String.valueOf(a);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Expresion ::= ENTERO 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = "i" + e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Expresion ::= MINN NT$10 Expresion 
            {
              String RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
      String v = Generator.nuevaEtiqueta();
      String v2 = Generator.nuevaEtiqueta();
      String f = Generator.nuevaEtiqueta();
      PLXC.out.print("if(" + Generator.expresion(e,0) + "<65) ");
      Generator.salida(Generator.GOTO, null, null, f);
      Generator.salida(Generator.GOTO, null, null, v);

      Generator.salida(Generator.LABEL, null, null, v);
      PLXC.out.print("if(" + Generator.expresion(e,0) + "<91) ");
      Generator.salida(Generator.GOTO, null, null, v2);
      Generator.salida(Generator.GOTO, null, null, f);

      Generator.salida(Generator.LABEL, null, null, v2);
      String t = Generator.nuevaTemp();
      Generator.salida(Generator.MAS, Generator.expresion(e,0), "32", t);
      Generator.salida(Generator.LABEL, null, null, f);
      RESULT = t;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // NT$10 ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Expresion ::= MIN Expresion 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
      String v = Generator.nuevaEtiqueta();
      String v2 = Generator.nuevaEtiqueta();
      String f = Generator.nuevaEtiqueta();
      PLXC.out.print("if(" + Generator.expresion(e,0) + "<65) ");
      Generator.salida(Generator.GOTO, null, null, f);
      Generator.salida(Generator.GOTO, null, null, v);

      Generator.salida(Generator.LABEL, null, null, v);
      PLXC.out.print("if(" + Generator.expresion(e,0) + "<91) ");
      Generator.salida(Generator.GOTO, null, null, v2);
      Generator.salida(Generator.GOTO, null, null, f);

      Generator.salida(Generator.LABEL, null, null, v2);
      String t = Generator.nuevaTemp();
      Generator.salida(Generator.MAS, Generator.expresion(e,0), "32", t);
      Generator.salida(Generator.LABEL, null, null, f);
      RESULT = t;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Expresion ::= NOT Expresion 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
      String v = Generator.nuevaEtiqueta();
      String v2 = Generator.nuevaEtiqueta();
      String f = Generator.nuevaEtiqueta();
      PLXC.out.print("if(" + Generator.expresion(e,0) + "<97) ");
      Generator.salida(Generator.GOTO, null, null, f);
      Generator.salida(Generator.GOTO, null, null, v);

      Generator.salida(Generator.LABEL, null, null, v);
      PLXC.out.print("if(" + Generator.expresion(e,0) + "<123) ");
      Generator.salida(Generator.GOTO, null, null, v2);
      Generator.salida(Generator.GOTO, null, null, f);

      Generator.salida(Generator.LABEL, null, null, v2);
      String t = Generator.nuevaTemp();
      Generator.salida(Generator.MENOS, Generator.expresion(e,0), "32", t);
      Generator.salida(Generator.LABEL, null, null, f);
      RESULT = t;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Expresion ::= AP Expresion CP 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Expresion ::= Expresion MOD Expresion 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
      e1 = Generator.expresion(e1,0);
      e2 = Generator.expresion(e2,0);
      String t1 = Generator.nuevaTemp();
      Generator.salida(Generator.DIV, e1, e2, t1);
      String t2 = Generator.nuevaTemp();
      Generator.salida(Generator.POR, t1, e2, t2);
      String t3 = Generator.nuevaTemp();
      Generator.salida(Generator.MENOS, e1, t2, t3);
      RESULT = t3;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Expresion ::= IDENT MENOSMENOS 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
      String t1 = Generator.nuevaTemp();
      Generator.salida(Generator.ASIG, t1, i, null);
      RESULT = t1;

      String t2 = Generator.nuevaTemp();
      Generator.salida(Generator.MENOS, i, "1", t2);
      Generator.salida(Generator.ASIG, i, t2, null);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Expresion ::= IDENT MASMAS 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
      String t1 = Generator.nuevaTemp();
      Generator.salida(Generator.ASIG, t1, i, null);
      RESULT = t1;

      String t2 = Generator.nuevaTemp();
      Generator.salida(Generator.MAS, i, "1", t2);
      Generator.salida(Generator.ASIG, i, t2, null);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Expresion ::= MENOSMENOS IDENT 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
      String t = Generator.nuevaTemp();
      Generator.salida(Generator.MENOS, i, "1", t);
      RESULT = t;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Expresion ::= MASMAS IDENT 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
      String t = Generator.nuevaTemp();
      Generator.salida(Generator.MAS, i, "1", t);
      RESULT = t;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Expresion ::= MENOS Expresion 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
      String t = Generator.nuevaTemp();
      Generator.salida(Generator.MENOS, "0", Generator.expresion(e,0), t);
      RESULT = t;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Expresion ::= Expresion DIV Expresion 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
      String t = Generator.nuevaTemp();
      Generator.salida(Generator.DIV, Generator.expresion(e1,0), Generator.expresion(e2,0), t);
      RESULT = t;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Expresion ::= Expresion POR Expresion 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
      String t = Generator.nuevaTemp();
      Generator.salida(Generator.POR, Generator.expresion(e1,0), Generator.expresion(e2,0), t);
      RESULT = t;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Expresion ::= Expresion MENOS Expresion 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
      String t = Generator.nuevaTemp();
      Generator.salida(Generator.MENOS, Generator.expresion(e1,0), Generator.expresion(e2,0), t);
      RESULT = t;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Expresion ::= Expresion MAS Expresion 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
      String t = Generator.nuevaTemp();
      Generator.salida(Generator.MAS, Generator.expresion(e1,0), Generator.expresion(e2,0), t);
      RESULT = t;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Declaracionchar ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Declaracionchar",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Declaracionchar ::= Ident EQ AC Charlist CC Declaracionchar 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
      if (bloques.get(profundidad).contains(i))
        throw new java.lang.Error("...\nerror:\n# variable ya declarada\n...");
      else{
        int aux2 = i.indexOf("[")+1;
        int c2 = Integer.parseInt(i.substring(aux2,i.length()-1));
        if (c2>0 && aux2>0){
          bloques.get(profundidad).add("a"+i.substring(0,aux2-1)+c2);
          Generator.ints.add("a"+i.substring(0,aux2-1));
          for(int u=0;u<c2;u++){
            bloques.get(profundidad).add(i.substring(0,aux2-1)+"["+u+"]");
            Generator.chars.add(i.substring(0,aux2-1)+"["+u+"]");
          }
        } else {
          bloques.get(profundidad).add(i);
          Generator.chars.add(i);
        }
      }

      i = i.substring(0,i.indexOf("["));
      ArrayList<String> aux = new ArrayList<>();
      for(int u = 0; u<profundidad+1;u++)
        aux.addAll(bloques.get(u));

      boolean repe = false;
      String s=null;
      for (int u =0; u<aux.size();u++){
        s = aux.get(u);
        if (s.substring(0,s.length()-1).equals("a"+i)){
          repe = true;
          break;
        }
      }
      if (!repe)
        throw new java.lang.Error("\n...\nerror:\n# variable no encontrada\n...");

      ArrayList<String> aa = new ArrayList<>();

      int x;
      while(true){
        c=c.substring(1);
        x = c.indexOf("c");
        if(x<0) {aa.add(c); break;}
        else {
          x = c.indexOf("c");
          if (x>=0){
            aa.add(c.substring(0,c.indexOf("c")));
            c = c.substring(c.indexOf("c"));
          }else {
            aa.add(c);
            c=c.substring(x);
          }
        }
      }

      if(aa.size()!=Integer.parseInt(s.substring(s.length()-1)))
        throw new java.lang.Error("\n...\nerror\n...");


      for(int u = 0 ; u<Integer.parseInt(s.substring(s.length()-1));u++)
        Generator.salida(Generator.ASIG, i+"["+u+"]", aa.get(u), null);
      RESULT = i;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Declaracionchar",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Declaracionchar ::= Ident EQ Expresion Declaracionchar 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
      if (bloques.get(profundidad).contains(i))
        throw new java.lang.Error("...\nerror:\n# variable ya declarada\n...");
      else{
        int aux = i.indexOf("[")+1;
        int c = Integer.parseInt(i.substring(aux,i.length()-1));
        if (c>0 && aux>0){
          bloques.get(profundidad).add("a"+i.substring(0,aux-1)+c);
          Generator.ints.add("a"+i.substring(0,aux-1));
          for(int u=0;u<c;u++){
            bloques.get(profundidad).add(i.substring(0,aux-1)+"["+u+"]");
            Generator.chars.add(i.substring(0,aux-1)+"["+u+"]");
          }
        } else {
          bloques.get(profundidad).add(i);
          Generator.chars.add(i);
        }
      }
      Generator.salida(Generator.ASIG, i, e.substring(1), null);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Declaracionchar",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Declaracionchar ::= Ident Declaracionchar 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    if (bloques.get(profundidad).contains(i))
      throw new java.lang.Error("...\nerror:\n# variable ya declarada\n...");
    else{
      int aux = i.indexOf("[")+1;
      if(aux>0){
        int c = Integer.parseInt(i.substring(aux,i.length()-1));

        if (c>0){
          bloques.get(profundidad).add("a"+i.substring(0,aux-1)+c);
          Generator.ints.add("a"+i.substring(0,aux-1)+c);
          for(int u=0;u<c;u++){
            bloques.get(profundidad).add(i.substring(0,aux-1)+"["+u+"]");
            Generator.chars.add(i.substring(0,aux-1)+"["+u+"]");
          }
      }
      } else {
        bloques.get(profundidad).add(i);
        Generator.chars.add(i);
      }
    }
    /* PLXC.out.println(Generator.chars); */
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Declaracionchar",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Declaracionint ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Declaracionint",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Declaracionint ::= Ident EQ Expresion Declaracionint 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
      if (bloques.get(profundidad).contains(i))
        throw new java.lang.Error("...\nerror:\n# variable ya declarada\n...");
      bloques.get(profundidad).add(i);
      Generator.ints.add(i);
      Generator.salida(Generator.ASIG, i, e.substring(1), null);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Declaracionint",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Declaracionint ::= Ident Declaracionint 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    if (bloques.get(profundidad).contains(i))
      throw new java.lang.Error("...\nerror:\n# variable ya declarada\n...");

    bloques.get(profundidad).add(i);
    Generator.ints.add(i);
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Declaracionint",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // For ::= FOR 
            {
              Etiqueta RESULT =null;
		
    RESULT = new Etiqueta(null, null);
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("For",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Do ::= DO 
            {
              Etiqueta RESULT =null;
		
    RESULT = new Etiqueta(null, null);
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Do",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // While ::= WHILE 
            {
              Etiqueta RESULT =null;
		
    RESULT = new Etiqueta(null, null);
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("While",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Else ::= 
            {
              Etiqueta RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Else",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Else ::= ELSE Sentencia 
            {
              Etiqueta RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Else",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // If ::= IF 
            {
              Etiqueta RESULT =null;
		
  RESULT = new Etiqueta(null, null);
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("If",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Charlist ::= Expresion 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = c;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Charlist",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Charlist ::= Charlist Expresion 
            {
              String RESULT =null;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String c2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = c1 + c2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Charlist",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Sentencia ::= AC NT$9 Lista_de_sent CC 
            {
              String RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
        bloques.get(profundidad).clear();
        profundidad--;
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NT$9 ::= 
            {
              String RESULT =null;

    bloques.add(new ArrayList<>());
    profundidad++;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Sentencia ::= CHAR Declaracionchar PYC 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Sentencia ::= INT Declaracionint PYC 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Sentencia ::= Ident EQ AC Charlist CC PYC 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
      ArrayList<String> aux = new ArrayList<>();
      for(int u = 0; u<profundidad+1;u++)
        aux.addAll(bloques.get(u));
      /* PLC.out.print(aux); */

      boolean repe = false;
      String s=null;
      for (int u =0; u<aux.size();u++){
        s = aux.get(u);
        if (s.substring(0,s.length()-1).equals("a"+i)){
          repe = true;
          break;
        }
      }
      if (!repe)
        throw new java.lang.Error("\n...\nerror:\n# variable no encontrada\n...");

      ArrayList<String> aa = new ArrayList<>();

      int x;
      while(true){
        c=c.substring(1);
        x = c.indexOf("c");
        if(x<0) {aa.add(c); break;}
        else {
          x = c.indexOf("c");
          if (x>=0){
            aa.add(c.substring(0,c.indexOf("c")));
            c = c.substring(c.indexOf("c"));
          }else {
            aa.add(c);
            c=c.substring(x);
          }
        }
      }

      if(aa.size()!=Integer.parseInt(s.substring(s.length()-1)))
        throw new java.lang.Error("\n...\nerror\n...");
      for(int u = 0 ; u<Integer.parseInt(s.substring(s.length()-1));u++)
        Generator.salida(Generator.ASIG, i+"["+u+"]", aa.get(u), null);
      RESULT = i;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Sentencia ::= PRINT AP Expresion CP PYC 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
      /* PLXC.out.print(e); */
      Generator.expresion(e,1);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Sentencia ::= For AP Expresion PYC NT$6 Condicion NT$7 PYC Expresion CP NT$8 Sentencia 
            {
              String RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		Etiqueta f = (Etiqueta)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Etiqueta c = (Etiqueta)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		
      Generator.salida(Generator.GOTO, null, null, f.f());
      Generator.salida(Generator.LABEL, null, null, c.f());
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NT$8 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Etiqueta f = (Etiqueta)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Etiqueta c = (Etiqueta)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

      Generator.salida(Generator.GOTO, null, null, f.v());
      Generator.salida(Generator.LABEL, null, null, c.v());
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NT$7 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Etiqueta f = (Etiqueta)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Etiqueta c = (Etiqueta)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

      Generator.salida(Generator.LABEL, null, null, f.f());
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NT$6 ::= 
            {
              String RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Etiqueta f = (Etiqueta)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

      f.setV(Generator.nuevaEtiqueta());
      f.setF(Generator.nuevaEtiqueta());
      Generator.salida(Generator.LABEL, null, null, f.v());
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Sentencia ::= Do NT$5 Sentencia WHILE AP Condicion CP PYC 
            {
              String RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Etiqueta d = (Etiqueta)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Etiqueta c = (Etiqueta)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
      Generator.salida(Generator.LABEL, null, null, c.v());
      Generator.salida(Generator.GOTO, null, null, d.v());
      Generator.salida(Generator.LABEL, null, null, c.f());
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NT$5 ::= 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Etiqueta d = (Etiqueta)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

      d.setV(Generator.nuevaEtiqueta());
      Generator.salida(Generator.LABEL, null, null, d.v());
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Sentencia ::= While AP NT$3 Condicion CP NT$4 Sentencia 
            {
              String RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Etiqueta w = (Etiqueta)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Etiqueta c = (Etiqueta)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
      Generator.salida(Generator.GOTO, null, null, w.v());
      Generator.salida(Generator.LABEL, null, null, c.f());
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NT$4 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Etiqueta w = (Etiqueta)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Etiqueta c = (Etiqueta)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

      Generator.salida(Generator.LABEL, null, null, c.v());
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NT$3 ::= 
            {
              String RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Etiqueta w = (Etiqueta)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

      w.setV(Generator.nuevaEtiqueta());
      Generator.salida(Generator.LABEL, null, null, w.v());
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Sentencia ::= If AP Condicion CP NT$1 Sentencia NT$2 Else 
            {
              String RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Etiqueta i = (Etiqueta)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Etiqueta c = (Etiqueta)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		
      Generator.salida(Generator.LABEL, null, null, i.f());
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$2 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Etiqueta i = (Etiqueta)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Etiqueta c = (Etiqueta)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

      i.setF(Generator.nuevaEtiqueta());
      Generator.salida(Generator.GOTO, null, null, i.f());
      Generator.salida(Generator.LABEL, null, null, c.f());
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NT$1 ::= 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Etiqueta i = (Etiqueta)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Etiqueta c = (Etiqueta)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

      Generator.salida(Generator.LABEL, null, null, c.v());
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Sentencia ::= Expresion PYC 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Lista_de_sent ::= Lista_de_sent Sentencia 
            {
              String RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Lista_de_sent",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Lista_de_sent ::= Sentencia 
            {
              String RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Lista_de_sent",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // s ::= NT$0 Lista_de_sent 
            {
              String RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              String RESULT =null;
bloques.add(new ArrayList<>());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= s EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

