
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Aug 03 12:21:44 GMT 2019
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.Hashtable;
import java.util.ArrayList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Aug 03 12:21:44 GMT 2019
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\110\000\002\002\004\000\002\002\004\000\002\002" +
    "\004\000\002\002\002\000\002\003\007\000\002\003\006" +
    "\000\002\003\007\000\002\003\007\000\002\003\007\000" +
    "\002\004\007\000\002\004\007\000\002\004\007\000\002" +
    "\004\006\000\002\004\007\000\002\004\007\000\002\004" +
    "\007\000\002\005\003\000\002\005\004\000\002\005\002" +
    "\000\002\011\003\000\002\011\004\000\002\012\005\000" +
    "\002\012\005\000\002\012\005\000\002\012\005\000\002" +
    "\012\005\000\002\012\006\000\002\012\006\000\002\012" +
    "\005\000\002\012\005\000\002\012\005\000\002\012\005" +
    "\000\002\012\005\000\002\013\003\000\002\013\003\000" +
    "\002\013\005\000\002\014\005\000\002\014\003\000\002" +
    "\014\005\000\002\014\003\000\002\006\003\000\002\006" +
    "\003\000\002\007\005\000\002\007\005\000\002\007\006" +
    "\000\002\007\006\000\002\007\005\000\002\007\005\000" +
    "\002\007\005\000\002\007\006\000\002\007\006\000\002" +
    "\007\006\000\002\007\006\000\002\010\005\000\002\010" +
    "\005\000\002\010\006\000\002\010\006\000\002\010\005" +
    "\000\002\010\005\000\002\010\006\000\002\010\006\000" +
    "\002\010\005\000\002\010\005\000\002\010\006\000\002" +
    "\010\006\000\002\010\006\000\002\015\005\000\002\015" +
    "\003\000\002\015\003\000\002\015\005\000\002\015\005" +
    "\000\002\015\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\224\000\010\002\ufffe\006\007\016\005\001\002\000" +
    "\004\002\226\001\002\000\004\017\221\001\002\000\010" +
    "\002\ufffe\006\007\016\005\001\002\000\010\004\012\005" +
    "\014\007\uffef\001\002\000\010\002\ufffe\006\007\016\005" +
    "\001\002\000\004\002\000\001\002\000\006\005\027\007" +
    "\026\001\002\000\004\007\015\001\002\000\006\007\ufff1" +
    "\020\ufff1\001\002\000\004\010\016\001\002\000\012\005" +
    "\024\013\022\025\020\026\023\001\002\000\010\002\ufff3" +
    "\006\ufff3\016\ufff3\001\002\000\022\002\uffd9\006\uffd9\011" +
    "\uffd9\016\uffd9\020\uffd9\022\uffd9\027\uffd9\030\uffd9\001\002" +
    "\000\010\002\ufff7\006\ufff7\016\ufff7\001\002\000\004\005" +
    "\025\001\002\000\022\002\uffd8\006\uffd8\011\uffd8\016\uffd8" +
    "\020\uffd8\022\uffd8\027\uffd8\030\uffd8\001\002\000\034\002" +
    "\uffee\006\uffee\011\uffee\012\uffee\013\uffee\014\uffee\015\uffee" +
    "\016\uffee\020\uffee\022\uffee\023\uffee\027\uffee\030\uffee\001" +
    "\002\000\034\002\uffed\006\uffed\011\uffed\012\uffed\013\uffed" +
    "\014\uffed\015\uffed\016\uffed\020\uffed\022\uffed\023\uffed\027" +
    "\uffed\030\uffed\001\002\000\006\010\030\011\031\001\002" +
    "\000\006\007\ufff0\020\ufff0\001\002\000\022\004\047\005" +
    "\024\013\022\017\046\021\032\024\034\025\020\026\023" +
    "\001\002\000\030\004\035\005\024\013\022\017\046\021" +
    "\032\024\034\025\020\026\023\031\033\032\043\033\037" +
    "\001\002\000\004\017\212\001\002\000\004\017\207\001" +
    "\002\000\004\017\176\001\002\000\022\011\145\012\uffdf" +
    "\013\uffdf\014\uffdf\015\uffdf\023\uffdf\027\uffdf\030\uffdf\001" +
    "\002\000\030\002\ufff8\006\ufff8\011\uffe0\012\uffe0\013\uffe0" +
    "\014\uffe0\015\uffe0\016\ufff8\023\uffe0\027\uffe0\030\uffe0\001" +
    "\002\000\004\017\171\001\002\000\022\002\ufffb\006\ufffb" +
    "\012\065\013\066\014\071\015\070\016\ufffb\023\067\001" +
    "\002\000\014\002\ufff9\006\ufff9\016\ufff9\027\161\030\162" +
    "\001\002\000\016\002\ufff4\006\ufff4\011\131\016\ufff4\027" +
    "\151\030\152\001\002\000\004\017\116\001\002\000\010" +
    "\002\ufff2\006\ufff2\016\ufff2\001\002\000\022\011\100\012" +
    "\053\013\054\014\057\015\056\023\055\027\101\030\102" +
    "\001\002\000\016\004\047\005\024\013\022\017\046\021" +
    "\032\024\034\001\002\000\032\002\uffdf\006\uffdf\012\uffdf" +
    "\013\uffdf\014\uffdf\015\uffdf\016\uffdf\020\uffdf\022\uffdf\023" +
    "\uffdf\027\uffdf\030\uffdf\001\002\000\034\002\uffe0\006\uffe0" +
    "\011\uffe0\012\uffe0\013\uffe0\014\uffe0\015\uffe0\016\uffe0\020" +
    "\uffe0\022\uffe0\023\uffe0\027\uffe0\030\uffe0\001\002\000\016" +
    "\012\065\013\066\014\071\015\070\020\072\023\067\001" +
    "\002\000\014\012\053\013\054\014\057\015\056\023\055" +
    "\001\002\000\012\004\047\005\024\013\022\017\046\001" +
    "\002\000\012\004\047\005\024\013\022\017\046\001\002" +
    "\000\012\004\047\005\024\013\022\017\046\001\002\000" +
    "\012\004\047\005\024\013\022\017\046\001\002\000\012" +
    "\004\047\005\024\013\022\017\046\001\002\000\026\002" +
    "\uffea\006\uffea\012\uffea\013\uffea\014\uffea\015\uffea\016\uffea" +
    "\020\uffea\022\uffea\023\uffea\001\002\000\026\002\uffe9\006" +
    "\uffe9\012\uffe9\013\uffe9\014\uffe9\015\uffe9\016\uffe9\020\uffe9" +
    "\022\uffe9\023\uffe9\001\002\000\026\002\uffe8\006\uffe8\012" +
    "\uffe8\013\uffe8\014\uffe8\015\uffe8\016\uffe8\020\uffe8\022\uffe8" +
    "\023\uffe8\001\002\000\026\002\uffeb\006\uffeb\012\uffeb\013" +
    "\uffeb\014\uffeb\015\uffeb\016\uffeb\020\uffeb\022\uffeb\023\uffeb" +
    "\001\002\000\026\002\uffec\006\uffec\012\uffec\013\uffec\014" +
    "\uffec\015\uffec\016\uffec\020\uffec\022\uffec\023\uffec\001\002" +
    "\000\012\004\047\005\024\013\022\017\046\001\002\000" +
    "\012\004\047\005\024\013\022\017\046\001\002\000\012" +
    "\004\047\005\024\013\022\017\046\001\002\000\012\004" +
    "\047\005\024\013\022\017\046\001\002\000\012\004\047" +
    "\005\024\013\022\017\046\001\002\000\034\002\uffde\006" +
    "\uffde\011\uffde\012\uffde\013\uffde\014\uffde\015\uffde\016\uffde" +
    "\020\uffde\022\uffde\023\uffde\027\uffde\030\uffde\001\002\000" +
    "\026\002\uffe3\006\uffe3\012\uffe3\013\uffe3\014\uffe3\015\uffe3" +
    "\016\uffe3\020\uffe3\022\uffe3\023\uffe3\001\002\000\026\002" +
    "\uffe2\006\uffe2\012\uffe2\013\uffe2\014\uffe2\015\uffe2\016\uffe2" +
    "\020\uffe2\022\uffe2\023\uffe2\001\002\000\026\002\uffe1\006" +
    "\uffe1\012\uffe1\013\uffe1\014\uffe1\015\uffe1\016\uffe1\020\uffe1" +
    "\022\uffe1\023\uffe1\001\002\000\026\002\uffe4\006\uffe4\012" +
    "\uffe4\013\uffe4\014\uffe4\015\uffe4\016\uffe4\020\uffe4\022\uffe4" +
    "\023\uffe4\001\002\000\026\002\uffe5\006\uffe5\012\uffe5\013" +
    "\uffe5\014\uffe5\015\uffe5\016\uffe5\020\uffe5\022\uffe5\023\uffe5" +
    "\001\002\000\012\004\047\005\024\013\022\017\046\001" +
    "\002\000\020\004\047\005\024\011\110\013\022\017\046" +
    "\025\020\026\023\001\002\000\020\004\047\005\024\011" +
    "\103\013\022\017\046\025\020\026\023\001\002\000\016" +
    "\004\047\005\024\013\022\017\046\025\020\026\023\001" +
    "\002\000\010\002\uffc3\006\uffc3\016\uffc3\001\002\000\020" +
    "\002\uffd6\006\uffd6\016\uffd6\020\uffd6\022\uffd6\027\uffd6\030" +
    "\uffd6\001\002\000\010\002\uffc1\006\uffc1\016\uffc1\001\002" +
    "\000\020\002\uffd4\006\uffd4\016\uffd4\020\uffd4\022\uffd4\027" +
    "\uffd4\030\uffd4\001\002\000\016\004\047\005\024\013\022" +
    "\017\046\025\020\026\023\001\002\000\010\002\uffc4\006" +
    "\uffc4\016\uffc4\001\002\000\020\002\uffd7\006\uffd7\016\uffd7" +
    "\020\uffd7\022\uffd7\027\uffd7\030\uffd7\001\002\000\010\002" +
    "\uffc2\006\uffc2\016\uffc2\001\002\000\020\002\uffd5\006\uffd5" +
    "\016\uffd5\020\uffd5\022\uffd5\027\uffd5\030\uffd5\001\002\000" +
    "\020\002\uffd3\006\uffd3\016\uffd3\020\uffd3\022\uffd3\027\uffd3" +
    "\030\uffd3\001\002\000\024\004\117\005\024\013\022\017" +
    "\046\025\020\026\023\031\033\032\043\033\121\001\002" +
    "\000\014\011\145\020\uffbd\022\146\027\uffdf\030\uffdf\001" +
    "\002\000\004\020\144\001\002\000\004\017\137\001\002" +
    "\000\006\020\uffba\022\135\001\002\000\010\011\131\020" +
    "\uffbe\022\132\001\002\000\010\011\100\027\125\030\126" +
    "\001\002\000\014\004\047\005\024\011\130\013\022\017" +
    "\046\001\002\000\014\004\047\005\024\011\127\013\022" +
    "\017\046\001\002\000\012\004\047\005\024\013\022\017" +
    "\046\001\002\000\012\004\047\005\024\013\022\017\046" +
    "\001\002\000\006\025\020\026\023\001\002\000\024\004" +
    "\117\005\024\013\022\017\046\025\020\026\023\031\033" +
    "\032\043\033\121\001\002\000\004\020\uffbf\001\002\000" +
    "\020\002\uffd2\006\uffd2\016\uffd2\020\uffd2\022\uffd2\027\uffd2" +
    "\030\uffd2\001\002\000\024\004\117\005\024\013\022\017" +
    "\046\025\020\026\023\031\033\032\043\033\121\001\002" +
    "\000\004\020\uffbb\001\002\000\010\004\141\025\020\026" +
    "\023\001\002\000\004\020\143\001\002\000\004\020\142" +
    "\001\002\000\020\002\uffcd\006\uffcd\016\uffcd\020\uffcd\022" +
    "\uffcd\027\uffcd\030\uffcd\001\002\000\020\002\uffce\006\uffce" +
    "\016\uffce\020\uffce\022\uffce\027\uffce\030\uffce\001\002\000" +
    "\020\002\uffcf\006\uffcf\016\uffcf\020\uffcf\022\uffcf\027\uffcf" +
    "\030\uffcf\001\002\000\006\025\020\026\023\001\002\000" +
    "\024\004\117\005\024\013\022\017\046\025\020\026\023" +
    "\031\033\032\043\033\121\001\002\000\004\020\uffbc\001" +
    "\002\000\020\002\uffd1\006\uffd1\016\uffd1\020\uffd1\022\uffd1" +
    "\027\uffd1\030\uffd1\001\002\000\014\004\047\005\024\011" +
    "\157\013\022\017\046\001\002\000\014\004\047\005\024" +
    "\011\154\013\022\017\046\001\002\000\010\002\uffc7\006" +
    "\uffc7\016\uffc7\001\002\000\012\004\047\005\024\013\022" +
    "\017\046\001\002\000\010\002\uffc5\006\uffc5\016\uffc5\001" +
    "\002\000\010\002\uffc8\006\uffc8\016\uffc8\001\002\000\012" +
    "\004\047\005\024\013\022\017\046\001\002\000\010\002" +
    "\uffc6\006\uffc6\016\uffc6\001\002\000\014\004\047\005\024" +
    "\011\167\013\022\017\046\001\002\000\014\004\047\005" +
    "\024\011\164\013\022\017\046\001\002\000\010\002\uffcb" +
    "\006\uffcb\016\uffcb\001\002\000\012\004\047\005\024\013" +
    "\022\017\046\001\002\000\010\002\uffc9\006\uffc9\016\uffc9" +
    "\001\002\000\010\002\uffcc\006\uffcc\016\uffcc\001\002\000" +
    "\012\004\047\005\024\013\022\017\046\001\002\000\010" +
    "\002\uffca\006\uffca\016\uffca\001\002\000\024\004\172\005" +
    "\024\013\022\017\046\025\020\026\023\031\033\032\043" +
    "\033\121\001\002\000\014\011\145\020\142\022\146\027" +
    "\uffdf\030\uffdf\001\002\000\004\020\175\001\002\000\010" +
    "\011\131\020\143\022\132\001\002\000\010\002\uffc0\006" +
    "\uffc0\016\uffc0\001\002\000\016\004\047\005\024\013\022" +
    "\017\046\021\032\024\034\001\002\000\020\012\065\013" +
    "\066\014\071\015\070\020\uffda\022\205\023\067\001\002" +
    "\000\004\020\204\001\002\000\020\012\053\013\054\014" +
    "\057\015\056\020\uffdc\022\202\023\055\001\002\000\016" +
    "\004\047\005\024\013\022\017\046\021\032\024\034\001" +
    "\002\000\004\020\uffdd\001\002\000\026\002\uffe7\006\uffe7" +
    "\012\uffe7\013\uffe7\014\uffe7\015\uffe7\016\uffe7\020\uffe7\022" +
    "\uffe7\023\uffe7\001\002\000\016\004\047\005\024\013\022" +
    "\017\046\021\032\024\034\001\002\000\004\020\uffdb\001" +
    "\002\000\024\004\117\005\024\013\022\017\046\025\020" +
    "\026\023\031\033\032\043\033\121\001\002\000\004\020" +
    "\211\001\002\000\020\002\uffd0\006\uffd0\016\uffd0\020\uffd0" +
    "\022\uffd0\027\uffd0\030\uffd0\001\002\000\016\004\047\005" +
    "\024\013\022\017\046\021\032\024\034\001\002\000\004" +
    "\020\214\001\002\000\026\002\uffe6\006\uffe6\012\uffe6\013" +
    "\uffe6\014\uffe6\015\uffe6\016\uffe6\020\uffe6\022\uffe6\023\uffe6" +
    "\001\002\000\022\002\ufffd\006\ufffd\012\uffe0\013\uffe0\014" +
    "\uffe0\015\uffe0\016\ufffd\023\uffe0\001\002\000\010\002\ufffa" +
    "\006\ufffa\016\ufffa\001\002\000\022\002\ufff6\006\ufff6\012" +
    "\065\013\066\014\071\015\070\016\ufff6\023\067\001\002" +
    "\000\004\002\uffff\001\002\000\010\004\222\005\014\020" +
    "\uffef\001\002\000\006\005\027\020\225\001\002\000\004" +
    "\020\224\001\002\000\010\002\ufff5\006\ufff5\016\ufff5\001" +
    "\002\000\010\002\ufffc\006\ufffc\016\ufffc\001\002\000\004" +
    "\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\224\000\010\002\003\003\005\004\007\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\002\217\003\005" +
    "\004\007\001\001\000\004\005\012\001\001\000\010\002" +
    "\010\003\005\004\007\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\006\016\011\020\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\006\215\011\214\012" +
    "\216\013\051\001\001\000\016\006\041\007\040\010\043" +
    "\011\035\012\037\013\044\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\011\047\012\050\013\051\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\011\047\013\063\001\001\000" +
    "\006\011\047\013\062\001\001\000\006\011\047\013\061" +
    "\001\001\000\006\011\047\013\060\001\001\000\006\011" +
    "\047\013\057\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\011\047\013\076\001\001\000\006\011\047\013\075" +
    "\001\001\000\006\011\047\013\074\001\001\000\006\011" +
    "\047\013\073\001\001\000\006\011\047\013\072\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\011\047\013\114\001\001\000\010\006\110\011\047\013" +
    "\111\001\001\000\010\006\103\011\047\013\104\001\001" +
    "\000\010\006\105\011\047\013\106\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\006\112\011\047\013\113\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\006\122\007\121\011\047\013" +
    "\123\015\117\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\011\047\013\111\001\001\000\006" +
    "\011\047\013\104\001\001\000\006\011\047\013\106\001" +
    "\001\000\006\011\047\013\113\001\001\000\004\006\133" +
    "\001\001\000\014\006\122\007\121\011\047\013\123\015" +
    "\132\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\006\122\007\121\011\047\013\123\015\135\001\001\000" +
    "\002\001\001\000\004\006\137\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\147\001\001\000\014\006\122" +
    "\007\121\011\047\013\123\015\146\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\011\047\013\155\001\001" +
    "\000\006\011\047\013\152\001\001\000\002\001\001\000" +
    "\006\011\047\013\154\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\011\047\013\157\001\001\000\002\001" +
    "\001\000\006\011\047\013\165\001\001\000\006\011\047" +
    "\013\162\001\001\000\002\001\001\000\006\011\047\013" +
    "\164\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\011\047\013\167\001\001\000\002\001\001\000\014\006" +
    "\173\007\121\011\047\013\123\015\172\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\011\047\012\176\013\200\014\177\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\011\047\012\176\013\200\014\202\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\011\047\012\176\013" +
    "\200\014\205\001\001\000\002\001\001\000\014\006\122" +
    "\007\121\011\047\013\123\015\207\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\011\047\012\176\013\200" +
    "\014\212\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\005\222\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


  Hashtable<String, String> ID = new Hashtable<>();
  public String leer(Hashtable<String, String> ht, String id){
    String num = ht.get(id);
    if(num==null) num = "0";
    return num;
  }

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // lb ::= comp 
            {
              ArrayList<Boolean> RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<Boolean> r = new ArrayList<>();  r.add(n1.equals("VERDADERO") ? true : false);  RESULT = r; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lb",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // lb ::= comp PC lb 
            {
              ArrayList<Boolean> RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Boolean> l = (ArrayList<Boolean>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<Boolean> r = new ArrayList<>();  r.add(n1.equals("VERDADERO") ? true : false);  r.addAll(l); RESULT = r;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lb",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // lb ::= IDENT PC lb 
            {
              ArrayList<Boolean> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Boolean> l = (ArrayList<Boolean>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<Boolean> r = new ArrayList<>();  r.add(ID.get(id).equals("VERDADERO") ? true : false);  r.addAll(l); RESULT = r;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lb",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // lb ::= IDENT 
            {
              ArrayList<Boolean> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<Boolean> r = new ArrayList<>();  r.add(ID.get(id).equals("VERDADERO") ? true : false); RESULT = r;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lb",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // lb ::= vf 
            {
              ArrayList<Boolean> RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<Boolean> r = new ArrayList<>();  r.add(n1.equals("VERDADERO") ? true : false);  RESULT = r; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lb",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // lb ::= vf PC lb 
            {
              ArrayList<Boolean> RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Boolean> l = (ArrayList<Boolean>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<Boolean> r = new ArrayList<>();  r.add(n1.equals("VERDADERO") ? true : false);  r.addAll(l); RESULT = r;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lb",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ec ::= NO AP lb CP 
            {
              String RESULT =null;
		 RESULT = "ERROR: DEMASIADOS ARGUMENTOS"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ec",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ec ::= in MAY EQ vf 
            {
              String RESULT =null;
		 RESULT = "ERROR: COMPARADOR BOOLEANO INCORRECTO"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ec",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ec ::= in MEN EQ vf 
            {
              String RESULT =null;
		 RESULT = "ERROR: COMPARADOR BOOLEANO INCORRECTO"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ec",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ec ::= in MAY vf 
            {
              String RESULT =null;
		 RESULT = "ERROR: COMPARADOR BOOLEANO INCORRECTO"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ec",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ec ::= in MEN vf 
            {
              String RESULT =null;
		 RESULT = "ERROR: COMPARADOR BOOLEANO INCORRECTO"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ec",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ec ::= vf MAY EQ in 
            {
              String RESULT =null;
		 RESULT = "ERROR: NO CONCUERDAN TIPOS"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ec",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ec ::= vf MEN EQ in 
            {
              String RESULT =null;
		 RESULT = "ERROR: NO CONCUERDAN TIPOS"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ec",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ec ::= vf MAY in 
            {
              String RESULT =null;
		 RESULT = "ERROR: NO CONCUERDAN TIPOS"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ec",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ec ::= vf MEN in 
            {
              String RESULT =null;
		 RESULT = "ERROR: NO CONCUERDAN TIPOS"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ec",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ec ::= comp MAY EQ in 
            {
              String RESULT =null;
		 RESULT = "ERROR: COMPARADOR ES BINARIO"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ec",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ec ::= comp MEN EQ in 
            {
              String RESULT =null;
		 RESULT = "ERROR: COMPARADOR ES BINARIO"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ec",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ec ::= comp MAY in 
            {
              String RESULT =null;
		 RESULT = "ERROR: COMPARADOR ES BINARIO"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ec",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ec ::= comp MEN in 
            {
              String RESULT =null;
		 RESULT = "ERROR: COMPARADOR ES BINARIO"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ec",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // comp ::= NO AP IDENT CP 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = ID.get(b).equals("VERDADERO") ? "FALSO" : "VERDADERO"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comp",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // comp ::= NO AP vf CP 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = b.equals("VERDADERO") ? "FALSO" : "VERDADERO"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comp",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // comp ::= O AP lb CP 
            {
              String RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Boolean> l = (ArrayList<Boolean>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 boolean r = false; for(boolean n:l)  r = r || n; RESULT = r ? "VERDADERO" : "FALSO"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comp",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // comp ::= Y AP lb CP 
            {
              String RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Boolean> l = (ArrayList<Boolean>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 boolean r = true; for(boolean n:l)  r = r && n; RESULT = r ? "VERDADERO" : "FALSO"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comp",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // comp ::= IDENT EQ vf 
            {
              String RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = leer(ID, n1).equals(n2) ? "VEDADERO" : "FALSO"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comp",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // comp ::= vf EQ vf 
            {
              String RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n1.equals(n2) ? "VEDADERO" : "FALSO"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comp",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // comp ::= in EQ in 
            {
              String RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer n1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer n2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n1 == n2 ? "VEDADERO" : "FALSO"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comp",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // comp ::= in MAY EQ in 
            {
              String RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer n1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer n2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n1 >= n2 ? "VERDADERO" : "FALSO"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comp",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // comp ::= in MEN EQ in 
            {
              String RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer n1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer n2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n1 <= n2 ? "VERDADERO" : "FALSO"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comp",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // comp ::= in MAY in 
            {
              String RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer n1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer n2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n1 > n2 ? "VERDADERO" : "FALSO"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comp",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // comp ::= in MEN in 
            {
              String RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer n1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer n2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n1 < n2 ? "VERDADERO" : "FALSO"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comp",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // vf ::= F 
            {
              String RESULT =null;
		 RESULT = "FALSO"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vf",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // vf ::= V 
            {
              String RESULT =null;
		 RESULT = "VERDADERO"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vf",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ln ::= op 
            {
              ArrayList<Integer> RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer n1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<Integer> r = new ArrayList<>();  r.add(n1);  RESULT = r; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ln",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ln ::= op PC ln 
            {
              ArrayList<Integer> RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer n1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Integer> l = (ArrayList<Integer>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<Integer> r = new ArrayList<>();  r.add(n1);  r.addAll(l); RESULT = r;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ln",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ln ::= in 
            {
              ArrayList<Integer> RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer n1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<Integer> r = new ArrayList<>();  r.add(n1);  RESULT = r; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ln",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ln ::= in PC ln 
            {
              ArrayList<Integer> RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer n1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Integer> l = (ArrayList<Integer>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<Integer> r = new ArrayList<>();  r.add(n1);  r.addAll(l); RESULT = r;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ln",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // in ::= AP op CP 
            {
              Integer RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("in",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // in ::= IDENT 
            {
              Integer RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                      try{
                                        RESULT = Integer.parseInt(leer(ID,n));
                                      } catch(Exception e){

                                      }
                                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("in",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // in ::= i 
            {
              Integer RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("in",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // op ::= op EXP in 
            {
              Integer RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer n1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer n2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = (int) Math.pow(n1, n2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // op ::= op DIV in 
            {
              Integer RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer n1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer n2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n1/n2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // op ::= op POR in 
            {
              Integer RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer n1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer n2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n1*n2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // op ::= op MENOS in 
            {
              Integer RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer n1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer n2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n1-n2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // op ::= op MAS in 
            {
              Integer RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer n1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer n2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n1+n2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // op ::= PROM AP ln CP 
            {
              Integer RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Integer> l = (ArrayList<Integer>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 int r = 0; for(int n:l)  r += n; RESULT = r/l.size(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // op ::= SUM AP ln CP 
            {
              Integer RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Integer> l = (ArrayList<Integer>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 int r = 0; for(int n:l)  r += n; RESULT = r; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // op ::= in EXP in 
            {
              Integer RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer n1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer n2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = (int) Math.pow(n1, n2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // op ::= in DIV in 
            {
              Integer RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer n1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer n2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n1/n2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // op ::= in POR in 
            {
              Integer RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer n1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer n2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n1*n2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // op ::= in MENOS in 
            {
              Integer RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer n1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer n2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n1-n2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // op ::= in MAS in 
            {
              Integer RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer n1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer n2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n1+n2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // i ::= MENOS INT 
            {
              Integer RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = -n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("i",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // i ::= INT 
            {
              Integer RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("i",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ei ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ei",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ei ::= IDENT INT 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ei",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ei ::= INT 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ei",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // e ::= AC IDENT CC EQ ec 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ID.put(i, c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("e",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // e ::= AC ei CC DP vf 
            {
              String RESULT =null;
		 IHC.out.println("ERROR: REFERENCIA"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("e",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // e ::= AC IDENT CC EQ vf 
            {
              String RESULT =null;
		 IHC.out.println("ERROR: ASIGNACIóN"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("e",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // e ::= PRINT AP ei CP 
            {
              String RESULT =null;
		 IHC.out.println("ERROR: REFERENCIA"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("e",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // e ::= AC IDENT CC DP op 
            {
              String RESULT =null;
		 IHC.out.println("ERROR: VALOR CONSTANTE"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("e",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // e ::= AC ei CC DP i 
            {
              String RESULT =null;
		 IHC.out.println("ERROR: REFERENCIA INCORRECTA"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("e",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // e ::= AC IDENT CC EQ i 
            {
              String RESULT =null;
		 IHC.out.println("ERROR: ASIGNACIóN"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("e",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // s ::= AC IDENT CC EQ comp 
            {
              String RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ID.put(i1, c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // s ::= AC IDENT CC DP vf 
            {
              String RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ID.put(i1, b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // s ::= AC IDENT CC EQ op 
            {
              String RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ID.put(i1, n.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // s ::= PRINT AP IDENT CP 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 IHC.out.println(leer(ID, i)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // s ::= AC IDENT CC DP i 
            {
              String RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ID.put(i1, n.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ls ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ls",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ls ::= s ls 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ls",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // ls ::= e ls 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ls",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ls EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

